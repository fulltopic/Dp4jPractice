// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2.proto

package dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto;

public final class Caffe2 {
  private Caffe2() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * DeviceType that Caffe2 currently supports.
   * Note: if you add a device type, make sure you add the corresponding device
   * line in the DeviceTypeName() function in caffe2/utils/proto_utils.cc
   * and update c10/DeviceType.h
   * </pre>
   *
   * Protobuf enum {@code dp4jpractice.org.toolsd.dataprocess.dbprocess.caffeproto.DeviceTypeProto}
   */
  public enum DeviceTypeProto
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * In default, we will use CPU.
     * </pre>
     *
     * <code>PROTO_CPU = 0;</code>
     */
    PROTO_CPU(0),
    /**
     * <pre>
     * CUDA.
     * </pre>
     *
     * <code>PROTO_CUDA = 1;</code>
     */
    PROTO_CUDA(1),
    /**
     * <pre>
     * Reserved for explicit MKLDNN
     * </pre>
     *
     * <code>PROTO_MKLDNN = 2;</code>
     */
    PROTO_MKLDNN(2),
    /**
     * <pre>
     * OpenGL
     * </pre>
     *
     * <code>PROTO_OPENGL = 3;</code>
     */
    PROTO_OPENGL(3),
    /**
     * <pre>
     * OpenCL
     * </pre>
     *
     * <code>PROTO_OPENCL = 4;</code>
     */
    PROTO_OPENCL(4),
    /**
     * <pre>
     * IDEEP.
     * </pre>
     *
     * <code>PROTO_IDEEP = 5;</code>
     */
    PROTO_IDEEP(5),
    /**
     * <pre>
     * AMD HIP
     * </pre>
     *
     * <code>PROTO_HIP = 6;</code>
     */
    PROTO_HIP(6),
    /**
     * <pre>
     * FPGA
     * </pre>
     *
     * <code>PROTO_FPGA = 7;</code>
     */
    PROTO_FPGA(7),
    /**
     * <pre>
     * Change the following number if you add more devices in the code.
     * </pre>
     *
     * <code>PROTO_COMPILE_TIME_MAX_DEVICE_TYPES = 8;</code>
     */
    PROTO_COMPILE_TIME_MAX_DEVICE_TYPES(8),
    /**
     * <pre>
     * This device type is only for test.
     * </pre>
     *
     * <code>PROTO_ONLY_FOR_TEST = 20901;</code>
     */
    PROTO_ONLY_FOR_TEST(20901),
    ;

    /**
     * <pre>
     * In default, we will use CPU.
     * </pre>
     *
     * <code>PROTO_CPU = 0;</code>
     */
    public static final int PROTO_CPU_VALUE = 0;
    /**
     * <pre>
     * CUDA.
     * </pre>
     *
     * <code>PROTO_CUDA = 1;</code>
     */
    public static final int PROTO_CUDA_VALUE = 1;
    /**
     * <pre>
     * Reserved for explicit MKLDNN
     * </pre>
     *
     * <code>PROTO_MKLDNN = 2;</code>
     */
    public static final int PROTO_MKLDNN_VALUE = 2;
    /**
     * <pre>
     * OpenGL
     * </pre>
     *
     * <code>PROTO_OPENGL = 3;</code>
     */
    public static final int PROTO_OPENGL_VALUE = 3;
    /**
     * <pre>
     * OpenCL
     * </pre>
     *
     * <code>PROTO_OPENCL = 4;</code>
     */
    public static final int PROTO_OPENCL_VALUE = 4;
    /**
     * <pre>
     * IDEEP.
     * </pre>
     *
     * <code>PROTO_IDEEP = 5;</code>
     */
    public static final int PROTO_IDEEP_VALUE = 5;
    /**
     * <pre>
     * AMD HIP
     * </pre>
     *
     * <code>PROTO_HIP = 6;</code>
     */
    public static final int PROTO_HIP_VALUE = 6;
    /**
     * <pre>
     * FPGA
     * </pre>
     *
     * <code>PROTO_FPGA = 7;</code>
     */
    public static final int PROTO_FPGA_VALUE = 7;
    /**
     * <pre>
     * Change the following number if you add more devices in the code.
     * </pre>
     *
     * <code>PROTO_COMPILE_TIME_MAX_DEVICE_TYPES = 8;</code>
     */
    public static final int PROTO_COMPILE_TIME_MAX_DEVICE_TYPES_VALUE = 8;
    /**
     * <pre>
     * This device type is only for test.
     * </pre>
     *
     * <code>PROTO_ONLY_FOR_TEST = 20901;</code>
     */
    public static final int PROTO_ONLY_FOR_TEST_VALUE = 20901;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeviceTypeProto valueOf(int value) {
      return forNumber(value);
    }

    public static DeviceTypeProto forNumber(int value) {
      switch (value) {
        case 0: return PROTO_CPU;
        case 1: return PROTO_CUDA;
        case 2: return PROTO_MKLDNN;
        case 3: return PROTO_OPENGL;
        case 4: return PROTO_OPENCL;
        case 5: return PROTO_IDEEP;
        case 6: return PROTO_HIP;
        case 7: return PROTO_FPGA;
        case 8: return PROTO_COMPILE_TIME_MAX_DEVICE_TYPES;
        case 20901: return PROTO_ONLY_FOR_TEST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeviceTypeProto>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeviceTypeProto> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeviceTypeProto>() {
            public DeviceTypeProto findValueByNumber(int number) {
              return DeviceTypeProto.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.getDescriptor().getEnumTypes().get(0);
    }

    private static final DeviceTypeProto[] VALUES = values();

    public static DeviceTypeProto valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DeviceTypeProto(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:dp4jpractice.org.toolsd.dataprocess.dbprocess.caffeproto.DeviceTypeProto)
  }

  public interface ExternalDataProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.toolsd.dataprocess.dbprocess.caffeproto.ExternalDataProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dp4jpractice.org.toolsd.dataprocess.dbprocess.caffeproto.ExternalDataProto.SourceType source_type = 1 [default = INLINE_CONTAINER];</code>
     */
    boolean hasSourceType();
    /**
     * <code>optional .dp4jpractice.org.toolsd.dataprocess.dbprocess.caffeproto.ExternalDataProto.SourceType source_type = 1 [default = INLINE_CONTAINER];</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.SourceType getSourceType();

    /**
     * <pre>
     * used together with type
     * </pre>
     *
     * <code>optional string record_id = 2;</code>
     */
    boolean hasRecordId();
    /**
     * <pre>
     * used together with type
     * </pre>
     *
     * <code>optional string record_id = 2;</code>
     */
    java.lang.String getRecordId();
    /**
     * <pre>
     * used together with type
     * </pre>
     *
     * <code>optional string record_id = 2;</code>
     */
    com.google.protobuf.ByteString
        getRecordIdBytes();

    /**
     * <pre>
     * the size of the entire record (in bytes)
     * </pre>
     *
     * <code>optional uint64 record_size = 5;</code>
     */
    boolean hasRecordSize();
    /**
     * <pre>
     * the size of the entire record (in bytes)
     * </pre>
     *
     * <code>optional uint64 record_size = 5;</code>
     */
    long getRecordSize();

    /**
     * <pre>
     * the offset of the starting point, the content may be shared between
     * multiple tensors
     * </pre>
     *
     * <code>optional int64 offset = 3 [default = 0];</code>
     */
    boolean hasOffset();
    /**
     * <pre>
     * the offset of the starting point, the content may be shared between
     * multiple tensors
     * </pre>
     *
     * <code>optional int64 offset = 3 [default = 0];</code>
     */
    long getOffset();

    /**
     * <pre>
     * the strides of the content
     * </pre>
     *
     * <code>repeated int64 strides = 4;</code>
     */
    java.util.List<java.lang.Long> getStridesList();
    /**
     * <pre>
     * the strides of the content
     * </pre>
     *
     * <code>repeated int64 strides = 4;</code>
     */
    int getStridesCount();
    /**
     * <pre>
     * the strides of the content
     * </pre>
     *
     * <code>repeated int64 strides = 4;</code>
     */
    long getStrides(int index);
  }
  /**
   * <pre>
   * ExternalDataProto stores the pointer to the content of TensorProto
   * the content are stored in the raw format as little endian
   * </pre>
   *
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto}
   */
  public  static final class ExternalDataProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto)
      ExternalDataProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExternalDataProto.newBuilder() to construct.
    private ExternalDataProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExternalDataProto() {
      sourceType_ = 0;
      recordId_ = "";
      recordSize_ = 0L;
      offset_ = 0L;
      strides_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExternalDataProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.SourceType value = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.SourceType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                sourceType_ = rawValue;
              }
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              recordId_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000008;
              offset_ = input.readInt64();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                strides_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000010;
              }
              strides_.add(input.readInt64());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                strides_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                strides_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              recordSize_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          strides_ = java.util.Collections.unmodifiableList(strides_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExternalDataProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExternalDataProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.Builder.class);
    }

    /**
     * <pre>
     * type of the external storage type, can be the following:
     * </pre>
     *
     * Protobuf enum {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto.SourceType}
     */
    public enum SourceType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * the container defined in torch/csrc/jit/serialization.h is used,
       * and record_id is the tag to help the runtime identify the data
       * this type of storage is set as DEFAULT and recommended for external
       * data storage
       * </pre>
       *
       * <code>INLINE_CONTAINER = 0;</code>
       */
      INLINE_CONTAINER(0),
      /**
       * <pre>
       * use external file to store the data, and record_id is the POSIX relative path
       * to the file. this (simple) file is only for the data, and the data is stored
       * as little endian in the file
       * </pre>
       *
       * <code>SIMPLE_FILE = 1;</code>
       */
      SIMPLE_FILE(1),
      ;

      /**
       * <pre>
       * the container defined in torch/csrc/jit/serialization.h is used,
       * and record_id is the tag to help the runtime identify the data
       * this type of storage is set as DEFAULT and recommended for external
       * data storage
       * </pre>
       *
       * <code>INLINE_CONTAINER = 0;</code>
       */
      public static final int INLINE_CONTAINER_VALUE = 0;
      /**
       * <pre>
       * use external file to store the data, and record_id is the POSIX relative path
       * to the file. this (simple) file is only for the data, and the data is stored
       * as little endian in the file
       * </pre>
       *
       * <code>SIMPLE_FILE = 1;</code>
       */
      public static final int SIMPLE_FILE_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SourceType valueOf(int value) {
        return forNumber(value);
      }

      public static SourceType forNumber(int value) {
        switch (value) {
          case 0: return INLINE_CONTAINER;
          case 1: return SIMPLE_FILE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SourceType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SourceType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SourceType>() {
              public SourceType findValueByNumber(int number) {
                return SourceType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.getDescriptor().getEnumTypes().get(0);
      }

      private static final SourceType[] VALUES = values();

      public static SourceType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SourceType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto.SourceType)
    }

    private int bitField0_;
    public static final int SOURCE_TYPE_FIELD_NUMBER = 1;
    private int sourceType_;
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto.SourceType source_type = 1 [default = INLINE_CONTAINER];</code>
     */
    public boolean hasSourceType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto.SourceType source_type = 1 [default = INLINE_CONTAINER];</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.SourceType getSourceType() {
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.SourceType result = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.SourceType.valueOf(sourceType_);
      return result == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.SourceType.INLINE_CONTAINER : result;
    }

    public static final int RECORD_ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object recordId_;
    /**
     * <pre>
     * used together with type
     * </pre>
     *
     * <code>optional string record_id = 2;</code>
     */
    public boolean hasRecordId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * used together with type
     * </pre>
     *
     * <code>optional string record_id = 2;</code>
     */
    public java.lang.String getRecordId() {
      java.lang.Object ref = recordId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          recordId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * used together with type
     * </pre>
     *
     * <code>optional string record_id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getRecordIdBytes() {
      java.lang.Object ref = recordId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        recordId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RECORD_SIZE_FIELD_NUMBER = 5;
    private long recordSize_;
    /**
     * <pre>
     * the size of the entire record (in bytes)
     * </pre>
     *
     * <code>optional uint64 record_size = 5;</code>
     */
    public boolean hasRecordSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * the size of the entire record (in bytes)
     * </pre>
     *
     * <code>optional uint64 record_size = 5;</code>
     */
    public long getRecordSize() {
      return recordSize_;
    }

    public static final int OFFSET_FIELD_NUMBER = 3;
    private long offset_;
    /**
     * <pre>
     * the offset of the starting point, the content may be shared between
     * multiple tensors
     * </pre>
     *
     * <code>optional int64 offset = 3 [default = 0];</code>
     */
    public boolean hasOffset() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * the offset of the starting point, the content may be shared between
     * multiple tensors
     * </pre>
     *
     * <code>optional int64 offset = 3 [default = 0];</code>
     */
    public long getOffset() {
      return offset_;
    }

    public static final int STRIDES_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Long> strides_;
    /**
     * <pre>
     * the strides of the content
     * </pre>
     *
     * <code>repeated int64 strides = 4;</code>
     */
    public java.util.List<java.lang.Long>
        getStridesList() {
      return strides_;
    }
    /**
     * <pre>
     * the strides of the content
     * </pre>
     *
     * <code>repeated int64 strides = 4;</code>
     */
    public int getStridesCount() {
      return strides_.size();
    }
    /**
     * <pre>
     * the strides of the content
     * </pre>
     *
     * <code>repeated int64 strides = 4;</code>
     */
    public long getStrides(int index) {
      return strides_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, sourceType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, recordId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(3, offset_);
      }
      for (int i = 0; i < strides_.size(); i++) {
        output.writeInt64(4, strides_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(5, recordSize_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, sourceType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, recordId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, offset_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < strides_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(strides_.get(i));
        }
        size += dataSize;
        size += 1 * getStridesList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, recordSize_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto) obj;

      boolean result = true;
      result = result && (hasSourceType() == other.hasSourceType());
      if (hasSourceType()) {
        result = result && sourceType_ == other.sourceType_;
      }
      result = result && (hasRecordId() == other.hasRecordId());
      if (hasRecordId()) {
        result = result && getRecordId()
            .equals(other.getRecordId());
      }
      result = result && (hasRecordSize() == other.hasRecordSize());
      if (hasRecordSize()) {
        result = result && (getRecordSize()
            == other.getRecordSize());
      }
      result = result && (hasOffset() == other.hasOffset());
      if (hasOffset()) {
        result = result && (getOffset()
            == other.getOffset());
      }
      result = result && getStridesList()
          .equals(other.getStridesList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSourceType()) {
        hash = (37 * hash) + SOURCE_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + sourceType_;
      }
      if (hasRecordId()) {
        hash = (37 * hash) + RECORD_ID_FIELD_NUMBER;
        hash = (53 * hash) + getRecordId().hashCode();
      }
      if (hasRecordSize()) {
        hash = (37 * hash) + RECORD_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getRecordSize());
      }
      if (hasOffset()) {
        hash = (37 * hash) + OFFSET_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getOffset());
      }
      if (getStridesCount() > 0) {
        hash = (37 * hash) + STRIDES_FIELD_NUMBER;
        hash = (53 * hash) + getStridesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ExternalDataProto stores the pointer to the content of TensorProto
     * the content are stored in the raw format as little endian
     * </pre>
     *
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExternalDataProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExternalDataProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        sourceType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        recordId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        recordSize_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        offset_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        strides_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExternalDataProto_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sourceType_ = sourceType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.recordId_ = recordId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.recordSize_ = recordSize_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.offset_ = offset_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          strides_ = java.util.Collections.unmodifiableList(strides_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.strides_ = strides_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.getDefaultInstance()) return this;
        if (other.hasSourceType()) {
          setSourceType(other.getSourceType());
        }
        if (other.hasRecordId()) {
          bitField0_ |= 0x00000002;
          recordId_ = other.recordId_;
          onChanged();
        }
        if (other.hasRecordSize()) {
          setRecordSize(other.getRecordSize());
        }
        if (other.hasOffset()) {
          setOffset(other.getOffset());
        }
        if (!other.strides_.isEmpty()) {
          if (strides_.isEmpty()) {
            strides_ = other.strides_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureStridesIsMutable();
            strides_.addAll(other.strides_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int sourceType_ = 0;
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto.SourceType source_type = 1 [default = INLINE_CONTAINER];</code>
       */
      public boolean hasSourceType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto.SourceType source_type = 1 [default = INLINE_CONTAINER];</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.SourceType getSourceType() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.SourceType result = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.SourceType.valueOf(sourceType_);
        return result == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.SourceType.INLINE_CONTAINER : result;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto.SourceType source_type = 1 [default = INLINE_CONTAINER];</code>
       */
      public Builder setSourceType(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.SourceType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        sourceType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto.SourceType source_type = 1 [default = INLINE_CONTAINER];</code>
       */
      public Builder clearSourceType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sourceType_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object recordId_ = "";
      /**
       * <pre>
       * used together with type
       * </pre>
       *
       * <code>optional string record_id = 2;</code>
       */
      public boolean hasRecordId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * used together with type
       * </pre>
       *
       * <code>optional string record_id = 2;</code>
       */
      public java.lang.String getRecordId() {
        java.lang.Object ref = recordId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            recordId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * used together with type
       * </pre>
       *
       * <code>optional string record_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getRecordIdBytes() {
        java.lang.Object ref = recordId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          recordId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * used together with type
       * </pre>
       *
       * <code>optional string record_id = 2;</code>
       */
      public Builder setRecordId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        recordId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * used together with type
       * </pre>
       *
       * <code>optional string record_id = 2;</code>
       */
      public Builder clearRecordId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        recordId_ = getDefaultInstance().getRecordId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * used together with type
       * </pre>
       *
       * <code>optional string record_id = 2;</code>
       */
      public Builder setRecordIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        recordId_ = value;
        onChanged();
        return this;
      }

      private long recordSize_ ;
      /**
       * <pre>
       * the size of the entire record (in bytes)
       * </pre>
       *
       * <code>optional uint64 record_size = 5;</code>
       */
      public boolean hasRecordSize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * the size of the entire record (in bytes)
       * </pre>
       *
       * <code>optional uint64 record_size = 5;</code>
       */
      public long getRecordSize() {
        return recordSize_;
      }
      /**
       * <pre>
       * the size of the entire record (in bytes)
       * </pre>
       *
       * <code>optional uint64 record_size = 5;</code>
       */
      public Builder setRecordSize(long value) {
        bitField0_ |= 0x00000004;
        recordSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the size of the entire record (in bytes)
       * </pre>
       *
       * <code>optional uint64 record_size = 5;</code>
       */
      public Builder clearRecordSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        recordSize_ = 0L;
        onChanged();
        return this;
      }

      private long offset_ ;
      /**
       * <pre>
       * the offset of the starting point, the content may be shared between
       * multiple tensors
       * </pre>
       *
       * <code>optional int64 offset = 3 [default = 0];</code>
       */
      public boolean hasOffset() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * the offset of the starting point, the content may be shared between
       * multiple tensors
       * </pre>
       *
       * <code>optional int64 offset = 3 [default = 0];</code>
       */
      public long getOffset() {
        return offset_;
      }
      /**
       * <pre>
       * the offset of the starting point, the content may be shared between
       * multiple tensors
       * </pre>
       *
       * <code>optional int64 offset = 3 [default = 0];</code>
       */
      public Builder setOffset(long value) {
        bitField0_ |= 0x00000008;
        offset_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the offset of the starting point, the content may be shared between
       * multiple tensors
       * </pre>
       *
       * <code>optional int64 offset = 3 [default = 0];</code>
       */
      public Builder clearOffset() {
        bitField0_ = (bitField0_ & ~0x00000008);
        offset_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> strides_ = java.util.Collections.emptyList();
      private void ensureStridesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          strides_ = new java.util.ArrayList<java.lang.Long>(strides_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <pre>
       * the strides of the content
       * </pre>
       *
       * <code>repeated int64 strides = 4;</code>
       */
      public java.util.List<java.lang.Long>
          getStridesList() {
        return java.util.Collections.unmodifiableList(strides_);
      }
      /**
       * <pre>
       * the strides of the content
       * </pre>
       *
       * <code>repeated int64 strides = 4;</code>
       */
      public int getStridesCount() {
        return strides_.size();
      }
      /**
       * <pre>
       * the strides of the content
       * </pre>
       *
       * <code>repeated int64 strides = 4;</code>
       */
      public long getStrides(int index) {
        return strides_.get(index);
      }
      /**
       * <pre>
       * the strides of the content
       * </pre>
       *
       * <code>repeated int64 strides = 4;</code>
       */
      public Builder setStrides(
          int index, long value) {
        ensureStridesIsMutable();
        strides_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the strides of the content
       * </pre>
       *
       * <code>repeated int64 strides = 4;</code>
       */
      public Builder addStrides(long value) {
        ensureStridesIsMutable();
        strides_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the strides of the content
       * </pre>
       *
       * <code>repeated int64 strides = 4;</code>
       */
      public Builder addAllStrides(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureStridesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, strides_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the strides of the content
       * </pre>
       *
       * <code>repeated int64 strides = 4;</code>
       */
      public Builder clearStrides() {
        strides_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ExternalDataProto>
        PARSER = new com.google.protobuf.AbstractParser<ExternalDataProto>() {
      public ExternalDataProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExternalDataProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ExternalDataProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExternalDataProto> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TensorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The dimensions in the tensor.
     * </pre>
     *
     * <code>repeated int64 dims = 1;</code>
     */
    java.util.List<java.lang.Long> getDimsList();
    /**
     * <pre>
     * The dimensions in the tensor.
     * </pre>
     *
     * <code>repeated int64 dims = 1;</code>
     */
    int getDimsCount();
    /**
     * <pre>
     * The dimensions in the tensor.
     * </pre>
     *
     * <code>repeated int64 dims = 1;</code>
     */
    long getDims(int index);

    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
     */
    boolean hasDataType();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType getDataType();

    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.StorageType storage_type = 12 [default = TYPED];</code>
     */
    boolean hasStorageType();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.StorageType storage_type = 12 [default = TYPED];</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.StorageType getStorageType();

    /**
     * <pre>
     * For float
     * </pre>
     *
     * <code>repeated float float_data = 3 [packed = true];</code>
     */
    java.util.List<java.lang.Float> getFloatDataList();
    /**
     * <pre>
     * For float
     * </pre>
     *
     * <code>repeated float float_data = 3 [packed = true];</code>
     */
    int getFloatDataCount();
    /**
     * <pre>
     * For float
     * </pre>
     *
     * <code>repeated float float_data = 3 [packed = true];</code>
     */
    float getFloatData(int index);

    /**
     * <pre>
     * For int32, uint8, int8, uint16, int16, bool, and float16
     * Note about float16: in storage we will basically convert float16 byte-wise
     * to unsigned short and then store them in the int32_data field.
     * </pre>
     *
     * <code>repeated int32 int32_data = 4 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getInt32DataList();
    /**
     * <pre>
     * For int32, uint8, int8, uint16, int16, bool, and float16
     * Note about float16: in storage we will basically convert float16 byte-wise
     * to unsigned short and then store them in the int32_data field.
     * </pre>
     *
     * <code>repeated int32 int32_data = 4 [packed = true];</code>
     */
    int getInt32DataCount();
    /**
     * <pre>
     * For int32, uint8, int8, uint16, int16, bool, and float16
     * Note about float16: in storage we will basically convert float16 byte-wise
     * to unsigned short and then store them in the int32_data field.
     * </pre>
     *
     * <code>repeated int32 int32_data = 4 [packed = true];</code>
     */
    int getInt32Data(int index);

    /**
     * <pre>
     * For bytes
     * </pre>
     *
     * <code>optional bytes byte_data = 5;</code>
     */
    boolean hasByteData();
    /**
     * <pre>
     * For bytes
     * </pre>
     *
     * <code>optional bytes byte_data = 5;</code>
     */
    com.google.protobuf.ByteString getByteData();

    /**
     * <pre>
     * For strings
     * </pre>
     *
     * <code>repeated bytes string_data = 6;</code>
     */
    java.util.List<com.google.protobuf.ByteString> getStringDataList();
    /**
     * <pre>
     * For strings
     * </pre>
     *
     * <code>repeated bytes string_data = 6;</code>
     */
    int getStringDataCount();
    /**
     * <pre>
     * For strings
     * </pre>
     *
     * <code>repeated bytes string_data = 6;</code>
     */
    com.google.protobuf.ByteString getStringData(int index);

    /**
     * <pre>
     * For double
     * </pre>
     *
     * <code>repeated double double_data = 9 [packed = true];</code>
     */
    java.util.List<java.lang.Double> getDoubleDataList();
    /**
     * <pre>
     * For double
     * </pre>
     *
     * <code>repeated double double_data = 9 [packed = true];</code>
     */
    int getDoubleDataCount();
    /**
     * <pre>
     * For double
     * </pre>
     *
     * <code>repeated double double_data = 9 [packed = true];</code>
     */
    double getDoubleData(int index);

    /**
     * <pre>
     * For int64
     * </pre>
     *
     * <code>repeated int64 int64_data = 10 [packed = true];</code>
     */
    java.util.List<java.lang.Long> getInt64DataList();
    /**
     * <pre>
     * For int64
     * </pre>
     *
     * <code>repeated int64 int64_data = 10 [packed = true];</code>
     */
    int getInt64DataCount();
    /**
     * <pre>
     * For int64
     * </pre>
     *
     * <code>repeated int64 int64_data = 10 [packed = true];</code>
     */
    long getInt64Data(int index);

    /**
     * <pre>
     * store the raw data, contents are serialized as little-endian
     * </pre>
     *
     * <code>optional bytes raw_data = 13;</code>
     */
    boolean hasRawData();
    /**
     * <pre>
     * store the raw data, contents are serialized as little-endian
     * </pre>
     *
     * <code>optional bytes raw_data = 13;</code>
     */
    com.google.protobuf.ByteString getRawData();

    /**
     * <pre>
     * store the pointer to the data
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
     */
    boolean hasExternalData();
    /**
     * <pre>
     * store the pointer to the data
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto getExternalData();
    /**
     * <pre>
     * store the pointer to the data
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProtoOrBuilder getExternalDataOrBuilder();

    /**
     * <pre>
     * Optionally, a name for the tensor.
     * </pre>
     *
     * <code>optional string name = 7;</code>
     */
    boolean hasName();
    /**
     * <pre>
     * Optionally, a name for the tensor.
     * </pre>
     *
     * <code>optional string name = 7;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * Optionally, a name for the tensor.
     * </pre>
     *
     * <code>optional string name = 7;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Optionally, a TensorProto can contain the details about the device that
     * it was serialized from. This is useful in cases like snapshotting a whole
     * workspace in a multi-GPU environment.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
     */
    boolean hasDeviceDetail();
    /**
     * <pre>
     * Optionally, a TensorProto can contain the details about the device that
     * it was serialized from. This is useful in cases like snapshotting a whole
     * workspace in a multi-GPU environment.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption getDeviceDetail();
    /**
     * <pre>
     * Optionally, a TensorProto can contain the details about the device that
     * it was serialized from. This is useful in cases like snapshotting a whole
     * workspace in a multi-GPU environment.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder getDeviceDetailOrBuilder();

    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
     */
    boolean hasSegment();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment getSegment();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.SegmentOrBuilder getSegmentOrBuilder();
  }
  /**
   * <pre>
   * TensorProto stores serialized Tensor objects.
   * </pre>
   *
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto}
   */
  public  static final class TensorProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto)
      TensorProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TensorProto.newBuilder() to construct.
    private TensorProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TensorProto() {
      dims_ = java.util.Collections.emptyList();
      dataType_ = 1;
      storageType_ = 1;
      floatData_ = java.util.Collections.emptyList();
      int32Data_ = java.util.Collections.emptyList();
      byteData_ = com.google.protobuf.ByteString.EMPTY;
      stringData_ = java.util.Collections.emptyList();
      doubleData_ = java.util.Collections.emptyList();
      int64Data_ = java.util.Collections.emptyList();
      rawData_ = com.google.protobuf.ByteString.EMPTY;
      name_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TensorProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                dims_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              dims_.add(input.readInt64());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                dims_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                dims_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType value = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                dataType_ = rawValue;
              }
              break;
            }
            case 29: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                floatData_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000008;
              }
              floatData_.add(input.readFloat());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                floatData_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                floatData_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                int32Data_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              int32Data_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                int32Data_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                int32Data_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              bitField0_ |= 0x00000004;
              byteData_ = input.readBytes();
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                stringData_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000040;
              }
              stringData_.add(input.readBytes());
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              name_ = bs;
              break;
            }
            case 66: {
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = deviceDetail_.toBuilder();
              }
              deviceDetail_ = input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(deviceDetail_);
                deviceDetail_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 73: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                doubleData_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000080;
              }
              doubleData_.add(input.readDouble());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                doubleData_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                doubleData_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                int64Data_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000100;
              }
              int64Data_.add(input.readInt64());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                int64Data_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                int64Data_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 90: {
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = segment_.toBuilder();
              }
              segment_ = input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(segment_);
                segment_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 96: {
              int rawValue = input.readEnum();
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.StorageType value = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.StorageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(12, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                storageType_ = rawValue;
              }
              break;
            }
            case 106: {
              bitField0_ |= 0x00000008;
              rawData_ = input.readBytes();
              break;
            }
            case 114: {
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = externalData_.toBuilder();
              }
              externalData_ = input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(externalData_);
                externalData_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          dims_ = java.util.Collections.unmodifiableList(dims_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          floatData_ = java.util.Collections.unmodifiableList(floatData_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          int32Data_ = java.util.Collections.unmodifiableList(int32Data_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          stringData_ = java.util.Collections.unmodifiableList(stringData_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          doubleData_ = java.util.Collections.unmodifiableList(doubleData_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          int64Data_ = java.util.Collections.unmodifiableList(int64Data_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder.class);
    }

    /**
     * <pre>
     * Data type
     * </pre>
     *
     * Protobuf enum {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType}
     */
    public enum DataType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNDEFINED = 0;</code>
       */
      UNDEFINED(0),
      /**
       * <pre>
       * Basic types
       * </pre>
       *
       * <code>FLOAT = 1;</code>
       */
      FLOAT(1),
      /**
       * <pre>
       * int
       * </pre>
       *
       * <code>INT32 = 2;</code>
       */
      INT32(2),
      /**
       * <pre>
       * byte, when deserialized, is going to be restored as uint8
       * </pre>
       *
       * <code>BYTE = 3;</code>
       */
      BYTE(3),
      /**
       * <pre>
       * string
       * </pre>
       *
       * <code>STRING = 4;</code>
       */
      STRING(4),
      /**
       * <pre>
       * Less-commonly used data types
       * </pre>
       *
       * <code>BOOL = 5;</code>
       */
      BOOL(5),
      /**
       * <pre>
       * uint8_t
       * </pre>
       *
       * <code>UINT8 = 6;</code>
       */
      UINT8(6),
      /**
       * <pre>
       * int8_t
       * </pre>
       *
       * <code>INT8 = 7;</code>
       */
      INT8(7),
      /**
       * <pre>
       * uint16_t
       * </pre>
       *
       * <code>UINT16 = 8;</code>
       */
      UINT16(8),
      /**
       * <pre>
       * int16_t
       * </pre>
       *
       * <code>INT16 = 9;</code>
       */
      INT16(9),
      /**
       * <pre>
       * int64_t
       * </pre>
       *
       * <code>INT64 = 10;</code>
       */
      INT64(10),
      /**
       * <pre>
       * at::Half
       * </pre>
       *
       * <code>FLOAT16 = 12;</code>
       */
      FLOAT16(12),
      /**
       * <pre>
       * double
       * </pre>
       *
       * <code>DOUBLE = 13;</code>
       */
      DOUBLE(13),
      ;

      /**
       * <code>UNDEFINED = 0;</code>
       */
      public static final int UNDEFINED_VALUE = 0;
      /**
       * <pre>
       * Basic types
       * </pre>
       *
       * <code>FLOAT = 1;</code>
       */
      public static final int FLOAT_VALUE = 1;
      /**
       * <pre>
       * int
       * </pre>
       *
       * <code>INT32 = 2;</code>
       */
      public static final int INT32_VALUE = 2;
      /**
       * <pre>
       * byte, when deserialized, is going to be restored as uint8
       * </pre>
       *
       * <code>BYTE = 3;</code>
       */
      public static final int BYTE_VALUE = 3;
      /**
       * <pre>
       * string
       * </pre>
       *
       * <code>STRING = 4;</code>
       */
      public static final int STRING_VALUE = 4;
      /**
       * <pre>
       * Less-commonly used data types
       * </pre>
       *
       * <code>BOOL = 5;</code>
       */
      public static final int BOOL_VALUE = 5;
      /**
       * <pre>
       * uint8_t
       * </pre>
       *
       * <code>UINT8 = 6;</code>
       */
      public static final int UINT8_VALUE = 6;
      /**
       * <pre>
       * int8_t
       * </pre>
       *
       * <code>INT8 = 7;</code>
       */
      public static final int INT8_VALUE = 7;
      /**
       * <pre>
       * uint16_t
       * </pre>
       *
       * <code>UINT16 = 8;</code>
       */
      public static final int UINT16_VALUE = 8;
      /**
       * <pre>
       * int16_t
       * </pre>
       *
       * <code>INT16 = 9;</code>
       */
      public static final int INT16_VALUE = 9;
      /**
       * <pre>
       * int64_t
       * </pre>
       *
       * <code>INT64 = 10;</code>
       */
      public static final int INT64_VALUE = 10;
      /**
       * <pre>
       * at::Half
       * </pre>
       *
       * <code>FLOAT16 = 12;</code>
       */
      public static final int FLOAT16_VALUE = 12;
      /**
       * <pre>
       * double
       * </pre>
       *
       * <code>DOUBLE = 13;</code>
       */
      public static final int DOUBLE_VALUE = 13;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static DataType valueOf(int value) {
        return forNumber(value);
      }

      public static DataType forNumber(int value) {
        switch (value) {
          case 0: return UNDEFINED;
          case 1: return FLOAT;
          case 2: return INT32;
          case 3: return BYTE;
          case 4: return STRING;
          case 5: return BOOL;
          case 6: return UINT8;
          case 7: return INT8;
          case 8: return UINT16;
          case 9: return INT16;
          case 10: return INT64;
          case 12: return FLOAT16;
          case 13: return DOUBLE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DataType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          DataType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DataType>() {
              public DataType findValueByNumber(int number) {
                return DataType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDescriptor().getEnumTypes().get(0);
      }

      private static final DataType[] VALUES = values();

      public static DataType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private DataType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType)
    }

    /**
     * <pre>
     * data storage
     * </pre>
     *
     * Protobuf enum {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.StorageType}
     */
    public enum StorageType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * the content is stored in typed field, for example, if the data_type is
       * FLOAT, float_data is used to store the content.
       * </pre>
       *
       * <code>TYPED = 1;</code>
       */
      TYPED(1),
      /**
       * <pre>
       * the content is serialized in field raw_data as little-endian
       * </pre>
       *
       * <code>RAW = 2;</code>
       */
      RAW(2),
      /**
       * <pre>
       * the pointer to the content is stored in field external_data
       * the content is serialized as little-endian
       * </pre>
       *
       * <code>EXTERNAL = 3;</code>
       */
      EXTERNAL(3),
      /**
       * <pre>
       * When StorageType is NO_CONTENT, we use TensorProto to store only type
       * and shape information. Reuse TensorProto to store type and shape
       * because we can just have one proto, not having another ValueInfoProto
       * </pre>
       *
       * <code>NO_CONTENT = 4;</code>
       */
      NO_CONTENT(4),
      ;

      /**
       * <pre>
       * the content is stored in typed field, for example, if the data_type is
       * FLOAT, float_data is used to store the content.
       * </pre>
       *
       * <code>TYPED = 1;</code>
       */
      public static final int TYPED_VALUE = 1;
      /**
       * <pre>
       * the content is serialized in field raw_data as little-endian
       * </pre>
       *
       * <code>RAW = 2;</code>
       */
      public static final int RAW_VALUE = 2;
      /**
       * <pre>
       * the pointer to the content is stored in field external_data
       * the content is serialized as little-endian
       * </pre>
       *
       * <code>EXTERNAL = 3;</code>
       */
      public static final int EXTERNAL_VALUE = 3;
      /**
       * <pre>
       * When StorageType is NO_CONTENT, we use TensorProto to store only type
       * and shape information. Reuse TensorProto to store type and shape
       * because we can just have one proto, not having another ValueInfoProto
       * </pre>
       *
       * <code>NO_CONTENT = 4;</code>
       */
      public static final int NO_CONTENT_VALUE = 4;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static StorageType valueOf(int value) {
        return forNumber(value);
      }

      public static StorageType forNumber(int value) {
        switch (value) {
          case 1: return TYPED;
          case 2: return RAW;
          case 3: return EXTERNAL;
          case 4: return NO_CONTENT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<StorageType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          StorageType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<StorageType>() {
              public StorageType findValueByNumber(int number) {
                return StorageType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDescriptor().getEnumTypes().get(1);
      }

      private static final StorageType[] VALUES = values();

      public static StorageType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private StorageType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.StorageType)
    }

    public interface SegmentOrBuilder extends
        // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required int64 begin = 1;</code>
       */
      boolean hasBegin();
      /**
       * <code>required int64 begin = 1;</code>
       */
      long getBegin();

      /**
       * <code>required int64 end = 2;</code>
       */
      boolean hasEnd();
      /**
       * <code>required int64 end = 2;</code>
       */
      long getEnd();
    }
    /**
     * <pre>
     * When loading from chunks this is going to indicate where to put data in the
     * full array. When not used full data have to be present
     * </pre>
     *
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment}
     */
    public  static final class Segment extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment)
        SegmentOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Segment.newBuilder() to construct.
      private Segment(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Segment() {
        begin_ = 0L;
        end_ = 0L;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Segment(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                begin_ = input.readInt64();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                end_ = input.readInt64();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_Segment_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_Segment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.Builder.class);
      }

      private int bitField0_;
      public static final int BEGIN_FIELD_NUMBER = 1;
      private long begin_;
      /**
       * <code>required int64 begin = 1;</code>
       */
      public boolean hasBegin() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 begin = 1;</code>
       */
      public long getBegin() {
        return begin_;
      }

      public static final int END_FIELD_NUMBER = 2;
      private long end_;
      /**
       * <code>required int64 end = 2;</code>
       */
      public boolean hasEnd() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int64 end = 2;</code>
       */
      public long getEnd() {
        return end_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasBegin()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasEnd()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt64(1, begin_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt64(2, end_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(1, begin_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(2, end_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment)) {
          return super.equals(obj);
        }
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment) obj;

        boolean result = true;
        result = result && (hasBegin() == other.hasBegin());
        if (hasBegin()) {
          result = result && (getBegin()
              == other.getBegin());
        }
        result = result && (hasEnd() == other.hasEnd());
        if (hasEnd()) {
          result = result && (getEnd()
              == other.getEnd());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasBegin()) {
          hash = (37 * hash) + BEGIN_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getBegin());
        }
        if (hasEnd()) {
          hash = (37 * hash) + END_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getEnd());
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * When loading from chunks this is going to indicate where to put data in the
       * full array. When not used full data have to be present
       * </pre>
       *
       * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment)
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.SegmentOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_Segment_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_Segment_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.Builder.class);
        }

        // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          begin_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000001);
          end_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_Segment_descriptor;
        }

        public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment getDefaultInstanceForType() {
          return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.getDefaultInstance();
        }

        public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment build() {
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment buildPartial() {
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.begin_ = begin_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.end_ = end_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment) {
            return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment other) {
          if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.getDefaultInstance()) return this;
          if (other.hasBegin()) {
            setBegin(other.getBegin());
          }
          if (other.hasEnd()) {
            setEnd(other.getEnd());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasBegin()) {
            return false;
          }
          if (!hasEnd()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private long begin_ ;
        /**
         * <code>required int64 begin = 1;</code>
         */
        public boolean hasBegin() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required int64 begin = 1;</code>
         */
        public long getBegin() {
          return begin_;
        }
        /**
         * <code>required int64 begin = 1;</code>
         */
        public Builder setBegin(long value) {
          bitField0_ |= 0x00000001;
          begin_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int64 begin = 1;</code>
         */
        public Builder clearBegin() {
          bitField0_ = (bitField0_ & ~0x00000001);
          begin_ = 0L;
          onChanged();
          return this;
        }

        private long end_ ;
        /**
         * <code>required int64 end = 2;</code>
         */
        public boolean hasEnd() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required int64 end = 2;</code>
         */
        public long getEnd() {
          return end_;
        }
        /**
         * <code>required int64 end = 2;</code>
         */
        public Builder setEnd(long value) {
          bitField0_ |= 0x00000002;
          end_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int64 end = 2;</code>
         */
        public Builder clearEnd() {
          bitField0_ = (bitField0_ & ~0x00000002);
          end_ = 0L;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment)
      }

      // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment)
      private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment();
      }

      public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Segment>
          PARSER = new com.google.protobuf.AbstractParser<Segment>() {
        public Segment parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Segment(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Segment> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Segment> getParserForType() {
        return PARSER;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int DIMS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Long> dims_;
    /**
     * <pre>
     * The dimensions in the tensor.
     * </pre>
     *
     * <code>repeated int64 dims = 1;</code>
     */
    public java.util.List<java.lang.Long>
        getDimsList() {
      return dims_;
    }
    /**
     * <pre>
     * The dimensions in the tensor.
     * </pre>
     *
     * <code>repeated int64 dims = 1;</code>
     */
    public int getDimsCount() {
      return dims_.size();
    }
    /**
     * <pre>
     * The dimensions in the tensor.
     * </pre>
     *
     * <code>repeated int64 dims = 1;</code>
     */
    public long getDims(int index) {
      return dims_.get(index);
    }

    public static final int DATA_TYPE_FIELD_NUMBER = 2;
    private int dataType_;
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
     */
    public boolean hasDataType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType getDataType() {
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType result = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.valueOf(dataType_);
      return result == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.FLOAT : result;
    }

    public static final int STORAGE_TYPE_FIELD_NUMBER = 12;
    private int storageType_;
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.StorageType storage_type = 12 [default = TYPED];</code>
     */
    public boolean hasStorageType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.StorageType storage_type = 12 [default = TYPED];</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.StorageType getStorageType() {
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.StorageType result = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.StorageType.valueOf(storageType_);
      return result == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.StorageType.TYPED : result;
    }

    public static final int FLOAT_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Float> floatData_;
    /**
     * <pre>
     * For float
     * </pre>
     *
     * <code>repeated float float_data = 3 [packed = true];</code>
     */
    public java.util.List<java.lang.Float>
        getFloatDataList() {
      return floatData_;
    }
    /**
     * <pre>
     * For float
     * </pre>
     *
     * <code>repeated float float_data = 3 [packed = true];</code>
     */
    public int getFloatDataCount() {
      return floatData_.size();
    }
    /**
     * <pre>
     * For float
     * </pre>
     *
     * <code>repeated float float_data = 3 [packed = true];</code>
     */
    public float getFloatData(int index) {
      return floatData_.get(index);
    }
    private int floatDataMemoizedSerializedSize = -1;

    public static final int INT32_DATA_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> int32Data_;
    /**
     * <pre>
     * For int32, uint8, int8, uint16, int16, bool, and float16
     * Note about float16: in storage we will basically convert float16 byte-wise
     * to unsigned short and then store them in the int32_data field.
     * </pre>
     *
     * <code>repeated int32 int32_data = 4 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getInt32DataList() {
      return int32Data_;
    }
    /**
     * <pre>
     * For int32, uint8, int8, uint16, int16, bool, and float16
     * Note about float16: in storage we will basically convert float16 byte-wise
     * to unsigned short and then store them in the int32_data field.
     * </pre>
     *
     * <code>repeated int32 int32_data = 4 [packed = true];</code>
     */
    public int getInt32DataCount() {
      return int32Data_.size();
    }
    /**
     * <pre>
     * For int32, uint8, int8, uint16, int16, bool, and float16
     * Note about float16: in storage we will basically convert float16 byte-wise
     * to unsigned short and then store them in the int32_data field.
     * </pre>
     *
     * <code>repeated int32 int32_data = 4 [packed = true];</code>
     */
    public int getInt32Data(int index) {
      return int32Data_.get(index);
    }
    private int int32DataMemoizedSerializedSize = -1;

    public static final int BYTE_DATA_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString byteData_;
    /**
     * <pre>
     * For bytes
     * </pre>
     *
     * <code>optional bytes byte_data = 5;</code>
     */
    public boolean hasByteData() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * For bytes
     * </pre>
     *
     * <code>optional bytes byte_data = 5;</code>
     */
    public com.google.protobuf.ByteString getByteData() {
      return byteData_;
    }

    public static final int STRING_DATA_FIELD_NUMBER = 6;
    private java.util.List<com.google.protobuf.ByteString> stringData_;
    /**
     * <pre>
     * For strings
     * </pre>
     *
     * <code>repeated bytes string_data = 6;</code>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getStringDataList() {
      return stringData_;
    }
    /**
     * <pre>
     * For strings
     * </pre>
     *
     * <code>repeated bytes string_data = 6;</code>
     */
    public int getStringDataCount() {
      return stringData_.size();
    }
    /**
     * <pre>
     * For strings
     * </pre>
     *
     * <code>repeated bytes string_data = 6;</code>
     */
    public com.google.protobuf.ByteString getStringData(int index) {
      return stringData_.get(index);
    }

    public static final int DOUBLE_DATA_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Double> doubleData_;
    /**
     * <pre>
     * For double
     * </pre>
     *
     * <code>repeated double double_data = 9 [packed = true];</code>
     */
    public java.util.List<java.lang.Double>
        getDoubleDataList() {
      return doubleData_;
    }
    /**
     * <pre>
     * For double
     * </pre>
     *
     * <code>repeated double double_data = 9 [packed = true];</code>
     */
    public int getDoubleDataCount() {
      return doubleData_.size();
    }
    /**
     * <pre>
     * For double
     * </pre>
     *
     * <code>repeated double double_data = 9 [packed = true];</code>
     */
    public double getDoubleData(int index) {
      return doubleData_.get(index);
    }
    private int doubleDataMemoizedSerializedSize = -1;

    public static final int INT64_DATA_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Long> int64Data_;
    /**
     * <pre>
     * For int64
     * </pre>
     *
     * <code>repeated int64 int64_data = 10 [packed = true];</code>
     */
    public java.util.List<java.lang.Long>
        getInt64DataList() {
      return int64Data_;
    }
    /**
     * <pre>
     * For int64
     * </pre>
     *
     * <code>repeated int64 int64_data = 10 [packed = true];</code>
     */
    public int getInt64DataCount() {
      return int64Data_.size();
    }
    /**
     * <pre>
     * For int64
     * </pre>
     *
     * <code>repeated int64 int64_data = 10 [packed = true];</code>
     */
    public long getInt64Data(int index) {
      return int64Data_.get(index);
    }
    private int int64DataMemoizedSerializedSize = -1;

    public static final int RAW_DATA_FIELD_NUMBER = 13;
    private com.google.protobuf.ByteString rawData_;
    /**
     * <pre>
     * store the raw data, contents are serialized as little-endian
     * </pre>
     *
     * <code>optional bytes raw_data = 13;</code>
     */
    public boolean hasRawData() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * store the raw data, contents are serialized as little-endian
     * </pre>
     *
     * <code>optional bytes raw_data = 13;</code>
     */
    public com.google.protobuf.ByteString getRawData() {
      return rawData_;
    }

    public static final int EXTERNAL_DATA_FIELD_NUMBER = 14;
    private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto externalData_;
    /**
     * <pre>
     * store the pointer to the data
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
     */
    public boolean hasExternalData() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * store the pointer to the data
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto getExternalData() {
      return externalData_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.getDefaultInstance() : externalData_;
    }
    /**
     * <pre>
     * store the pointer to the data
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProtoOrBuilder getExternalDataOrBuilder() {
      return externalData_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.getDefaultInstance() : externalData_;
    }

    public static final int NAME_FIELD_NUMBER = 7;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Optionally, a name for the tensor.
     * </pre>
     *
     * <code>optional string name = 7;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * Optionally, a name for the tensor.
     * </pre>
     *
     * <code>optional string name = 7;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Optionally, a name for the tensor.
     * </pre>
     *
     * <code>optional string name = 7;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEVICE_DETAIL_FIELD_NUMBER = 8;
    private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption deviceDetail_;
    /**
     * <pre>
     * Optionally, a TensorProto can contain the details about the device that
     * it was serialized from. This is useful in cases like snapshotting a whole
     * workspace in a multi-GPU environment.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
     */
    public boolean hasDeviceDetail() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * Optionally, a TensorProto can contain the details about the device that
     * it was serialized from. This is useful in cases like snapshotting a whole
     * workspace in a multi-GPU environment.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption getDeviceDetail() {
      return deviceDetail_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance() : deviceDetail_;
    }
    /**
     * <pre>
     * Optionally, a TensorProto can contain the details about the device that
     * it was serialized from. This is useful in cases like snapshotting a whole
     * workspace in a multi-GPU environment.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder getDeviceDetailOrBuilder() {
      return deviceDetail_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance() : deviceDetail_;
    }

    public static final int SEGMENT_FIELD_NUMBER = 11;
    private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment segment_;
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
     */
    public boolean hasSegment() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment getSegment() {
      return segment_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.getDefaultInstance() : segment_;
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.SegmentOrBuilder getSegmentOrBuilder() {
      return segment_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.getDefaultInstance() : segment_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasSegment()) {
        if (!getSegment().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < dims_.size(); i++) {
        output.writeInt64(1, dims_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(2, dataType_);
      }
      if (getFloatDataList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(floatDataMemoizedSerializedSize);
      }
      for (int i = 0; i < floatData_.size(); i++) {
        output.writeFloatNoTag(floatData_.get(i));
      }
      if (getInt32DataList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(int32DataMemoizedSerializedSize);
      }
      for (int i = 0; i < int32Data_.size(); i++) {
        output.writeInt32NoTag(int32Data_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(5, byteData_);
      }
      for (int i = 0; i < stringData_.size(); i++) {
        output.writeBytes(6, stringData_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, name_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(8, getDeviceDetail());
      }
      if (getDoubleDataList().size() > 0) {
        output.writeUInt32NoTag(74);
        output.writeUInt32NoTag(doubleDataMemoizedSerializedSize);
      }
      for (int i = 0; i < doubleData_.size(); i++) {
        output.writeDoubleNoTag(doubleData_.get(i));
      }
      if (getInt64DataList().size() > 0) {
        output.writeUInt32NoTag(82);
        output.writeUInt32NoTag(int64DataMemoizedSerializedSize);
      }
      for (int i = 0; i < int64Data_.size(); i++) {
        output.writeInt64NoTag(int64Data_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(11, getSegment());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(12, storageType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(13, rawData_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(14, getExternalData());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < dims_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(dims_.get(i));
        }
        size += dataSize;
        size += 1 * getDimsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, dataType_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFloatDataList().size();
        size += dataSize;
        if (!getFloatDataList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        floatDataMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < int32Data_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(int32Data_.get(i));
        }
        size += dataSize;
        if (!getInt32DataList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        int32DataMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, byteData_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stringData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(stringData_.get(i));
        }
        size += dataSize;
        size += 1 * getStringDataList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, name_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getDeviceDetail());
      }
      {
        int dataSize = 0;
        dataSize = 8 * getDoubleDataList().size();
        size += dataSize;
        if (!getDoubleDataList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        doubleDataMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < int64Data_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(int64Data_.get(i));
        }
        size += dataSize;
        if (!getInt64DataList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        int64DataMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getSegment());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, storageType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, rawData_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getExternalData());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto) obj;

      boolean result = true;
      result = result && getDimsList()
          .equals(other.getDimsList());
      result = result && (hasDataType() == other.hasDataType());
      if (hasDataType()) {
        result = result && dataType_ == other.dataType_;
      }
      result = result && (hasStorageType() == other.hasStorageType());
      if (hasStorageType()) {
        result = result && storageType_ == other.storageType_;
      }
      result = result && getFloatDataList()
          .equals(other.getFloatDataList());
      result = result && getInt32DataList()
          .equals(other.getInt32DataList());
      result = result && (hasByteData() == other.hasByteData());
      if (hasByteData()) {
        result = result && getByteData()
            .equals(other.getByteData());
      }
      result = result && getStringDataList()
          .equals(other.getStringDataList());
      result = result && getDoubleDataList()
          .equals(other.getDoubleDataList());
      result = result && getInt64DataList()
          .equals(other.getInt64DataList());
      result = result && (hasRawData() == other.hasRawData());
      if (hasRawData()) {
        result = result && getRawData()
            .equals(other.getRawData());
      }
      result = result && (hasExternalData() == other.hasExternalData());
      if (hasExternalData()) {
        result = result && getExternalData()
            .equals(other.getExternalData());
      }
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasDeviceDetail() == other.hasDeviceDetail());
      if (hasDeviceDetail()) {
        result = result && getDeviceDetail()
            .equals(other.getDeviceDetail());
      }
      result = result && (hasSegment() == other.hasSegment());
      if (hasSegment()) {
        result = result && getSegment()
            .equals(other.getSegment());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDimsCount() > 0) {
        hash = (37 * hash) + DIMS_FIELD_NUMBER;
        hash = (53 * hash) + getDimsList().hashCode();
      }
      if (hasDataType()) {
        hash = (37 * hash) + DATA_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + dataType_;
      }
      if (hasStorageType()) {
        hash = (37 * hash) + STORAGE_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + storageType_;
      }
      if (getFloatDataCount() > 0) {
        hash = (37 * hash) + FLOAT_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getFloatDataList().hashCode();
      }
      if (getInt32DataCount() > 0) {
        hash = (37 * hash) + INT32_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getInt32DataList().hashCode();
      }
      if (hasByteData()) {
        hash = (37 * hash) + BYTE_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getByteData().hashCode();
      }
      if (getStringDataCount() > 0) {
        hash = (37 * hash) + STRING_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getStringDataList().hashCode();
      }
      if (getDoubleDataCount() > 0) {
        hash = (37 * hash) + DOUBLE_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getDoubleDataList().hashCode();
      }
      if (getInt64DataCount() > 0) {
        hash = (37 * hash) + INT64_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getInt64DataList().hashCode();
      }
      if (hasRawData()) {
        hash = (37 * hash) + RAW_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getRawData().hashCode();
      }
      if (hasExternalData()) {
        hash = (37 * hash) + EXTERNAL_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getExternalData().hashCode();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasDeviceDetail()) {
        hash = (37 * hash) + DEVICE_DETAIL_FIELD_NUMBER;
        hash = (53 * hash) + getDeviceDetail().hashCode();
      }
      if (hasSegment()) {
        hash = (37 * hash) + SEGMENT_FIELD_NUMBER;
        hash = (53 * hash) + getSegment().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * TensorProto stores serialized Tensor objects.
     * </pre>
     *
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getExternalDataFieldBuilder();
          getDeviceDetailFieldBuilder();
          getSegmentFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        dims_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        dataType_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        storageType_ = 1;
        bitField0_ = (bitField0_ & ~0x00000004);
        floatData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        int32Data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        byteData_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        stringData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        doubleData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        int64Data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        rawData_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        if (externalDataBuilder_ == null) {
          externalData_ = null;
        } else {
          externalDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        if (deviceDetailBuilder_ == null) {
          deviceDetail_ = null;
        } else {
          deviceDetailBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (segmentBuilder_ == null) {
          segment_ = null;
        } else {
          segmentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          dims_ = java.util.Collections.unmodifiableList(dims_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.dims_ = dims_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.dataType_ = dataType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.storageType_ = storageType_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          floatData_ = java.util.Collections.unmodifiableList(floatData_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.floatData_ = floatData_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          int32Data_ = java.util.Collections.unmodifiableList(int32Data_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.int32Data_ = int32Data_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.byteData_ = byteData_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          stringData_ = java.util.Collections.unmodifiableList(stringData_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.stringData_ = stringData_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          doubleData_ = java.util.Collections.unmodifiableList(doubleData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.doubleData_ = doubleData_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          int64Data_ = java.util.Collections.unmodifiableList(int64Data_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.int64Data_ = int64Data_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000008;
        }
        result.rawData_ = rawData_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000010;
        }
        if (externalDataBuilder_ == null) {
          result.externalData_ = externalData_;
        } else {
          result.externalData_ = externalDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000020;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000040;
        }
        if (deviceDetailBuilder_ == null) {
          result.deviceDetail_ = deviceDetail_;
        } else {
          result.deviceDetail_ = deviceDetailBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000080;
        }
        if (segmentBuilder_ == null) {
          result.segment_ = segment_;
        } else {
          result.segment_ = segmentBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance()) return this;
        if (!other.dims_.isEmpty()) {
          if (dims_.isEmpty()) {
            dims_ = other.dims_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDimsIsMutable();
            dims_.addAll(other.dims_);
          }
          onChanged();
        }
        if (other.hasDataType()) {
          setDataType(other.getDataType());
        }
        if (other.hasStorageType()) {
          setStorageType(other.getStorageType());
        }
        if (!other.floatData_.isEmpty()) {
          if (floatData_.isEmpty()) {
            floatData_ = other.floatData_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureFloatDataIsMutable();
            floatData_.addAll(other.floatData_);
          }
          onChanged();
        }
        if (!other.int32Data_.isEmpty()) {
          if (int32Data_.isEmpty()) {
            int32Data_ = other.int32Data_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureInt32DataIsMutable();
            int32Data_.addAll(other.int32Data_);
          }
          onChanged();
        }
        if (other.hasByteData()) {
          setByteData(other.getByteData());
        }
        if (!other.stringData_.isEmpty()) {
          if (stringData_.isEmpty()) {
            stringData_ = other.stringData_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureStringDataIsMutable();
            stringData_.addAll(other.stringData_);
          }
          onChanged();
        }
        if (!other.doubleData_.isEmpty()) {
          if (doubleData_.isEmpty()) {
            doubleData_ = other.doubleData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureDoubleDataIsMutable();
            doubleData_.addAll(other.doubleData_);
          }
          onChanged();
        }
        if (!other.int64Data_.isEmpty()) {
          if (int64Data_.isEmpty()) {
            int64Data_ = other.int64Data_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureInt64DataIsMutable();
            int64Data_.addAll(other.int64Data_);
          }
          onChanged();
        }
        if (other.hasRawData()) {
          setRawData(other.getRawData());
        }
        if (other.hasExternalData()) {
          mergeExternalData(other.getExternalData());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000800;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasDeviceDetail()) {
          mergeDeviceDetail(other.getDeviceDetail());
        }
        if (other.hasSegment()) {
          mergeSegment(other.getSegment());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (hasSegment()) {
          if (!getSegment().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Long> dims_ = java.util.Collections.emptyList();
      private void ensureDimsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          dims_ = new java.util.ArrayList<java.lang.Long>(dims_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * The dimensions in the tensor.
       * </pre>
       *
       * <code>repeated int64 dims = 1;</code>
       */
      public java.util.List<java.lang.Long>
          getDimsList() {
        return java.util.Collections.unmodifiableList(dims_);
      }
      /**
       * <pre>
       * The dimensions in the tensor.
       * </pre>
       *
       * <code>repeated int64 dims = 1;</code>
       */
      public int getDimsCount() {
        return dims_.size();
      }
      /**
       * <pre>
       * The dimensions in the tensor.
       * </pre>
       *
       * <code>repeated int64 dims = 1;</code>
       */
      public long getDims(int index) {
        return dims_.get(index);
      }
      /**
       * <pre>
       * The dimensions in the tensor.
       * </pre>
       *
       * <code>repeated int64 dims = 1;</code>
       */
      public Builder setDims(
          int index, long value) {
        ensureDimsIsMutable();
        dims_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The dimensions in the tensor.
       * </pre>
       *
       * <code>repeated int64 dims = 1;</code>
       */
      public Builder addDims(long value) {
        ensureDimsIsMutable();
        dims_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The dimensions in the tensor.
       * </pre>
       *
       * <code>repeated int64 dims = 1;</code>
       */
      public Builder addAllDims(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureDimsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dims_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The dimensions in the tensor.
       * </pre>
       *
       * <code>repeated int64 dims = 1;</code>
       */
      public Builder clearDims() {
        dims_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private int dataType_ = 1;
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
       */
      public boolean hasDataType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType getDataType() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType result = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.valueOf(dataType_);
        return result == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.FLOAT : result;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
       */
      public Builder setDataType(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        dataType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
       */
      public Builder clearDataType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        dataType_ = 1;
        onChanged();
        return this;
      }

      private int storageType_ = 1;
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.StorageType storage_type = 12 [default = TYPED];</code>
       */
      public boolean hasStorageType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.StorageType storage_type = 12 [default = TYPED];</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.StorageType getStorageType() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.StorageType result = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.StorageType.valueOf(storageType_);
        return result == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.StorageType.TYPED : result;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.StorageType storage_type = 12 [default = TYPED];</code>
       */
      public Builder setStorageType(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.StorageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        storageType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.StorageType storage_type = 12 [default = TYPED];</code>
       */
      public Builder clearStorageType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        storageType_ = 1;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> floatData_ = java.util.Collections.emptyList();
      private void ensureFloatDataIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          floatData_ = new java.util.ArrayList<java.lang.Float>(floatData_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       * For float
       * </pre>
       *
       * <code>repeated float float_data = 3 [packed = true];</code>
       */
      public java.util.List<java.lang.Float>
          getFloatDataList() {
        return java.util.Collections.unmodifiableList(floatData_);
      }
      /**
       * <pre>
       * For float
       * </pre>
       *
       * <code>repeated float float_data = 3 [packed = true];</code>
       */
      public int getFloatDataCount() {
        return floatData_.size();
      }
      /**
       * <pre>
       * For float
       * </pre>
       *
       * <code>repeated float float_data = 3 [packed = true];</code>
       */
      public float getFloatData(int index) {
        return floatData_.get(index);
      }
      /**
       * <pre>
       * For float
       * </pre>
       *
       * <code>repeated float float_data = 3 [packed = true];</code>
       */
      public Builder setFloatData(
          int index, float value) {
        ensureFloatDataIsMutable();
        floatData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For float
       * </pre>
       *
       * <code>repeated float float_data = 3 [packed = true];</code>
       */
      public Builder addFloatData(float value) {
        ensureFloatDataIsMutable();
        floatData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For float
       * </pre>
       *
       * <code>repeated float float_data = 3 [packed = true];</code>
       */
      public Builder addAllFloatData(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFloatDataIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, floatData_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For float
       * </pre>
       *
       * <code>repeated float float_data = 3 [packed = true];</code>
       */
      public Builder clearFloatData() {
        floatData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> int32Data_ = java.util.Collections.emptyList();
      private void ensureInt32DataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          int32Data_ = new java.util.ArrayList<java.lang.Integer>(int32Data_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <pre>
       * For int32, uint8, int8, uint16, int16, bool, and float16
       * Note about float16: in storage we will basically convert float16 byte-wise
       * to unsigned short and then store them in the int32_data field.
       * </pre>
       *
       * <code>repeated int32 int32_data = 4 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getInt32DataList() {
        return java.util.Collections.unmodifiableList(int32Data_);
      }
      /**
       * <pre>
       * For int32, uint8, int8, uint16, int16, bool, and float16
       * Note about float16: in storage we will basically convert float16 byte-wise
       * to unsigned short and then store them in the int32_data field.
       * </pre>
       *
       * <code>repeated int32 int32_data = 4 [packed = true];</code>
       */
      public int getInt32DataCount() {
        return int32Data_.size();
      }
      /**
       * <pre>
       * For int32, uint8, int8, uint16, int16, bool, and float16
       * Note about float16: in storage we will basically convert float16 byte-wise
       * to unsigned short and then store them in the int32_data field.
       * </pre>
       *
       * <code>repeated int32 int32_data = 4 [packed = true];</code>
       */
      public int getInt32Data(int index) {
        return int32Data_.get(index);
      }
      /**
       * <pre>
       * For int32, uint8, int8, uint16, int16, bool, and float16
       * Note about float16: in storage we will basically convert float16 byte-wise
       * to unsigned short and then store them in the int32_data field.
       * </pre>
       *
       * <code>repeated int32 int32_data = 4 [packed = true];</code>
       */
      public Builder setInt32Data(
          int index, int value) {
        ensureInt32DataIsMutable();
        int32Data_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For int32, uint8, int8, uint16, int16, bool, and float16
       * Note about float16: in storage we will basically convert float16 byte-wise
       * to unsigned short and then store them in the int32_data field.
       * </pre>
       *
       * <code>repeated int32 int32_data = 4 [packed = true];</code>
       */
      public Builder addInt32Data(int value) {
        ensureInt32DataIsMutable();
        int32Data_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For int32, uint8, int8, uint16, int16, bool, and float16
       * Note about float16: in storage we will basically convert float16 byte-wise
       * to unsigned short and then store them in the int32_data field.
       * </pre>
       *
       * <code>repeated int32 int32_data = 4 [packed = true];</code>
       */
      public Builder addAllInt32Data(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInt32DataIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, int32Data_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For int32, uint8, int8, uint16, int16, bool, and float16
       * Note about float16: in storage we will basically convert float16 byte-wise
       * to unsigned short and then store them in the int32_data field.
       * </pre>
       *
       * <code>repeated int32 int32_data = 4 [packed = true];</code>
       */
      public Builder clearInt32Data() {
        int32Data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString byteData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * For bytes
       * </pre>
       *
       * <code>optional bytes byte_data = 5;</code>
       */
      public boolean hasByteData() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * For bytes
       * </pre>
       *
       * <code>optional bytes byte_data = 5;</code>
       */
      public com.google.protobuf.ByteString getByteData() {
        return byteData_;
      }
      /**
       * <pre>
       * For bytes
       * </pre>
       *
       * <code>optional bytes byte_data = 5;</code>
       */
      public Builder setByteData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        byteData_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For bytes
       * </pre>
       *
       * <code>optional bytes byte_data = 5;</code>
       */
      public Builder clearByteData() {
        bitField0_ = (bitField0_ & ~0x00000020);
        byteData_ = getDefaultInstance().getByteData();
        onChanged();
        return this;
      }

      private java.util.List<com.google.protobuf.ByteString> stringData_ = java.util.Collections.emptyList();
      private void ensureStringDataIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          stringData_ = new java.util.ArrayList<com.google.protobuf.ByteString>(stringData_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <pre>
       * For strings
       * </pre>
       *
       * <code>repeated bytes string_data = 6;</code>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getStringDataList() {
        return java.util.Collections.unmodifiableList(stringData_);
      }
      /**
       * <pre>
       * For strings
       * </pre>
       *
       * <code>repeated bytes string_data = 6;</code>
       */
      public int getStringDataCount() {
        return stringData_.size();
      }
      /**
       * <pre>
       * For strings
       * </pre>
       *
       * <code>repeated bytes string_data = 6;</code>
       */
      public com.google.protobuf.ByteString getStringData(int index) {
        return stringData_.get(index);
      }
      /**
       * <pre>
       * For strings
       * </pre>
       *
       * <code>repeated bytes string_data = 6;</code>
       */
      public Builder setStringData(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringDataIsMutable();
        stringData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For strings
       * </pre>
       *
       * <code>repeated bytes string_data = 6;</code>
       */
      public Builder addStringData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringDataIsMutable();
        stringData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For strings
       * </pre>
       *
       * <code>repeated bytes string_data = 6;</code>
       */
      public Builder addAllStringData(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureStringDataIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, stringData_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For strings
       * </pre>
       *
       * <code>repeated bytes string_data = 6;</code>
       */
      public Builder clearStringData() {
        stringData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Double> doubleData_ = java.util.Collections.emptyList();
      private void ensureDoubleDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          doubleData_ = new java.util.ArrayList<java.lang.Double>(doubleData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <pre>
       * For double
       * </pre>
       *
       * <code>repeated double double_data = 9 [packed = true];</code>
       */
      public java.util.List<java.lang.Double>
          getDoubleDataList() {
        return java.util.Collections.unmodifiableList(doubleData_);
      }
      /**
       * <pre>
       * For double
       * </pre>
       *
       * <code>repeated double double_data = 9 [packed = true];</code>
       */
      public int getDoubleDataCount() {
        return doubleData_.size();
      }
      /**
       * <pre>
       * For double
       * </pre>
       *
       * <code>repeated double double_data = 9 [packed = true];</code>
       */
      public double getDoubleData(int index) {
        return doubleData_.get(index);
      }
      /**
       * <pre>
       * For double
       * </pre>
       *
       * <code>repeated double double_data = 9 [packed = true];</code>
       */
      public Builder setDoubleData(
          int index, double value) {
        ensureDoubleDataIsMutable();
        doubleData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For double
       * </pre>
       *
       * <code>repeated double double_data = 9 [packed = true];</code>
       */
      public Builder addDoubleData(double value) {
        ensureDoubleDataIsMutable();
        doubleData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For double
       * </pre>
       *
       * <code>repeated double double_data = 9 [packed = true];</code>
       */
      public Builder addAllDoubleData(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureDoubleDataIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, doubleData_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For double
       * </pre>
       *
       * <code>repeated double double_data = 9 [packed = true];</code>
       */
      public Builder clearDoubleData() {
        doubleData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> int64Data_ = java.util.Collections.emptyList();
      private void ensureInt64DataIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          int64Data_ = new java.util.ArrayList<java.lang.Long>(int64Data_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <pre>
       * For int64
       * </pre>
       *
       * <code>repeated int64 int64_data = 10 [packed = true];</code>
       */
      public java.util.List<java.lang.Long>
          getInt64DataList() {
        return java.util.Collections.unmodifiableList(int64Data_);
      }
      /**
       * <pre>
       * For int64
       * </pre>
       *
       * <code>repeated int64 int64_data = 10 [packed = true];</code>
       */
      public int getInt64DataCount() {
        return int64Data_.size();
      }
      /**
       * <pre>
       * For int64
       * </pre>
       *
       * <code>repeated int64 int64_data = 10 [packed = true];</code>
       */
      public long getInt64Data(int index) {
        return int64Data_.get(index);
      }
      /**
       * <pre>
       * For int64
       * </pre>
       *
       * <code>repeated int64 int64_data = 10 [packed = true];</code>
       */
      public Builder setInt64Data(
          int index, long value) {
        ensureInt64DataIsMutable();
        int64Data_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For int64
       * </pre>
       *
       * <code>repeated int64 int64_data = 10 [packed = true];</code>
       */
      public Builder addInt64Data(long value) {
        ensureInt64DataIsMutable();
        int64Data_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For int64
       * </pre>
       *
       * <code>repeated int64 int64_data = 10 [packed = true];</code>
       */
      public Builder addAllInt64Data(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureInt64DataIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, int64Data_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For int64
       * </pre>
       *
       * <code>repeated int64 int64_data = 10 [packed = true];</code>
       */
      public Builder clearInt64Data() {
        int64Data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString rawData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * store the raw data, contents are serialized as little-endian
       * </pre>
       *
       * <code>optional bytes raw_data = 13;</code>
       */
      public boolean hasRawData() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * store the raw data, contents are serialized as little-endian
       * </pre>
       *
       * <code>optional bytes raw_data = 13;</code>
       */
      public com.google.protobuf.ByteString getRawData() {
        return rawData_;
      }
      /**
       * <pre>
       * store the raw data, contents are serialized as little-endian
       * </pre>
       *
       * <code>optional bytes raw_data = 13;</code>
       */
      public Builder setRawData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        rawData_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * store the raw data, contents are serialized as little-endian
       * </pre>
       *
       * <code>optional bytes raw_data = 13;</code>
       */
      public Builder clearRawData() {
        bitField0_ = (bitField0_ & ~0x00000200);
        rawData_ = getDefaultInstance().getRawData();
        onChanged();
        return this;
      }

      private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto externalData_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProtoOrBuilder> externalDataBuilder_;
      /**
       * <pre>
       * store the pointer to the data
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
       */
      public boolean hasExternalData() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * store the pointer to the data
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto getExternalData() {
        if (externalDataBuilder_ == null) {
          return externalData_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.getDefaultInstance() : externalData_;
        } else {
          return externalDataBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * store the pointer to the data
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
       */
      public Builder setExternalData(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto value) {
        if (externalDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          externalData_ = value;
          onChanged();
        } else {
          externalDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       * store the pointer to the data
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
       */
      public Builder setExternalData(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.Builder builderForValue) {
        if (externalDataBuilder_ == null) {
          externalData_ = builderForValue.build();
          onChanged();
        } else {
          externalDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       * store the pointer to the data
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
       */
      public Builder mergeExternalData(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto value) {
        if (externalDataBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              externalData_ != null &&
              externalData_ != dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.getDefaultInstance()) {
            externalData_ =
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.newBuilder(externalData_).mergeFrom(value).buildPartial();
          } else {
            externalData_ = value;
          }
          onChanged();
        } else {
          externalDataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       * store the pointer to the data
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
       */
      public Builder clearExternalData() {
        if (externalDataBuilder_ == null) {
          externalData_ = null;
          onChanged();
        } else {
          externalDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <pre>
       * store the pointer to the data
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.Builder getExternalDataBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getExternalDataFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * store the pointer to the data
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProtoOrBuilder getExternalDataOrBuilder() {
        if (externalDataBuilder_ != null) {
          return externalDataBuilder_.getMessageOrBuilder();
        } else {
          return externalData_ == null ?
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.getDefaultInstance() : externalData_;
        }
      }
      /**
       * <pre>
       * store the pointer to the data
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExternalDataProto external_data = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProtoOrBuilder> 
          getExternalDataFieldBuilder() {
        if (externalDataBuilder_ == null) {
          externalDataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExternalDataProtoOrBuilder>(
                  getExternalData(),
                  getParentForChildren(),
                  isClean());
          externalData_ = null;
        }
        return externalDataBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Optionally, a name for the tensor.
       * </pre>
       *
       * <code>optional string name = 7;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * Optionally, a name for the tensor.
       * </pre>
       *
       * <code>optional string name = 7;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Optionally, a name for the tensor.
       * </pre>
       *
       * <code>optional string name = 7;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Optionally, a name for the tensor.
       * </pre>
       *
       * <code>optional string name = 7;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optionally, a name for the tensor.
       * </pre>
       *
       * <code>optional string name = 7;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000800);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optionally, a name for the tensor.
       * </pre>
       *
       * <code>optional string name = 7;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        name_ = value;
        onChanged();
        return this;
      }

      private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption deviceDetail_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder> deviceDetailBuilder_;
      /**
       * <pre>
       * Optionally, a TensorProto can contain the details about the device that
       * it was serialized from. This is useful in cases like snapshotting a whole
       * workspace in a multi-GPU environment.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
       */
      public boolean hasDeviceDetail() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       * Optionally, a TensorProto can contain the details about the device that
       * it was serialized from. This is useful in cases like snapshotting a whole
       * workspace in a multi-GPU environment.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption getDeviceDetail() {
        if (deviceDetailBuilder_ == null) {
          return deviceDetail_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance() : deviceDetail_;
        } else {
          return deviceDetailBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Optionally, a TensorProto can contain the details about the device that
       * it was serialized from. This is useful in cases like snapshotting a whole
       * workspace in a multi-GPU environment.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
       */
      public Builder setDeviceDetail(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption value) {
        if (deviceDetailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deviceDetail_ = value;
          onChanged();
        } else {
          deviceDetailBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       * Optionally, a TensorProto can contain the details about the device that
       * it was serialized from. This is useful in cases like snapshotting a whole
       * workspace in a multi-GPU environment.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
       */
      public Builder setDeviceDetail(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder builderForValue) {
        if (deviceDetailBuilder_ == null) {
          deviceDetail_ = builderForValue.build();
          onChanged();
        } else {
          deviceDetailBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       * Optionally, a TensorProto can contain the details about the device that
       * it was serialized from. This is useful in cases like snapshotting a whole
       * workspace in a multi-GPU environment.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
       */
      public Builder mergeDeviceDetail(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption value) {
        if (deviceDetailBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              deviceDetail_ != null &&
              deviceDetail_ != dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance()) {
            deviceDetail_ =
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.newBuilder(deviceDetail_).mergeFrom(value).buildPartial();
          } else {
            deviceDetail_ = value;
          }
          onChanged();
        } else {
          deviceDetailBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       * Optionally, a TensorProto can contain the details about the device that
       * it was serialized from. This is useful in cases like snapshotting a whole
       * workspace in a multi-GPU environment.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
       */
      public Builder clearDeviceDetail() {
        if (deviceDetailBuilder_ == null) {
          deviceDetail_ = null;
          onChanged();
        } else {
          deviceDetailBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <pre>
       * Optionally, a TensorProto can contain the details about the device that
       * it was serialized from. This is useful in cases like snapshotting a whole
       * workspace in a multi-GPU environment.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder getDeviceDetailBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getDeviceDetailFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Optionally, a TensorProto can contain the details about the device that
       * it was serialized from. This is useful in cases like snapshotting a whole
       * workspace in a multi-GPU environment.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder getDeviceDetailOrBuilder() {
        if (deviceDetailBuilder_ != null) {
          return deviceDetailBuilder_.getMessageOrBuilder();
        } else {
          return deviceDetail_ == null ?
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance() : deviceDetail_;
        }
      }
      /**
       * <pre>
       * Optionally, a TensorProto can contain the details about the device that
       * it was serialized from. This is useful in cases like snapshotting a whole
       * workspace in a multi-GPU environment.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_detail = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder> 
          getDeviceDetailFieldBuilder() {
        if (deviceDetailBuilder_ == null) {
          deviceDetailBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder>(
                  getDeviceDetail(),
                  getParentForChildren(),
                  isClean());
          deviceDetail_ = null;
        }
        return deviceDetailBuilder_;
      }

      private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment segment_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.SegmentOrBuilder> segmentBuilder_;
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
       */
      public boolean hasSegment() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment getSegment() {
        if (segmentBuilder_ == null) {
          return segment_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.getDefaultInstance() : segment_;
        } else {
          return segmentBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
       */
      public Builder setSegment(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment value) {
        if (segmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          segment_ = value;
          onChanged();
        } else {
          segmentBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
       */
      public Builder setSegment(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.Builder builderForValue) {
        if (segmentBuilder_ == null) {
          segment_ = builderForValue.build();
          onChanged();
        } else {
          segmentBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
       */
      public Builder mergeSegment(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment value) {
        if (segmentBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              segment_ != null &&
              segment_ != dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.getDefaultInstance()) {
            segment_ =
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.newBuilder(segment_).mergeFrom(value).buildPartial();
          } else {
            segment_ = value;
          }
          onChanged();
        } else {
          segmentBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
       */
      public Builder clearSegment() {
        if (segmentBuilder_ == null) {
          segment_ = null;
          onChanged();
        } else {
          segmentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.Builder getSegmentBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getSegmentFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.SegmentOrBuilder getSegmentOrBuilder() {
        if (segmentBuilder_ != null) {
          return segmentBuilder_.getMessageOrBuilder();
        } else {
          return segment_ == null ?
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.getDefaultInstance() : segment_;
        }
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.Segment segment = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.SegmentOrBuilder> 
          getSegmentFieldBuilder() {
        if (segmentBuilder_ == null) {
          segmentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Segment.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.SegmentOrBuilder>(
                  getSegment(),
                  getParentForChildren(),
                  isClean());
          segment_ = null;
        }
        return segmentBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TensorProto>
        PARSER = new com.google.protobuf.AbstractParser<TensorProto>() {
      public TensorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TensorProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TensorProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TensorProto> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface QTensorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated int64 dims = 1;</code>
     */
    java.util.List<java.lang.Long> getDimsList();
    /**
     * <code>repeated int64 dims = 1;</code>
     */
    int getDimsCount();
    /**
     * <code>repeated int64 dims = 1;</code>
     */
    long getDims(int index);

    /**
     * <code>required int32 precision = 2;</code>
     */
    boolean hasPrecision();
    /**
     * <code>required int32 precision = 2;</code>
     */
    int getPrecision();

    /**
     * <code>required double scale = 3;</code>
     */
    boolean hasScale();
    /**
     * <code>required double scale = 3;</code>
     */
    double getScale();

    /**
     * <code>required double bias = 4;</code>
     */
    boolean hasBias();
    /**
     * <code>required double bias = 4;</code>
     */
    double getBias();

    /**
     * <code>required bool is_signed = 5;</code>
     */
    boolean hasIsSigned();
    /**
     * <code>required bool is_signed = 5;</code>
     */
    boolean getIsSigned();

    /**
     * <code>repeated int32 data = 6 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getDataList();
    /**
     * <code>repeated int32 data = 6 [packed = true];</code>
     */
    int getDataCount();
    /**
     * <code>repeated int32 data = 6 [packed = true];</code>
     */
    int getData(int index);

    /**
     * <code>optional string name = 7;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 7;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 7;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 8 [default = INT32];</code>
     */
    boolean hasDataType();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 8 [default = INT32];</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType getDataType();
  }
  /**
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto}
   */
  public  static final class QTensorProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto)
      QTensorProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use QTensorProto.newBuilder() to construct.
    private QTensorProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private QTensorProto() {
      dims_ = java.util.Collections.emptyList();
      precision_ = 0;
      scale_ = 0D;
      bias_ = 0D;
      isSigned_ = false;
      data_ = java.util.Collections.emptyList();
      name_ = "";
      dataType_ = 2;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private QTensorProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                dims_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              dims_.add(input.readInt64());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                dims_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                dims_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              precision_ = input.readInt32();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000002;
              scale_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000004;
              bias_ = input.readDouble();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              isSigned_ = input.readBool();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                data_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              data_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                data_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                data_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              name_ = bs;
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType value = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                dataType_ = rawValue;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          dims_ = java.util.Collections.unmodifiableList(dims_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_QTensorProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_QTensorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.Builder.class);
    }

    private int bitField0_;
    public static final int DIMS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Long> dims_;
    /**
     * <code>repeated int64 dims = 1;</code>
     */
    public java.util.List<java.lang.Long>
        getDimsList() {
      return dims_;
    }
    /**
     * <code>repeated int64 dims = 1;</code>
     */
    public int getDimsCount() {
      return dims_.size();
    }
    /**
     * <code>repeated int64 dims = 1;</code>
     */
    public long getDims(int index) {
      return dims_.get(index);
    }

    public static final int PRECISION_FIELD_NUMBER = 2;
    private int precision_;
    /**
     * <code>required int32 precision = 2;</code>
     */
    public boolean hasPrecision() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 precision = 2;</code>
     */
    public int getPrecision() {
      return precision_;
    }

    public static final int SCALE_FIELD_NUMBER = 3;
    private double scale_;
    /**
     * <code>required double scale = 3;</code>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required double scale = 3;</code>
     */
    public double getScale() {
      return scale_;
    }

    public static final int BIAS_FIELD_NUMBER = 4;
    private double bias_;
    /**
     * <code>required double bias = 4;</code>
     */
    public boolean hasBias() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required double bias = 4;</code>
     */
    public double getBias() {
      return bias_;
    }

    public static final int IS_SIGNED_FIELD_NUMBER = 5;
    private boolean isSigned_;
    /**
     * <code>required bool is_signed = 5;</code>
     */
    public boolean hasIsSigned() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bool is_signed = 5;</code>
     */
    public boolean getIsSigned() {
      return isSigned_;
    }

    public static final int DATA_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> data_;
    /**
     * <code>repeated int32 data = 6 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getDataList() {
      return data_;
    }
    /**
     * <code>repeated int32 data = 6 [packed = true];</code>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated int32 data = 6 [packed = true];</code>
     */
    public int getData(int index) {
      return data_.get(index);
    }
    private int dataMemoizedSerializedSize = -1;

    public static final int NAME_FIELD_NUMBER = 7;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string name = 7;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string name = 7;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 7;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DATA_TYPE_FIELD_NUMBER = 8;
    private int dataType_;
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 8 [default = INT32];</code>
     */
    public boolean hasDataType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 8 [default = INT32];</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType getDataType() {
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType result = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.valueOf(dataType_);
      return result == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.INT32 : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPrecision()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasScale()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBias()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsSigned()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < dims_.size(); i++) {
        output.writeInt64(1, dims_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, precision_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(3, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(4, bias_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(5, isSigned_);
      }
      if (getDataList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(dataMemoizedSerializedSize);
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeInt32NoTag(data_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, name_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(8, dataType_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < dims_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(dims_.get(i));
        }
        size += dataSize;
        size += 1 * getDimsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, precision_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, bias_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isSigned_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < data_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(data_.get(i));
        }
        size += dataSize;
        if (!getDataList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dataMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, name_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, dataType_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto) obj;

      boolean result = true;
      result = result && getDimsList()
          .equals(other.getDimsList());
      result = result && (hasPrecision() == other.hasPrecision());
      if (hasPrecision()) {
        result = result && (getPrecision()
            == other.getPrecision());
      }
      result = result && (hasScale() == other.hasScale());
      if (hasScale()) {
        result = result && (
            java.lang.Double.doubleToLongBits(getScale())
            == java.lang.Double.doubleToLongBits(
                other.getScale()));
      }
      result = result && (hasBias() == other.hasBias());
      if (hasBias()) {
        result = result && (
            java.lang.Double.doubleToLongBits(getBias())
            == java.lang.Double.doubleToLongBits(
                other.getBias()));
      }
      result = result && (hasIsSigned() == other.hasIsSigned());
      if (hasIsSigned()) {
        result = result && (getIsSigned()
            == other.getIsSigned());
      }
      result = result && getDataList()
          .equals(other.getDataList());
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasDataType() == other.hasDataType());
      if (hasDataType()) {
        result = result && dataType_ == other.dataType_;
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDimsCount() > 0) {
        hash = (37 * hash) + DIMS_FIELD_NUMBER;
        hash = (53 * hash) + getDimsList().hashCode();
      }
      if (hasPrecision()) {
        hash = (37 * hash) + PRECISION_FIELD_NUMBER;
        hash = (53 * hash) + getPrecision();
      }
      if (hasScale()) {
        hash = (37 * hash) + SCALE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getScale()));
      }
      if (hasBias()) {
        hash = (37 * hash) + BIAS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getBias()));
      }
      if (hasIsSigned()) {
        hash = (37 * hash) + IS_SIGNED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsSigned());
      }
      if (getDataCount() > 0) {
        hash = (37 * hash) + DATA_FIELD_NUMBER;
        hash = (53 * hash) + getDataList().hashCode();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasDataType()) {
        hash = (37 * hash) + DATA_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + dataType_;
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_QTensorProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_QTensorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        dims_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        precision_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        scale_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        bias_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        isSigned_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        dataType_ = 2;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_QTensorProto_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          dims_ = java.util.Collections.unmodifiableList(dims_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.dims_ = dims_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.precision_ = precision_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.bias_ = bias_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.isSigned_ = isSigned_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          data_ = java.util.Collections.unmodifiableList(data_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.dataType_ = dataType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.getDefaultInstance()) return this;
        if (!other.dims_.isEmpty()) {
          if (dims_.isEmpty()) {
            dims_ = other.dims_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDimsIsMutable();
            dims_.addAll(other.dims_);
          }
          onChanged();
        }
        if (other.hasPrecision()) {
          setPrecision(other.getPrecision());
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasBias()) {
          setBias(other.getBias());
        }
        if (other.hasIsSigned()) {
          setIsSigned(other.getIsSigned());
        }
        if (!other.data_.isEmpty()) {
          if (data_.isEmpty()) {
            data_ = other.data_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureDataIsMutable();
            data_.addAll(other.data_);
          }
          onChanged();
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000040;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasDataType()) {
          setDataType(other.getDataType());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPrecision()) {
          return false;
        }
        if (!hasScale()) {
          return false;
        }
        if (!hasBias()) {
          return false;
        }
        if (!hasIsSigned()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Long> dims_ = java.util.Collections.emptyList();
      private void ensureDimsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          dims_ = new java.util.ArrayList<java.lang.Long>(dims_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public java.util.List<java.lang.Long>
          getDimsList() {
        return java.util.Collections.unmodifiableList(dims_);
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public int getDimsCount() {
        return dims_.size();
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public long getDims(int index) {
        return dims_.get(index);
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public Builder setDims(
          int index, long value) {
        ensureDimsIsMutable();
        dims_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public Builder addDims(long value) {
        ensureDimsIsMutable();
        dims_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public Builder addAllDims(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureDimsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dims_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public Builder clearDims() {
        dims_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private int precision_ ;
      /**
       * <code>required int32 precision = 2;</code>
       */
      public boolean hasPrecision() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 precision = 2;</code>
       */
      public int getPrecision() {
        return precision_;
      }
      /**
       * <code>required int32 precision = 2;</code>
       */
      public Builder setPrecision(int value) {
        bitField0_ |= 0x00000002;
        precision_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 precision = 2;</code>
       */
      public Builder clearPrecision() {
        bitField0_ = (bitField0_ & ~0x00000002);
        precision_ = 0;
        onChanged();
        return this;
      }

      private double scale_ ;
      /**
       * <code>required double scale = 3;</code>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required double scale = 3;</code>
       */
      public double getScale() {
        return scale_;
      }
      /**
       * <code>required double scale = 3;</code>
       */
      public Builder setScale(double value) {
        bitField0_ |= 0x00000004;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double scale = 3;</code>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000004);
        scale_ = 0D;
        onChanged();
        return this;
      }

      private double bias_ ;
      /**
       * <code>required double bias = 4;</code>
       */
      public boolean hasBias() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required double bias = 4;</code>
       */
      public double getBias() {
        return bias_;
      }
      /**
       * <code>required double bias = 4;</code>
       */
      public Builder setBias(double value) {
        bitField0_ |= 0x00000008;
        bias_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double bias = 4;</code>
       */
      public Builder clearBias() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bias_ = 0D;
        onChanged();
        return this;
      }

      private boolean isSigned_ ;
      /**
       * <code>required bool is_signed = 5;</code>
       */
      public boolean hasIsSigned() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bool is_signed = 5;</code>
       */
      public boolean getIsSigned() {
        return isSigned_;
      }
      /**
       * <code>required bool is_signed = 5;</code>
       */
      public Builder setIsSigned(boolean value) {
        bitField0_ |= 0x00000010;
        isSigned_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_signed = 5;</code>
       */
      public Builder clearIsSigned() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isSigned_ = false;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> data_ = java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          data_ = new java.util.ArrayList<java.lang.Integer>(data_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 data = 6 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getDataList() {
        return java.util.Collections.unmodifiableList(data_);
      }
      /**
       * <code>repeated int32 data = 6 [packed = true];</code>
       */
      public int getDataCount() {
        return data_.size();
      }
      /**
       * <code>repeated int32 data = 6 [packed = true];</code>
       */
      public int getData(int index) {
        return data_.get(index);
      }
      /**
       * <code>repeated int32 data = 6 [packed = true];</code>
       */
      public Builder setData(
          int index, int value) {
        ensureDataIsMutable();
        data_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 data = 6 [packed = true];</code>
       */
      public Builder addData(int value) {
        ensureDataIsMutable();
        data_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 data = 6 [packed = true];</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDataIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, data_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 data = 6 [packed = true];</code>
       */
      public Builder clearData() {
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 7;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional string name = 7;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 7;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 7;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 7;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000040);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 7;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        name_ = value;
        onChanged();
        return this;
      }

      private int dataType_ = 2;
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 8 [default = INT32];</code>
       */
      public boolean hasDataType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 8 [default = INT32];</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType getDataType() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType result = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.valueOf(dataType_);
        return result == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.INT32 : result;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 8 [default = INT32];</code>
       */
      public Builder setDataType(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        dataType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 8 [default = INT32];</code>
       */
      public Builder clearDataType() {
        bitField0_ = (bitField0_ & ~0x00000080);
        dataType_ = 2;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<QTensorProto>
        PARSER = new com.google.protobuf.AbstractParser<QTensorProto>() {
      public QTensorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new QTensorProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<QTensorProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<QTensorProto> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TensorProtosOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProtos)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
     */
    java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto> 
        getProtosList();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getProtos(int index);
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
     */
    int getProtosCount();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
     */
    java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> 
        getProtosOrBuilderList();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder getProtosOrBuilder(
        int index);
  }
  /**
   * <pre>
   * TensorProtos stores multiple TensorProto objects in one single proto. This
   * is useful for small tensors; For anything big, consider using a DB for
   * storage.
   * </pre>
   *
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProtos}
   */
  public  static final class TensorProtos extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProtos)
      TensorProtosOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TensorProtos.newBuilder() to construct.
    private TensorProtos(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TensorProtos() {
      protos_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TensorProtos(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                protos_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto>();
                mutable_bitField0_ |= 0x00000001;
              }
              protos_.add(
                  input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          protos_ = java.util.Collections.unmodifiableList(protos_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProtos_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProtos_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos.Builder.class);
    }

    public static final int PROTOS_FIELD_NUMBER = 1;
    private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto> protos_;
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
     */
    public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto> getProtosList() {
      return protos_;
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
     */
    public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> 
        getProtosOrBuilderList() {
      return protos_;
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
     */
    public int getProtosCount() {
      return protos_.size();
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getProtos(int index) {
      return protos_.get(index);
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder getProtosOrBuilder(
        int index) {
      return protos_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getProtosCount(); i++) {
        if (!getProtos(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < protos_.size(); i++) {
        output.writeMessage(1, protos_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < protos_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, protos_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos) obj;

      boolean result = true;
      result = result && getProtosList()
          .equals(other.getProtosList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getProtosCount() > 0) {
        hash = (37 * hash) + PROTOS_FIELD_NUMBER;
        hash = (53 * hash) + getProtosList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * TensorProtos stores multiple TensorProto objects in one single proto. This
     * is useful for small tensors; For anything big, consider using a DB for
     * storage.
     * </pre>
     *
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProtos}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProtos)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtosOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProtos_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProtos_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getProtosFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (protosBuilder_ == null) {
          protos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          protosBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProtos_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos(this);
        int from_bitField0_ = bitField0_;
        if (protosBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            protos_ = java.util.Collections.unmodifiableList(protos_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.protos_ = protos_;
        } else {
          result.protos_ = protosBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos.getDefaultInstance()) return this;
        if (protosBuilder_ == null) {
          if (!other.protos_.isEmpty()) {
            if (protos_.isEmpty()) {
              protos_ = other.protos_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureProtosIsMutable();
              protos_.addAll(other.protos_);
            }
            onChanged();
          }
        } else {
          if (!other.protos_.isEmpty()) {
            if (protosBuilder_.isEmpty()) {
              protosBuilder_.dispose();
              protosBuilder_ = null;
              protos_ = other.protos_;
              bitField0_ = (bitField0_ & ~0x00000001);
              protosBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getProtosFieldBuilder() : null;
            } else {
              protosBuilder_.addAllMessages(other.protos_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getProtosCount(); i++) {
          if (!getProtos(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto> protos_ =
        java.util.Collections.emptyList();
      private void ensureProtosIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          protos_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto>(protos_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> protosBuilder_;

      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto> getProtosList() {
        if (protosBuilder_ == null) {
          return java.util.Collections.unmodifiableList(protos_);
        } else {
          return protosBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public int getProtosCount() {
        if (protosBuilder_ == null) {
          return protos_.size();
        } else {
          return protosBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getProtos(int index) {
        if (protosBuilder_ == null) {
          return protos_.get(index);
        } else {
          return protosBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public Builder setProtos(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto value) {
        if (protosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProtosIsMutable();
          protos_.set(index, value);
          onChanged();
        } else {
          protosBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public Builder setProtos(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder builderForValue) {
        if (protosBuilder_ == null) {
          ensureProtosIsMutable();
          protos_.set(index, builderForValue.build());
          onChanged();
        } else {
          protosBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public Builder addProtos(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto value) {
        if (protosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProtosIsMutable();
          protos_.add(value);
          onChanged();
        } else {
          protosBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public Builder addProtos(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto value) {
        if (protosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProtosIsMutable();
          protos_.add(index, value);
          onChanged();
        } else {
          protosBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public Builder addProtos(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder builderForValue) {
        if (protosBuilder_ == null) {
          ensureProtosIsMutable();
          protos_.add(builderForValue.build());
          onChanged();
        } else {
          protosBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public Builder addProtos(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder builderForValue) {
        if (protosBuilder_ == null) {
          ensureProtosIsMutable();
          protos_.add(index, builderForValue.build());
          onChanged();
        } else {
          protosBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public Builder addAllProtos(
          java.lang.Iterable<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto> values) {
        if (protosBuilder_ == null) {
          ensureProtosIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, protos_);
          onChanged();
        } else {
          protosBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public Builder clearProtos() {
        if (protosBuilder_ == null) {
          protos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          protosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public Builder removeProtos(int index) {
        if (protosBuilder_ == null) {
          ensureProtosIsMutable();
          protos_.remove(index);
          onChanged();
        } else {
          protosBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder getProtosBuilder(
          int index) {
        return getProtosFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder getProtosOrBuilder(
          int index) {
        if (protosBuilder_ == null) {
          return protos_.get(index);  } else {
          return protosBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> 
           getProtosOrBuilderList() {
        if (protosBuilder_ != null) {
          return protosBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(protos_);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder addProtosBuilder() {
        return getProtosFieldBuilder().addBuilder(
            dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance());
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder addProtosBuilder(
          int index) {
        return getProtosFieldBuilder().addBuilder(
            index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance());
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto protos = 1;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder> 
           getProtosBuilderList() {
        return getProtosFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> 
          getProtosFieldBuilder() {
        if (protosBuilder_ == null) {
          protosBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder>(
                  protos_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          protos_ = null;
        }
        return protosBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProtos)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProtos)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TensorProtos>
        PARSER = new com.google.protobuf.AbstractParser<TensorProtos>() {
      public TensorProtos parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TensorProtos(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TensorProtos> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TensorProtos> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtos getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TensorShapeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated int64 dims = 1;</code>
     */
    java.util.List<java.lang.Long> getDimsList();
    /**
     * <code>repeated int64 dims = 1;</code>
     */
    int getDimsCount();
    /**
     * <code>repeated int64 dims = 1;</code>
     */
    long getDims(int index);

    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
     */
    boolean hasDataType();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType getDataType();

    /**
     * <code>repeated int32 unknown_dims = 3;</code>
     */
    java.util.List<java.lang.Integer> getUnknownDimsList();
    /**
     * <code>repeated int32 unknown_dims = 3;</code>
     */
    int getUnknownDimsCount();
    /**
     * <code>repeated int32 unknown_dims = 3;</code>
     */
    int getUnknownDims(int index);

    /**
     * <code>optional bool unknown_shape = 4 [default = false];</code>
     */
    boolean hasUnknownShape();
    /**
     * <code>optional bool unknown_shape = 4 [default = false];</code>
     */
    boolean getUnknownShape();

    /**
     * <code>optional string name = 5;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 5;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 5;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();
  }
  /**
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape}
   */
  public  static final class TensorShape extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape)
      TensorShapeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TensorShape.newBuilder() to construct.
    private TensorShape(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TensorShape() {
      dims_ = java.util.Collections.emptyList();
      dataType_ = 1;
      unknownDims_ = java.util.Collections.emptyList();
      unknownShape_ = false;
      name_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TensorShape(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                dims_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              dims_.add(input.readInt64());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                dims_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                dims_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType value = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                dataType_ = rawValue;
              }
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                unknownDims_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              unknownDims_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                unknownDims_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                unknownDims_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              unknownShape_ = input.readBool();
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              name_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          dims_ = java.util.Collections.unmodifiableList(dims_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          unknownDims_ = java.util.Collections.unmodifiableList(unknownDims_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShape_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShape_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.Builder.class);
    }

    private int bitField0_;
    public static final int DIMS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Long> dims_;
    /**
     * <code>repeated int64 dims = 1;</code>
     */
    public java.util.List<java.lang.Long>
        getDimsList() {
      return dims_;
    }
    /**
     * <code>repeated int64 dims = 1;</code>
     */
    public int getDimsCount() {
      return dims_.size();
    }
    /**
     * <code>repeated int64 dims = 1;</code>
     */
    public long getDims(int index) {
      return dims_.get(index);
    }

    public static final int DATA_TYPE_FIELD_NUMBER = 2;
    private int dataType_;
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
     */
    public boolean hasDataType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType getDataType() {
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType result = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.valueOf(dataType_);
      return result == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.FLOAT : result;
    }

    public static final int UNKNOWN_DIMS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> unknownDims_;
    /**
     * <code>repeated int32 unknown_dims = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getUnknownDimsList() {
      return unknownDims_;
    }
    /**
     * <code>repeated int32 unknown_dims = 3;</code>
     */
    public int getUnknownDimsCount() {
      return unknownDims_.size();
    }
    /**
     * <code>repeated int32 unknown_dims = 3;</code>
     */
    public int getUnknownDims(int index) {
      return unknownDims_.get(index);
    }

    public static final int UNKNOWN_SHAPE_FIELD_NUMBER = 4;
    private boolean unknownShape_;
    /**
     * <code>optional bool unknown_shape = 4 [default = false];</code>
     */
    public boolean hasUnknownShape() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool unknown_shape = 4 [default = false];</code>
     */
    public boolean getUnknownShape() {
      return unknownShape_;
    }

    public static final int NAME_FIELD_NUMBER = 5;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string name = 5;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string name = 5;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 5;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dims_.size(); i++) {
        output.writeInt64(1, dims_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(2, dataType_);
      }
      for (int i = 0; i < unknownDims_.size(); i++) {
        output.writeInt32(3, unknownDims_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(4, unknownShape_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, name_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < dims_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(dims_.get(i));
        }
        size += dataSize;
        size += 1 * getDimsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, dataType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < unknownDims_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(unknownDims_.get(i));
        }
        size += dataSize;
        size += 1 * getUnknownDimsList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, unknownShape_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, name_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape) obj;

      boolean result = true;
      result = result && getDimsList()
          .equals(other.getDimsList());
      result = result && (hasDataType() == other.hasDataType());
      if (hasDataType()) {
        result = result && dataType_ == other.dataType_;
      }
      result = result && getUnknownDimsList()
          .equals(other.getUnknownDimsList());
      result = result && (hasUnknownShape() == other.hasUnknownShape());
      if (hasUnknownShape()) {
        result = result && (getUnknownShape()
            == other.getUnknownShape());
      }
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDimsCount() > 0) {
        hash = (37 * hash) + DIMS_FIELD_NUMBER;
        hash = (53 * hash) + getDimsList().hashCode();
      }
      if (hasDataType()) {
        hash = (37 * hash) + DATA_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + dataType_;
      }
      if (getUnknownDimsCount() > 0) {
        hash = (37 * hash) + UNKNOWN_DIMS_FIELD_NUMBER;
        hash = (53 * hash) + getUnknownDimsList().hashCode();
      }
      if (hasUnknownShape()) {
        hash = (37 * hash) + UNKNOWN_SHAPE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUnknownShape());
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShape_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShape_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        dims_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        dataType_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        unknownDims_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        unknownShape_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShape_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          dims_ = java.util.Collections.unmodifiableList(dims_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.dims_ = dims_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.dataType_ = dataType_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          unknownDims_ = java.util.Collections.unmodifiableList(unknownDims_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.unknownDims_ = unknownDims_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.unknownShape_ = unknownShape_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.getDefaultInstance()) return this;
        if (!other.dims_.isEmpty()) {
          if (dims_.isEmpty()) {
            dims_ = other.dims_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDimsIsMutable();
            dims_.addAll(other.dims_);
          }
          onChanged();
        }
        if (other.hasDataType()) {
          setDataType(other.getDataType());
        }
        if (!other.unknownDims_.isEmpty()) {
          if (unknownDims_.isEmpty()) {
            unknownDims_ = other.unknownDims_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureUnknownDimsIsMutable();
            unknownDims_.addAll(other.unknownDims_);
          }
          onChanged();
        }
        if (other.hasUnknownShape()) {
          setUnknownShape(other.getUnknownShape());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000010;
          name_ = other.name_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Long> dims_ = java.util.Collections.emptyList();
      private void ensureDimsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          dims_ = new java.util.ArrayList<java.lang.Long>(dims_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public java.util.List<java.lang.Long>
          getDimsList() {
        return java.util.Collections.unmodifiableList(dims_);
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public int getDimsCount() {
        return dims_.size();
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public long getDims(int index) {
        return dims_.get(index);
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public Builder setDims(
          int index, long value) {
        ensureDimsIsMutable();
        dims_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public Builder addDims(long value) {
        ensureDimsIsMutable();
        dims_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public Builder addAllDims(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureDimsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dims_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dims = 1;</code>
       */
      public Builder clearDims() {
        dims_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private int dataType_ = 1;
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
       */
      public boolean hasDataType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType getDataType() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType result = dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.valueOf(dataType_);
        return result == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType.FLOAT : result;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
       */
      public Builder setDataType(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.DataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        dataType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto.DataType data_type = 2 [default = FLOAT];</code>
       */
      public Builder clearDataType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        dataType_ = 1;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> unknownDims_ = java.util.Collections.emptyList();
      private void ensureUnknownDimsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          unknownDims_ = new java.util.ArrayList<java.lang.Integer>(unknownDims_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 unknown_dims = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getUnknownDimsList() {
        return java.util.Collections.unmodifiableList(unknownDims_);
      }
      /**
       * <code>repeated int32 unknown_dims = 3;</code>
       */
      public int getUnknownDimsCount() {
        return unknownDims_.size();
      }
      /**
       * <code>repeated int32 unknown_dims = 3;</code>
       */
      public int getUnknownDims(int index) {
        return unknownDims_.get(index);
      }
      /**
       * <code>repeated int32 unknown_dims = 3;</code>
       */
      public Builder setUnknownDims(
          int index, int value) {
        ensureUnknownDimsIsMutable();
        unknownDims_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 unknown_dims = 3;</code>
       */
      public Builder addUnknownDims(int value) {
        ensureUnknownDimsIsMutable();
        unknownDims_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 unknown_dims = 3;</code>
       */
      public Builder addAllUnknownDims(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUnknownDimsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, unknownDims_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 unknown_dims = 3;</code>
       */
      public Builder clearUnknownDims() {
        unknownDims_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private boolean unknownShape_ ;
      /**
       * <code>optional bool unknown_shape = 4 [default = false];</code>
       */
      public boolean hasUnknownShape() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool unknown_shape = 4 [default = false];</code>
       */
      public boolean getUnknownShape() {
        return unknownShape_;
      }
      /**
       * <code>optional bool unknown_shape = 4 [default = false];</code>
       */
      public Builder setUnknownShape(boolean value) {
        bitField0_ |= 0x00000008;
        unknownShape_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool unknown_shape = 4 [default = false];</code>
       */
      public Builder clearUnknownShape() {
        bitField0_ = (bitField0_ & ~0x00000008);
        unknownShape_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 5;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string name = 5;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 5;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 5;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 5;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000010);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 5;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        name_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TensorShape>
        PARSER = new com.google.protobuf.AbstractParser<TensorShape>() {
      public TensorShape parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TensorShape(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TensorShape> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TensorShape> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TensorShapesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShapes)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
     */
    java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape> 
        getShapesList();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape getShapes(int index);
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
     */
    int getShapesCount();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
     */
    java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapeOrBuilder> 
        getShapesOrBuilderList();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapeOrBuilder getShapesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShapes}
   */
  public  static final class TensorShapes extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShapes)
      TensorShapesOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TensorShapes.newBuilder() to construct.
    private TensorShapes(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TensorShapes() {
      shapes_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TensorShapes(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                shapes_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape>();
                mutable_bitField0_ |= 0x00000001;
              }
              shapes_.add(
                  input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          shapes_ = java.util.Collections.unmodifiableList(shapes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShapes_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShapes_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes.Builder.class);
    }

    public static final int SHAPES_FIELD_NUMBER = 1;
    private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape> shapes_;
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
     */
    public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape> getShapesList() {
      return shapes_;
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
     */
    public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapeOrBuilder> 
        getShapesOrBuilderList() {
      return shapes_;
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
     */
    public int getShapesCount() {
      return shapes_.size();
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape getShapes(int index) {
      return shapes_.get(index);
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapeOrBuilder getShapesOrBuilder(
        int index) {
      return shapes_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < shapes_.size(); i++) {
        output.writeMessage(1, shapes_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < shapes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, shapes_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes) obj;

      boolean result = true;
      result = result && getShapesList()
          .equals(other.getShapesList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getShapesCount() > 0) {
        hash = (37 * hash) + SHAPES_FIELD_NUMBER;
        hash = (53 * hash) + getShapesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShapes}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShapes)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShapes_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShapes_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getShapesFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (shapesBuilder_ == null) {
          shapes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          shapesBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShapes_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes(this);
        int from_bitField0_ = bitField0_;
        if (shapesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            shapes_ = java.util.Collections.unmodifiableList(shapes_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.shapes_ = shapes_;
        } else {
          result.shapes_ = shapesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes.getDefaultInstance()) return this;
        if (shapesBuilder_ == null) {
          if (!other.shapes_.isEmpty()) {
            if (shapes_.isEmpty()) {
              shapes_ = other.shapes_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureShapesIsMutable();
              shapes_.addAll(other.shapes_);
            }
            onChanged();
          }
        } else {
          if (!other.shapes_.isEmpty()) {
            if (shapesBuilder_.isEmpty()) {
              shapesBuilder_.dispose();
              shapesBuilder_ = null;
              shapes_ = other.shapes_;
              bitField0_ = (bitField0_ & ~0x00000001);
              shapesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getShapesFieldBuilder() : null;
            } else {
              shapesBuilder_.addAllMessages(other.shapes_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape> shapes_ =
        java.util.Collections.emptyList();
      private void ensureShapesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          shapes_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape>(shapes_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapeOrBuilder> shapesBuilder_;

      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape> getShapesList() {
        if (shapesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(shapes_);
        } else {
          return shapesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public int getShapesCount() {
        if (shapesBuilder_ == null) {
          return shapes_.size();
        } else {
          return shapesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape getShapes(int index) {
        if (shapesBuilder_ == null) {
          return shapes_.get(index);
        } else {
          return shapesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public Builder setShapes(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape value) {
        if (shapesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShapesIsMutable();
          shapes_.set(index, value);
          onChanged();
        } else {
          shapesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public Builder setShapes(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.Builder builderForValue) {
        if (shapesBuilder_ == null) {
          ensureShapesIsMutable();
          shapes_.set(index, builderForValue.build());
          onChanged();
        } else {
          shapesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public Builder addShapes(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape value) {
        if (shapesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShapesIsMutable();
          shapes_.add(value);
          onChanged();
        } else {
          shapesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public Builder addShapes(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape value) {
        if (shapesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShapesIsMutable();
          shapes_.add(index, value);
          onChanged();
        } else {
          shapesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public Builder addShapes(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.Builder builderForValue) {
        if (shapesBuilder_ == null) {
          ensureShapesIsMutable();
          shapes_.add(builderForValue.build());
          onChanged();
        } else {
          shapesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public Builder addShapes(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.Builder builderForValue) {
        if (shapesBuilder_ == null) {
          ensureShapesIsMutable();
          shapes_.add(index, builderForValue.build());
          onChanged();
        } else {
          shapesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public Builder addAllShapes(
          java.lang.Iterable<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape> values) {
        if (shapesBuilder_ == null) {
          ensureShapesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, shapes_);
          onChanged();
        } else {
          shapesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public Builder clearShapes() {
        if (shapesBuilder_ == null) {
          shapes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          shapesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public Builder removeShapes(int index) {
        if (shapesBuilder_ == null) {
          ensureShapesIsMutable();
          shapes_.remove(index);
          onChanged();
        } else {
          shapesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.Builder getShapesBuilder(
          int index) {
        return getShapesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapeOrBuilder getShapesOrBuilder(
          int index) {
        if (shapesBuilder_ == null) {
          return shapes_.get(index);  } else {
          return shapesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapeOrBuilder> 
           getShapesOrBuilderList() {
        if (shapesBuilder_ != null) {
          return shapesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(shapes_);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.Builder addShapesBuilder() {
        return getShapesFieldBuilder().addBuilder(
            dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.getDefaultInstance());
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.Builder addShapesBuilder(
          int index) {
        return getShapesFieldBuilder().addBuilder(
            index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.getDefaultInstance());
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShape shapes = 1;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.Builder> 
           getShapesBuilderList() {
        return getShapesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapeOrBuilder> 
          getShapesFieldBuilder() {
        if (shapesBuilder_ == null) {
          shapesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShape.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapeOrBuilder>(
                  shapes_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          shapes_ = null;
        }
        return shapesBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShapes)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorShapes)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TensorShapes>
        PARSER = new com.google.protobuf.AbstractParser<TensorShapes>() {
      public TensorShapes parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TensorShapes(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TensorShapes> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TensorShapes> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorShapes getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ArgumentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional float f = 2;</code>
     */
    boolean hasF();
    /**
     * <code>optional float f = 2;</code>
     */
    float getF();

    /**
     * <code>optional int64 i = 3;</code>
     */
    boolean hasI();
    /**
     * <code>optional int64 i = 3;</code>
     */
    long getI();

    /**
     * <code>optional bytes s = 4;</code>
     */
    boolean hasS();
    /**
     * <code>optional bytes s = 4;</code>
     */
    com.google.protobuf.ByteString getS();

    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
     */
    boolean hasT();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getT();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder getTOrBuilder();

    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
     */
    boolean hasN();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef getN();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder getNOrBuilder();

    /**
     * <code>repeated float floats = 5;</code>
     */
    java.util.List<java.lang.Float> getFloatsList();
    /**
     * <code>repeated float floats = 5;</code>
     */
    int getFloatsCount();
    /**
     * <code>repeated float floats = 5;</code>
     */
    float getFloats(int index);

    /**
     * <code>repeated int64 ints = 6;</code>
     */
    java.util.List<java.lang.Long> getIntsList();
    /**
     * <code>repeated int64 ints = 6;</code>
     */
    int getIntsCount();
    /**
     * <code>repeated int64 ints = 6;</code>
     */
    long getInts(int index);

    /**
     * <code>repeated bytes strings = 7;</code>
     */
    java.util.List<com.google.protobuf.ByteString> getStringsList();
    /**
     * <code>repeated bytes strings = 7;</code>
     */
    int getStringsCount();
    /**
     * <code>repeated bytes strings = 7;</code>
     */
    com.google.protobuf.ByteString getStrings(int index);

    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
     */
    java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto> 
        getTensorsList();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getTensors(int index);
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
     */
    int getTensorsCount();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
     */
    java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> 
        getTensorsOrBuilderList();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder getTensorsOrBuilder(
        int index);

    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
     */
    java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef> 
        getNetsList();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef getNets(int index);
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
     */
    int getNetsCount();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
     */
    java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder> 
        getNetsOrBuilderList();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder getNetsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A named argument containing either singular float, integer and string
   * values, or repeated float, int and string arrays.
   * </pre>
   *
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument}
   */
  public  static final class Argument extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument)
      ArgumentOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Argument.newBuilder() to construct.
    private Argument(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Argument() {
      name_ = "";
      f_ = 0F;
      i_ = 0L;
      s_ = com.google.protobuf.ByteString.EMPTY;
      floats_ = java.util.Collections.emptyList();
      ints_ = java.util.Collections.emptyList();
      strings_ = java.util.Collections.emptyList();
      tensors_ = java.util.Collections.emptyList();
      nets_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Argument(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              f_ = input.readFloat();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              i_ = input.readInt64();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              s_ = input.readBytes();
              break;
            }
            case 45: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                floats_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000040;
              }
              floats_.add(input.readFloat());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                floats_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                floats_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                ints_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000080;
              }
              ints_.add(input.readInt64());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                ints_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                ints_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                strings_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000100;
              }
              strings_.add(input.readBytes());
              break;
            }
            case 66: {
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = n_.toBuilder();
              }
              n_ = input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(n_);
                n_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                nets_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef>();
                mutable_bitField0_ |= 0x00000400;
              }
              nets_.add(
                  input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.PARSER, extensionRegistry));
              break;
            }
            case 82: {
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = t_.toBuilder();
              }
              t_ = input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(t_);
                t_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                tensors_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto>();
                mutable_bitField0_ |= 0x00000200;
              }
              tensors_.add(
                  input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          floats_ = java.util.Collections.unmodifiableList(floats_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          ints_ = java.util.Collections.unmodifiableList(ints_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          strings_ = java.util.Collections.unmodifiableList(strings_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          nets_ = java.util.Collections.unmodifiableList(nets_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          tensors_ = java.util.Collections.unmodifiableList(tensors_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_Argument_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_Argument_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int F_FIELD_NUMBER = 2;
    private float f_;
    /**
     * <code>optional float f = 2;</code>
     */
    public boolean hasF() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float f = 2;</code>
     */
    public float getF() {
      return f_;
    }

    public static final int I_FIELD_NUMBER = 3;
    private long i_;
    /**
     * <code>optional int64 i = 3;</code>
     */
    public boolean hasI() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 i = 3;</code>
     */
    public long getI() {
      return i_;
    }

    public static final int S_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString s_;
    /**
     * <code>optional bytes s = 4;</code>
     */
    public boolean hasS() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes s = 4;</code>
     */
    public com.google.protobuf.ByteString getS() {
      return s_;
    }

    public static final int T_FIELD_NUMBER = 10;
    private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto t_;
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
     */
    public boolean hasT() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getT() {
      return t_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance() : t_;
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder getTOrBuilder() {
      return t_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance() : t_;
    }

    public static final int N_FIELD_NUMBER = 8;
    private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef n_;
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
     */
    public boolean hasN() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef getN() {
      return n_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.getDefaultInstance() : n_;
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder getNOrBuilder() {
      return n_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.getDefaultInstance() : n_;
    }

    public static final int FLOATS_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Float> floats_;
    /**
     * <code>repeated float floats = 5;</code>
     */
    public java.util.List<java.lang.Float>
        getFloatsList() {
      return floats_;
    }
    /**
     * <code>repeated float floats = 5;</code>
     */
    public int getFloatsCount() {
      return floats_.size();
    }
    /**
     * <code>repeated float floats = 5;</code>
     */
    public float getFloats(int index) {
      return floats_.get(index);
    }

    public static final int INTS_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Long> ints_;
    /**
     * <code>repeated int64 ints = 6;</code>
     */
    public java.util.List<java.lang.Long>
        getIntsList() {
      return ints_;
    }
    /**
     * <code>repeated int64 ints = 6;</code>
     */
    public int getIntsCount() {
      return ints_.size();
    }
    /**
     * <code>repeated int64 ints = 6;</code>
     */
    public long getInts(int index) {
      return ints_.get(index);
    }

    public static final int STRINGS_FIELD_NUMBER = 7;
    private java.util.List<com.google.protobuf.ByteString> strings_;
    /**
     * <code>repeated bytes strings = 7;</code>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getStringsList() {
      return strings_;
    }
    /**
     * <code>repeated bytes strings = 7;</code>
     */
    public int getStringsCount() {
      return strings_.size();
    }
    /**
     * <code>repeated bytes strings = 7;</code>
     */
    public com.google.protobuf.ByteString getStrings(int index) {
      return strings_.get(index);
    }

    public static final int TENSORS_FIELD_NUMBER = 11;
    private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto> tensors_;
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
     */
    public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto> getTensorsList() {
      return tensors_;
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
     */
    public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> 
        getTensorsOrBuilderList() {
      return tensors_;
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
     */
    public int getTensorsCount() {
      return tensors_.size();
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getTensors(int index) {
      return tensors_.get(index);
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder getTensorsOrBuilder(
        int index) {
      return tensors_.get(index);
    }

    public static final int NETS_FIELD_NUMBER = 9;
    private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef> nets_;
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
     */
    public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef> getNetsList() {
      return nets_;
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
     */
    public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder> 
        getNetsOrBuilderList() {
      return nets_;
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
     */
    public int getNetsCount() {
      return nets_.size();
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef getNets(int index) {
      return nets_.get(index);
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder getNetsOrBuilder(
        int index) {
      return nets_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasT()) {
        if (!getT().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasN()) {
        if (!getN().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTensorsCount(); i++) {
        if (!getTensors(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getNetsCount(); i++) {
        if (!getNets(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, f_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, i_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, s_);
      }
      for (int i = 0; i < floats_.size(); i++) {
        output.writeFloat(5, floats_.get(i));
      }
      for (int i = 0; i < ints_.size(); i++) {
        output.writeInt64(6, ints_.get(i));
      }
      for (int i = 0; i < strings_.size(); i++) {
        output.writeBytes(7, strings_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(8, getN());
      }
      for (int i = 0; i < nets_.size(); i++) {
        output.writeMessage(9, nets_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(10, getT());
      }
      for (int i = 0; i < tensors_.size(); i++) {
        output.writeMessage(11, tensors_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, f_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, i_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, s_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFloatsList().size();
        size += dataSize;
        size += 1 * getFloatsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < ints_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(ints_.get(i));
        }
        size += dataSize;
        size += 1 * getIntsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < strings_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(strings_.get(i));
        }
        size += dataSize;
        size += 1 * getStringsList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getN());
      }
      for (int i = 0; i < nets_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, nets_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getT());
      }
      for (int i = 0; i < tensors_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, tensors_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasF() == other.hasF());
      if (hasF()) {
        result = result && (
            java.lang.Float.floatToIntBits(getF())
            == java.lang.Float.floatToIntBits(
                other.getF()));
      }
      result = result && (hasI() == other.hasI());
      if (hasI()) {
        result = result && (getI()
            == other.getI());
      }
      result = result && (hasS() == other.hasS());
      if (hasS()) {
        result = result && getS()
            .equals(other.getS());
      }
      result = result && (hasT() == other.hasT());
      if (hasT()) {
        result = result && getT()
            .equals(other.getT());
      }
      result = result && (hasN() == other.hasN());
      if (hasN()) {
        result = result && getN()
            .equals(other.getN());
      }
      result = result && getFloatsList()
          .equals(other.getFloatsList());
      result = result && getIntsList()
          .equals(other.getIntsList());
      result = result && getStringsList()
          .equals(other.getStringsList());
      result = result && getTensorsList()
          .equals(other.getTensorsList());
      result = result && getNetsList()
          .equals(other.getNetsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasF()) {
        hash = (37 * hash) + F_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getF());
      }
      if (hasI()) {
        hash = (37 * hash) + I_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getI());
      }
      if (hasS()) {
        hash = (37 * hash) + S_FIELD_NUMBER;
        hash = (53 * hash) + getS().hashCode();
      }
      if (hasT()) {
        hash = (37 * hash) + T_FIELD_NUMBER;
        hash = (53 * hash) + getT().hashCode();
      }
      if (hasN()) {
        hash = (37 * hash) + N_FIELD_NUMBER;
        hash = (53 * hash) + getN().hashCode();
      }
      if (getFloatsCount() > 0) {
        hash = (37 * hash) + FLOATS_FIELD_NUMBER;
        hash = (53 * hash) + getFloatsList().hashCode();
      }
      if (getIntsCount() > 0) {
        hash = (37 * hash) + INTS_FIELD_NUMBER;
        hash = (53 * hash) + getIntsList().hashCode();
      }
      if (getStringsCount() > 0) {
        hash = (37 * hash) + STRINGS_FIELD_NUMBER;
        hash = (53 * hash) + getStringsList().hashCode();
      }
      if (getTensorsCount() > 0) {
        hash = (37 * hash) + TENSORS_FIELD_NUMBER;
        hash = (53 * hash) + getTensorsList().hashCode();
      }
      if (getNetsCount() > 0) {
        hash = (37 * hash) + NETS_FIELD_NUMBER;
        hash = (53 * hash) + getNetsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A named argument containing either singular float, integer and string
     * values, or repeated float, int and string arrays.
     * </pre>
     *
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_Argument_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_Argument_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTFieldBuilder();
          getNFieldBuilder();
          getTensorsFieldBuilder();
          getNetsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        f_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        i_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        s_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (tBuilder_ == null) {
          t_ = null;
        } else {
          tBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (nBuilder_ == null) {
          n_ = null;
        } else {
          nBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        floats_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        ints_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        strings_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        if (tensorsBuilder_ == null) {
          tensors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          tensorsBuilder_.clear();
        }
        if (netsBuilder_ == null) {
          nets_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          netsBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_Argument_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.f_ = f_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.i_ = i_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.s_ = s_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (tBuilder_ == null) {
          result.t_ = t_;
        } else {
          result.t_ = tBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (nBuilder_ == null) {
          result.n_ = n_;
        } else {
          result.n_ = nBuilder_.build();
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          floats_ = java.util.Collections.unmodifiableList(floats_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.floats_ = floats_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          ints_ = java.util.Collections.unmodifiableList(ints_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.ints_ = ints_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          strings_ = java.util.Collections.unmodifiableList(strings_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.strings_ = strings_;
        if (tensorsBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            tensors_ = java.util.Collections.unmodifiableList(tensors_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.tensors_ = tensors_;
        } else {
          result.tensors_ = tensorsBuilder_.build();
        }
        if (netsBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            nets_ = java.util.Collections.unmodifiableList(nets_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.nets_ = nets_;
        } else {
          result.nets_ = netsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasF()) {
          setF(other.getF());
        }
        if (other.hasI()) {
          setI(other.getI());
        }
        if (other.hasS()) {
          setS(other.getS());
        }
        if (other.hasT()) {
          mergeT(other.getT());
        }
        if (other.hasN()) {
          mergeN(other.getN());
        }
        if (!other.floats_.isEmpty()) {
          if (floats_.isEmpty()) {
            floats_ = other.floats_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureFloatsIsMutable();
            floats_.addAll(other.floats_);
          }
          onChanged();
        }
        if (!other.ints_.isEmpty()) {
          if (ints_.isEmpty()) {
            ints_ = other.ints_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureIntsIsMutable();
            ints_.addAll(other.ints_);
          }
          onChanged();
        }
        if (!other.strings_.isEmpty()) {
          if (strings_.isEmpty()) {
            strings_ = other.strings_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureStringsIsMutable();
            strings_.addAll(other.strings_);
          }
          onChanged();
        }
        if (tensorsBuilder_ == null) {
          if (!other.tensors_.isEmpty()) {
            if (tensors_.isEmpty()) {
              tensors_ = other.tensors_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureTensorsIsMutable();
              tensors_.addAll(other.tensors_);
            }
            onChanged();
          }
        } else {
          if (!other.tensors_.isEmpty()) {
            if (tensorsBuilder_.isEmpty()) {
              tensorsBuilder_.dispose();
              tensorsBuilder_ = null;
              tensors_ = other.tensors_;
              bitField0_ = (bitField0_ & ~0x00000200);
              tensorsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTensorsFieldBuilder() : null;
            } else {
              tensorsBuilder_.addAllMessages(other.tensors_);
            }
          }
        }
        if (netsBuilder_ == null) {
          if (!other.nets_.isEmpty()) {
            if (nets_.isEmpty()) {
              nets_ = other.nets_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureNetsIsMutable();
              nets_.addAll(other.nets_);
            }
            onChanged();
          }
        } else {
          if (!other.nets_.isEmpty()) {
            if (netsBuilder_.isEmpty()) {
              netsBuilder_.dispose();
              netsBuilder_ = null;
              nets_ = other.nets_;
              bitField0_ = (bitField0_ & ~0x00000400);
              netsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getNetsFieldBuilder() : null;
            } else {
              netsBuilder_.addAllMessages(other.nets_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (hasT()) {
          if (!getT().isInitialized()) {
            return false;
          }
        }
        if (hasN()) {
          if (!getN().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getTensorsCount(); i++) {
          if (!getTensors(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getNetsCount(); i++) {
          if (!getNets(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private float f_ ;
      /**
       * <code>optional float f = 2;</code>
       */
      public boolean hasF() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float f = 2;</code>
       */
      public float getF() {
        return f_;
      }
      /**
       * <code>optional float f = 2;</code>
       */
      public Builder setF(float value) {
        bitField0_ |= 0x00000002;
        f_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float f = 2;</code>
       */
      public Builder clearF() {
        bitField0_ = (bitField0_ & ~0x00000002);
        f_ = 0F;
        onChanged();
        return this;
      }

      private long i_ ;
      /**
       * <code>optional int64 i = 3;</code>
       */
      public boolean hasI() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 i = 3;</code>
       */
      public long getI() {
        return i_;
      }
      /**
       * <code>optional int64 i = 3;</code>
       */
      public Builder setI(long value) {
        bitField0_ |= 0x00000004;
        i_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 i = 3;</code>
       */
      public Builder clearI() {
        bitField0_ = (bitField0_ & ~0x00000004);
        i_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString s_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes s = 4;</code>
       */
      public boolean hasS() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes s = 4;</code>
       */
      public com.google.protobuf.ByteString getS() {
        return s_;
      }
      /**
       * <code>optional bytes s = 4;</code>
       */
      public Builder setS(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        s_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes s = 4;</code>
       */
      public Builder clearS() {
        bitField0_ = (bitField0_ & ~0x00000008);
        s_ = getDefaultInstance().getS();
        onChanged();
        return this;
      }

      private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto t_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> tBuilder_;
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
       */
      public boolean hasT() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getT() {
        if (tBuilder_ == null) {
          return t_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance() : t_;
        } else {
          return tBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
       */
      public Builder setT(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto value) {
        if (tBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          t_ = value;
          onChanged();
        } else {
          tBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
       */
      public Builder setT(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder builderForValue) {
        if (tBuilder_ == null) {
          t_ = builderForValue.build();
          onChanged();
        } else {
          tBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
       */
      public Builder mergeT(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto value) {
        if (tBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              t_ != null &&
              t_ != dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance()) {
            t_ =
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.newBuilder(t_).mergeFrom(value).buildPartial();
          } else {
            t_ = value;
          }
          onChanged();
        } else {
          tBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
       */
      public Builder clearT() {
        if (tBuilder_ == null) {
          t_ = null;
          onChanged();
        } else {
          tBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder getTBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getTFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder getTOrBuilder() {
        if (tBuilder_ != null) {
          return tBuilder_.getMessageOrBuilder();
        } else {
          return t_ == null ?
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance() : t_;
        }
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto t = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> 
          getTFieldBuilder() {
        if (tBuilder_ == null) {
          tBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder>(
                  getT(),
                  getParentForChildren(),
                  isClean());
          t_ = null;
        }
        return tBuilder_;
      }

      private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef n_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder> nBuilder_;
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
       */
      public boolean hasN() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef getN() {
        if (nBuilder_ == null) {
          return n_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.getDefaultInstance() : n_;
        } else {
          return nBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
       */
      public Builder setN(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef value) {
        if (nBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          n_ = value;
          onChanged();
        } else {
          nBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
       */
      public Builder setN(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder builderForValue) {
        if (nBuilder_ == null) {
          n_ = builderForValue.build();
          onChanged();
        } else {
          nBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
       */
      public Builder mergeN(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef value) {
        if (nBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              n_ != null &&
              n_ != dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.getDefaultInstance()) {
            n_ =
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.newBuilder(n_).mergeFrom(value).buildPartial();
          } else {
            n_ = value;
          }
          onChanged();
        } else {
          nBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
       */
      public Builder clearN() {
        if (nBuilder_ == null) {
          n_ = null;
          onChanged();
        } else {
          nBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder getNBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getNFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder getNOrBuilder() {
        if (nBuilder_ != null) {
          return nBuilder_.getMessageOrBuilder();
        } else {
          return n_ == null ?
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.getDefaultInstance() : n_;
        }
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef n = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder> 
          getNFieldBuilder() {
        if (nBuilder_ == null) {
          nBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder>(
                  getN(),
                  getParentForChildren(),
                  isClean());
          n_ = null;
        }
        return nBuilder_;
      }

      private java.util.List<java.lang.Float> floats_ = java.util.Collections.emptyList();
      private void ensureFloatsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          floats_ = new java.util.ArrayList<java.lang.Float>(floats_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated float floats = 5;</code>
       */
      public java.util.List<java.lang.Float>
          getFloatsList() {
        return java.util.Collections.unmodifiableList(floats_);
      }
      /**
       * <code>repeated float floats = 5;</code>
       */
      public int getFloatsCount() {
        return floats_.size();
      }
      /**
       * <code>repeated float floats = 5;</code>
       */
      public float getFloats(int index) {
        return floats_.get(index);
      }
      /**
       * <code>repeated float floats = 5;</code>
       */
      public Builder setFloats(
          int index, float value) {
        ensureFloatsIsMutable();
        floats_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float floats = 5;</code>
       */
      public Builder addFloats(float value) {
        ensureFloatsIsMutable();
        floats_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float floats = 5;</code>
       */
      public Builder addAllFloats(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFloatsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, floats_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float floats = 5;</code>
       */
      public Builder clearFloats() {
        floats_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> ints_ = java.util.Collections.emptyList();
      private void ensureIntsIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          ints_ = new java.util.ArrayList<java.lang.Long>(ints_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int64 ints = 6;</code>
       */
      public java.util.List<java.lang.Long>
          getIntsList() {
        return java.util.Collections.unmodifiableList(ints_);
      }
      /**
       * <code>repeated int64 ints = 6;</code>
       */
      public int getIntsCount() {
        return ints_.size();
      }
      /**
       * <code>repeated int64 ints = 6;</code>
       */
      public long getInts(int index) {
        return ints_.get(index);
      }
      /**
       * <code>repeated int64 ints = 6;</code>
       */
      public Builder setInts(
          int index, long value) {
        ensureIntsIsMutable();
        ints_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 ints = 6;</code>
       */
      public Builder addInts(long value) {
        ensureIntsIsMutable();
        ints_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 ints = 6;</code>
       */
      public Builder addAllInts(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureIntsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ints_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 ints = 6;</code>
       */
      public Builder clearInts() {
        ints_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private java.util.List<com.google.protobuf.ByteString> strings_ = java.util.Collections.emptyList();
      private void ensureStringsIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          strings_ = new java.util.ArrayList<com.google.protobuf.ByteString>(strings_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated bytes strings = 7;</code>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getStringsList() {
        return java.util.Collections.unmodifiableList(strings_);
      }
      /**
       * <code>repeated bytes strings = 7;</code>
       */
      public int getStringsCount() {
        return strings_.size();
      }
      /**
       * <code>repeated bytes strings = 7;</code>
       */
      public com.google.protobuf.ByteString getStrings(int index) {
        return strings_.get(index);
      }
      /**
       * <code>repeated bytes strings = 7;</code>
       */
      public Builder setStrings(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringsIsMutable();
        strings_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes strings = 7;</code>
       */
      public Builder addStrings(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringsIsMutable();
        strings_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes strings = 7;</code>
       */
      public Builder addAllStrings(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureStringsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, strings_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes strings = 7;</code>
       */
      public Builder clearStrings() {
        strings_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto> tensors_ =
        java.util.Collections.emptyList();
      private void ensureTensorsIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          tensors_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto>(tensors_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> tensorsBuilder_;

      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto> getTensorsList() {
        if (tensorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tensors_);
        } else {
          return tensorsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public int getTensorsCount() {
        if (tensorsBuilder_ == null) {
          return tensors_.size();
        } else {
          return tensorsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getTensors(int index) {
        if (tensorsBuilder_ == null) {
          return tensors_.get(index);
        } else {
          return tensorsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public Builder setTensors(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto value) {
        if (tensorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTensorsIsMutable();
          tensors_.set(index, value);
          onChanged();
        } else {
          tensorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public Builder setTensors(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder builderForValue) {
        if (tensorsBuilder_ == null) {
          ensureTensorsIsMutable();
          tensors_.set(index, builderForValue.build());
          onChanged();
        } else {
          tensorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public Builder addTensors(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto value) {
        if (tensorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTensorsIsMutable();
          tensors_.add(value);
          onChanged();
        } else {
          tensorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public Builder addTensors(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto value) {
        if (tensorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTensorsIsMutable();
          tensors_.add(index, value);
          onChanged();
        } else {
          tensorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public Builder addTensors(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder builderForValue) {
        if (tensorsBuilder_ == null) {
          ensureTensorsIsMutable();
          tensors_.add(builderForValue.build());
          onChanged();
        } else {
          tensorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public Builder addTensors(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder builderForValue) {
        if (tensorsBuilder_ == null) {
          ensureTensorsIsMutable();
          tensors_.add(index, builderForValue.build());
          onChanged();
        } else {
          tensorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public Builder addAllTensors(
          java.lang.Iterable<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto> values) {
        if (tensorsBuilder_ == null) {
          ensureTensorsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tensors_);
          onChanged();
        } else {
          tensorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public Builder clearTensors() {
        if (tensorsBuilder_ == null) {
          tensors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          tensorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public Builder removeTensors(int index) {
        if (tensorsBuilder_ == null) {
          ensureTensorsIsMutable();
          tensors_.remove(index);
          onChanged();
        } else {
          tensorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder getTensorsBuilder(
          int index) {
        return getTensorsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder getTensorsOrBuilder(
          int index) {
        if (tensorsBuilder_ == null) {
          return tensors_.get(index);  } else {
          return tensorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> 
           getTensorsOrBuilderList() {
        if (tensorsBuilder_ != null) {
          return tensorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tensors_);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder addTensorsBuilder() {
        return getTensorsFieldBuilder().addBuilder(
            dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance());
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder addTensorsBuilder(
          int index) {
        return getTensorsFieldBuilder().addBuilder(
            index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance());
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensors = 11;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder> 
           getTensorsBuilderList() {
        return getTensorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> 
          getTensorsFieldBuilder() {
        if (tensorsBuilder_ == null) {
          tensorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder>(
                  tensors_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          tensors_ = null;
        }
        return tensorsBuilder_;
      }

      private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef> nets_ =
        java.util.Collections.emptyList();
      private void ensureNetsIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          nets_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef>(nets_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder> netsBuilder_;

      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef> getNetsList() {
        if (netsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(nets_);
        } else {
          return netsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public int getNetsCount() {
        if (netsBuilder_ == null) {
          return nets_.size();
        } else {
          return netsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef getNets(int index) {
        if (netsBuilder_ == null) {
          return nets_.get(index);
        } else {
          return netsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public Builder setNets(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef value) {
        if (netsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNetsIsMutable();
          nets_.set(index, value);
          onChanged();
        } else {
          netsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public Builder setNets(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder builderForValue) {
        if (netsBuilder_ == null) {
          ensureNetsIsMutable();
          nets_.set(index, builderForValue.build());
          onChanged();
        } else {
          netsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public Builder addNets(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef value) {
        if (netsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNetsIsMutable();
          nets_.add(value);
          onChanged();
        } else {
          netsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public Builder addNets(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef value) {
        if (netsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNetsIsMutable();
          nets_.add(index, value);
          onChanged();
        } else {
          netsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public Builder addNets(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder builderForValue) {
        if (netsBuilder_ == null) {
          ensureNetsIsMutable();
          nets_.add(builderForValue.build());
          onChanged();
        } else {
          netsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public Builder addNets(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder builderForValue) {
        if (netsBuilder_ == null) {
          ensureNetsIsMutable();
          nets_.add(index, builderForValue.build());
          onChanged();
        } else {
          netsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public Builder addAllNets(
          java.lang.Iterable<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef> values) {
        if (netsBuilder_ == null) {
          ensureNetsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, nets_);
          onChanged();
        } else {
          netsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public Builder clearNets() {
        if (netsBuilder_ == null) {
          nets_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          netsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public Builder removeNets(int index) {
        if (netsBuilder_ == null) {
          ensureNetsIsMutable();
          nets_.remove(index);
          onChanged();
        } else {
          netsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder getNetsBuilder(
          int index) {
        return getNetsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder getNetsOrBuilder(
          int index) {
        if (netsBuilder_ == null) {
          return nets_.get(index);  } else {
          return netsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder> 
           getNetsOrBuilderList() {
        if (netsBuilder_ != null) {
          return netsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(nets_);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder addNetsBuilder() {
        return getNetsFieldBuilder().addBuilder(
            dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.getDefaultInstance());
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder addNetsBuilder(
          int index) {
        return getNetsFieldBuilder().addBuilder(
            index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.getDefaultInstance());
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef nets = 9;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder> 
           getNetsBuilderList() {
        return getNetsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder> 
          getNetsFieldBuilder() {
        if (netsBuilder_ == null) {
          netsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder>(
                  nets_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          nets_ = null;
        }
        return netsBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Argument>
        PARSER = new com.google.protobuf.AbstractParser<Argument>() {
      public Argument parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Argument(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Argument> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Argument> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DeviceOptionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * [general] Options that need to be carried out before running the execution.
     * optional DeviceType device_type = 1 [ default = CPU ];
     * </pre>
     *
     * <code>optional int32 device_type = 1 [default = 0];</code>
     */
    boolean hasDeviceType();
    /**
     * <pre>
     * [general] Options that need to be carried out before running the execution.
     * optional DeviceType device_type = 1 [ default = CPU ];
     * </pre>
     *
     * <code>optional int32 device_type = 1 [default = 0];</code>
     */
    int getDeviceType();

    /**
     * <pre>
     * [general] Used together with device_type to identify the exact device
     * </pre>
     *
     * <code>optional int32 device_id = 2;</code>
     */
    boolean hasDeviceId();
    /**
     * <pre>
     * [general] Used together with device_type to identify the exact device
     * </pre>
     *
     * <code>optional int32 device_id = 2;</code>
     */
    int getDeviceId();

    /**
     * <pre>
     * [general] The random seed to start the device random number generator with.
     * </pre>
     *
     * <code>optional uint32 random_seed = 3;</code>
     */
    boolean hasRandomSeed();
    /**
     * <pre>
     * [general] The random seed to start the device random number generator with.
     * </pre>
     *
     * <code>optional uint32 random_seed = 3;</code>
     */
    int getRandomSeed();

    /**
     * <pre>
     * [general] What node this op should execute on.
     * Used for net transformation purposes. Must be empty at execution time.
     * </pre>
     *
     * <code>optional string node_name = 4;</code>
     */
    boolean hasNodeName();
    /**
     * <pre>
     * [general] What node this op should execute on.
     * Used for net transformation purposes. Must be empty at execution time.
     * </pre>
     *
     * <code>optional string node_name = 4;</code>
     */
    java.lang.String getNodeName();
    /**
     * <pre>
     * [general] What node this op should execute on.
     * Used for net transformation purposes. Must be empty at execution time.
     * </pre>
     *
     * <code>optional string node_name = 4;</code>
     */
    com.google.protobuf.ByteString
        getNodeNameBytes();

    /**
     * <pre>
     * [CPU and Linux specific] NUMA node id
     * </pre>
     *
     * <code>optional int32 numa_node_id = 5;</code>
     */
    boolean hasNumaNodeId();
    /**
     * <pre>
     * [CPU and Linux specific] NUMA node id
     * </pre>
     *
     * <code>optional int32 numa_node_id = 5;</code>
     */
    int getNumaNodeId();

    /**
     * <pre>
     * [general] Extra information passed, not used at execution time currently.
     * </pre>
     *
     * <code>repeated string extra_info = 6;</code>
     */
    java.util.List<java.lang.String>
        getExtraInfoList();
    /**
     * <pre>
     * [general] Extra information passed, not used at execution time currently.
     * </pre>
     *
     * <code>repeated string extra_info = 6;</code>
     */
    int getExtraInfoCount();
    /**
     * <pre>
     * [general] Extra information passed, not used at execution time currently.
     * </pre>
     *
     * <code>repeated string extra_info = 6;</code>
     */
    java.lang.String getExtraInfo(int index);
    /**
     * <pre>
     * [general] Extra information passed, not used at execution time currently.
     * </pre>
     *
     * <code>repeated string extra_info = 6;</code>
     */
    com.google.protobuf.ByteString
        getExtraInfoBytes(int index);
  }
  /**
   * <pre>
   * Device-specific options. We do not distinguish DeviceOption protos for
   * different DeviceTypes, so currently all devices share the same DeviceOption
   * proto. Fields that are specific to a device type is ignored if the type does
   * not match.
   * Note: if you add fields to the DeviceOption, make sure you add the
   * corresponding changes to IsSameDevice() function in utils/proto_utils.{h,cc}.
   * </pre>
   *
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption}
   */
  public  static final class DeviceOption extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption)
      DeviceOptionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DeviceOption.newBuilder() to construct.
    private DeviceOption(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DeviceOption() {
      deviceType_ = 0;
      deviceId_ = 0;
      randomSeed_ = 0;
      nodeName_ = "";
      numaNodeId_ = 0;
      extraInfo_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DeviceOption(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              deviceType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              deviceId_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              randomSeed_ = input.readUInt32();
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              nodeName_ = bs;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              numaNodeId_ = input.readInt32();
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                extraInfo_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000020;
              }
              extraInfo_.add(bs);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          extraInfo_ = extraInfo_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DeviceOption_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DeviceOption_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder.class);
    }

    private int bitField0_;
    public static final int DEVICE_TYPE_FIELD_NUMBER = 1;
    private int deviceType_;
    /**
     * <pre>
     * [general] Options that need to be carried out before running the execution.
     * optional DeviceType device_type = 1 [ default = CPU ];
     * </pre>
     *
     * <code>optional int32 device_type = 1 [default = 0];</code>
     */
    public boolean hasDeviceType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * [general] Options that need to be carried out before running the execution.
     * optional DeviceType device_type = 1 [ default = CPU ];
     * </pre>
     *
     * <code>optional int32 device_type = 1 [default = 0];</code>
     */
    public int getDeviceType() {
      return deviceType_;
    }

    public static final int DEVICE_ID_FIELD_NUMBER = 2;
    private int deviceId_;
    /**
     * <pre>
     * [general] Used together with device_type to identify the exact device
     * </pre>
     *
     * <code>optional int32 device_id = 2;</code>
     */
    public boolean hasDeviceId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * [general] Used together with device_type to identify the exact device
     * </pre>
     *
     * <code>optional int32 device_id = 2;</code>
     */
    public int getDeviceId() {
      return deviceId_;
    }

    public static final int RANDOM_SEED_FIELD_NUMBER = 3;
    private int randomSeed_;
    /**
     * <pre>
     * [general] The random seed to start the device random number generator with.
     * </pre>
     *
     * <code>optional uint32 random_seed = 3;</code>
     */
    public boolean hasRandomSeed() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * [general] The random seed to start the device random number generator with.
     * </pre>
     *
     * <code>optional uint32 random_seed = 3;</code>
     */
    public int getRandomSeed() {
      return randomSeed_;
    }

    public static final int NODE_NAME_FIELD_NUMBER = 4;
    private volatile java.lang.Object nodeName_;
    /**
     * <pre>
     * [general] What node this op should execute on.
     * Used for net transformation purposes. Must be empty at execution time.
     * </pre>
     *
     * <code>optional string node_name = 4;</code>
     */
    public boolean hasNodeName() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * [general] What node this op should execute on.
     * Used for net transformation purposes. Must be empty at execution time.
     * </pre>
     *
     * <code>optional string node_name = 4;</code>
     */
    public java.lang.String getNodeName() {
      java.lang.Object ref = nodeName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          nodeName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * [general] What node this op should execute on.
     * Used for net transformation purposes. Must be empty at execution time.
     * </pre>
     *
     * <code>optional string node_name = 4;</code>
     */
    public com.google.protobuf.ByteString
        getNodeNameBytes() {
      java.lang.Object ref = nodeName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nodeName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NUMA_NODE_ID_FIELD_NUMBER = 5;
    private int numaNodeId_;
    /**
     * <pre>
     * [CPU and Linux specific] NUMA node id
     * </pre>
     *
     * <code>optional int32 numa_node_id = 5;</code>
     */
    public boolean hasNumaNodeId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * [CPU and Linux specific] NUMA node id
     * </pre>
     *
     * <code>optional int32 numa_node_id = 5;</code>
     */
    public int getNumaNodeId() {
      return numaNodeId_;
    }

    public static final int EXTRA_INFO_FIELD_NUMBER = 6;
    private com.google.protobuf.LazyStringList extraInfo_;
    /**
     * <pre>
     * [general] Extra information passed, not used at execution time currently.
     * </pre>
     *
     * <code>repeated string extra_info = 6;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getExtraInfoList() {
      return extraInfo_;
    }
    /**
     * <pre>
     * [general] Extra information passed, not used at execution time currently.
     * </pre>
     *
     * <code>repeated string extra_info = 6;</code>
     */
    public int getExtraInfoCount() {
      return extraInfo_.size();
    }
    /**
     * <pre>
     * [general] Extra information passed, not used at execution time currently.
     * </pre>
     *
     * <code>repeated string extra_info = 6;</code>
     */
    public java.lang.String getExtraInfo(int index) {
      return extraInfo_.get(index);
    }
    /**
     * <pre>
     * [general] Extra information passed, not used at execution time currently.
     * </pre>
     *
     * <code>repeated string extra_info = 6;</code>
     */
    public com.google.protobuf.ByteString
        getExtraInfoBytes(int index) {
      return extraInfo_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, deviceType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, deviceId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, randomSeed_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, nodeName_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, numaNodeId_);
      }
      for (int i = 0; i < extraInfo_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, extraInfo_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, deviceType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, deviceId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, randomSeed_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, nodeName_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, numaNodeId_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < extraInfo_.size(); i++) {
          dataSize += computeStringSizeNoTag(extraInfo_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getExtraInfoList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption) obj;

      boolean result = true;
      result = result && (hasDeviceType() == other.hasDeviceType());
      if (hasDeviceType()) {
        result = result && (getDeviceType()
            == other.getDeviceType());
      }
      result = result && (hasDeviceId() == other.hasDeviceId());
      if (hasDeviceId()) {
        result = result && (getDeviceId()
            == other.getDeviceId());
      }
      result = result && (hasRandomSeed() == other.hasRandomSeed());
      if (hasRandomSeed()) {
        result = result && (getRandomSeed()
            == other.getRandomSeed());
      }
      result = result && (hasNodeName() == other.hasNodeName());
      if (hasNodeName()) {
        result = result && getNodeName()
            .equals(other.getNodeName());
      }
      result = result && (hasNumaNodeId() == other.hasNumaNodeId());
      if (hasNumaNodeId()) {
        result = result && (getNumaNodeId()
            == other.getNumaNodeId());
      }
      result = result && getExtraInfoList()
          .equals(other.getExtraInfoList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDeviceType()) {
        hash = (37 * hash) + DEVICE_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getDeviceType();
      }
      if (hasDeviceId()) {
        hash = (37 * hash) + DEVICE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getDeviceId();
      }
      if (hasRandomSeed()) {
        hash = (37 * hash) + RANDOM_SEED_FIELD_NUMBER;
        hash = (53 * hash) + getRandomSeed();
      }
      if (hasNodeName()) {
        hash = (37 * hash) + NODE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getNodeName().hashCode();
      }
      if (hasNumaNodeId()) {
        hash = (37 * hash) + NUMA_NODE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getNumaNodeId();
      }
      if (getExtraInfoCount() > 0) {
        hash = (37 * hash) + EXTRA_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getExtraInfoList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Device-specific options. We do not distinguish DeviceOption protos for
     * different DeviceTypes, so currently all devices share the same DeviceOption
     * proto. Fields that are specific to a device type is ignored if the type does
     * not match.
     * Note: if you add fields to the DeviceOption, make sure you add the
     * corresponding changes to IsSameDevice() function in utils/proto_utils.{h,cc}.
     * </pre>
     *
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DeviceOption_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DeviceOption_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        deviceType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        deviceId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        randomSeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        nodeName_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        numaNodeId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        extraInfo_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DeviceOption_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.deviceType_ = deviceType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.deviceId_ = deviceId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.randomSeed_ = randomSeed_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.nodeName_ = nodeName_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.numaNodeId_ = numaNodeId_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          extraInfo_ = extraInfo_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.extraInfo_ = extraInfo_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance()) return this;
        if (other.hasDeviceType()) {
          setDeviceType(other.getDeviceType());
        }
        if (other.hasDeviceId()) {
          setDeviceId(other.getDeviceId());
        }
        if (other.hasRandomSeed()) {
          setRandomSeed(other.getRandomSeed());
        }
        if (other.hasNodeName()) {
          bitField0_ |= 0x00000008;
          nodeName_ = other.nodeName_;
          onChanged();
        }
        if (other.hasNumaNodeId()) {
          setNumaNodeId(other.getNumaNodeId());
        }
        if (!other.extraInfo_.isEmpty()) {
          if (extraInfo_.isEmpty()) {
            extraInfo_ = other.extraInfo_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureExtraInfoIsMutable();
            extraInfo_.addAll(other.extraInfo_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int deviceType_ ;
      /**
       * <pre>
       * [general] Options that need to be carried out before running the execution.
       * optional DeviceType device_type = 1 [ default = CPU ];
       * </pre>
       *
       * <code>optional int32 device_type = 1 [default = 0];</code>
       */
      public boolean hasDeviceType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * [general] Options that need to be carried out before running the execution.
       * optional DeviceType device_type = 1 [ default = CPU ];
       * </pre>
       *
       * <code>optional int32 device_type = 1 [default = 0];</code>
       */
      public int getDeviceType() {
        return deviceType_;
      }
      /**
       * <pre>
       * [general] Options that need to be carried out before running the execution.
       * optional DeviceType device_type = 1 [ default = CPU ];
       * </pre>
       *
       * <code>optional int32 device_type = 1 [default = 0];</code>
       */
      public Builder setDeviceType(int value) {
        bitField0_ |= 0x00000001;
        deviceType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [general] Options that need to be carried out before running the execution.
       * optional DeviceType device_type = 1 [ default = CPU ];
       * </pre>
       *
       * <code>optional int32 device_type = 1 [default = 0];</code>
       */
      public Builder clearDeviceType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deviceType_ = 0;
        onChanged();
        return this;
      }

      private int deviceId_ ;
      /**
       * <pre>
       * [general] Used together with device_type to identify the exact device
       * </pre>
       *
       * <code>optional int32 device_id = 2;</code>
       */
      public boolean hasDeviceId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * [general] Used together with device_type to identify the exact device
       * </pre>
       *
       * <code>optional int32 device_id = 2;</code>
       */
      public int getDeviceId() {
        return deviceId_;
      }
      /**
       * <pre>
       * [general] Used together with device_type to identify the exact device
       * </pre>
       *
       * <code>optional int32 device_id = 2;</code>
       */
      public Builder setDeviceId(int value) {
        bitField0_ |= 0x00000002;
        deviceId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [general] Used together with device_type to identify the exact device
       * </pre>
       *
       * <code>optional int32 device_id = 2;</code>
       */
      public Builder clearDeviceId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        deviceId_ = 0;
        onChanged();
        return this;
      }

      private int randomSeed_ ;
      /**
       * <pre>
       * [general] The random seed to start the device random number generator with.
       * </pre>
       *
       * <code>optional uint32 random_seed = 3;</code>
       */
      public boolean hasRandomSeed() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * [general] The random seed to start the device random number generator with.
       * </pre>
       *
       * <code>optional uint32 random_seed = 3;</code>
       */
      public int getRandomSeed() {
        return randomSeed_;
      }
      /**
       * <pre>
       * [general] The random seed to start the device random number generator with.
       * </pre>
       *
       * <code>optional uint32 random_seed = 3;</code>
       */
      public Builder setRandomSeed(int value) {
        bitField0_ |= 0x00000004;
        randomSeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [general] The random seed to start the device random number generator with.
       * </pre>
       *
       * <code>optional uint32 random_seed = 3;</code>
       */
      public Builder clearRandomSeed() {
        bitField0_ = (bitField0_ & ~0x00000004);
        randomSeed_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object nodeName_ = "";
      /**
       * <pre>
       * [general] What node this op should execute on.
       * Used for net transformation purposes. Must be empty at execution time.
       * </pre>
       *
       * <code>optional string node_name = 4;</code>
       */
      public boolean hasNodeName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * [general] What node this op should execute on.
       * Used for net transformation purposes. Must be empty at execution time.
       * </pre>
       *
       * <code>optional string node_name = 4;</code>
       */
      public java.lang.String getNodeName() {
        java.lang.Object ref = nodeName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            nodeName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * [general] What node this op should execute on.
       * Used for net transformation purposes. Must be empty at execution time.
       * </pre>
       *
       * <code>optional string node_name = 4;</code>
       */
      public com.google.protobuf.ByteString
          getNodeNameBytes() {
        java.lang.Object ref = nodeName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          nodeName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * [general] What node this op should execute on.
       * Used for net transformation purposes. Must be empty at execution time.
       * </pre>
       *
       * <code>optional string node_name = 4;</code>
       */
      public Builder setNodeName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        nodeName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [general] What node this op should execute on.
       * Used for net transformation purposes. Must be empty at execution time.
       * </pre>
       *
       * <code>optional string node_name = 4;</code>
       */
      public Builder clearNodeName() {
        bitField0_ = (bitField0_ & ~0x00000008);
        nodeName_ = getDefaultInstance().getNodeName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [general] What node this op should execute on.
       * Used for net transformation purposes. Must be empty at execution time.
       * </pre>
       *
       * <code>optional string node_name = 4;</code>
       */
      public Builder setNodeNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        nodeName_ = value;
        onChanged();
        return this;
      }

      private int numaNodeId_ ;
      /**
       * <pre>
       * [CPU and Linux specific] NUMA node id
       * </pre>
       *
       * <code>optional int32 numa_node_id = 5;</code>
       */
      public boolean hasNumaNodeId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * [CPU and Linux specific] NUMA node id
       * </pre>
       *
       * <code>optional int32 numa_node_id = 5;</code>
       */
      public int getNumaNodeId() {
        return numaNodeId_;
      }
      /**
       * <pre>
       * [CPU and Linux specific] NUMA node id
       * </pre>
       *
       * <code>optional int32 numa_node_id = 5;</code>
       */
      public Builder setNumaNodeId(int value) {
        bitField0_ |= 0x00000010;
        numaNodeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [CPU and Linux specific] NUMA node id
       * </pre>
       *
       * <code>optional int32 numa_node_id = 5;</code>
       */
      public Builder clearNumaNodeId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        numaNodeId_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList extraInfo_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureExtraInfoIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          extraInfo_ = new com.google.protobuf.LazyStringArrayList(extraInfo_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <pre>
       * [general] Extra information passed, not used at execution time currently.
       * </pre>
       *
       * <code>repeated string extra_info = 6;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getExtraInfoList() {
        return extraInfo_.getUnmodifiableView();
      }
      /**
       * <pre>
       * [general] Extra information passed, not used at execution time currently.
       * </pre>
       *
       * <code>repeated string extra_info = 6;</code>
       */
      public int getExtraInfoCount() {
        return extraInfo_.size();
      }
      /**
       * <pre>
       * [general] Extra information passed, not used at execution time currently.
       * </pre>
       *
       * <code>repeated string extra_info = 6;</code>
       */
      public java.lang.String getExtraInfo(int index) {
        return extraInfo_.get(index);
      }
      /**
       * <pre>
       * [general] Extra information passed, not used at execution time currently.
       * </pre>
       *
       * <code>repeated string extra_info = 6;</code>
       */
      public com.google.protobuf.ByteString
          getExtraInfoBytes(int index) {
        return extraInfo_.getByteString(index);
      }
      /**
       * <pre>
       * [general] Extra information passed, not used at execution time currently.
       * </pre>
       *
       * <code>repeated string extra_info = 6;</code>
       */
      public Builder setExtraInfo(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureExtraInfoIsMutable();
        extraInfo_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [general] Extra information passed, not used at execution time currently.
       * </pre>
       *
       * <code>repeated string extra_info = 6;</code>
       */
      public Builder addExtraInfo(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureExtraInfoIsMutable();
        extraInfo_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [general] Extra information passed, not used at execution time currently.
       * </pre>
       *
       * <code>repeated string extra_info = 6;</code>
       */
      public Builder addAllExtraInfo(
          java.lang.Iterable<java.lang.String> values) {
        ensureExtraInfoIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, extraInfo_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [general] Extra information passed, not used at execution time currently.
       * </pre>
       *
       * <code>repeated string extra_info = 6;</code>
       */
      public Builder clearExtraInfo() {
        extraInfo_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * [general] Extra information passed, not used at execution time currently.
       * </pre>
       *
       * <code>repeated string extra_info = 6;</code>
       */
      public Builder addExtraInfoBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureExtraInfoIsMutable();
        extraInfo_.add(value);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<DeviceOption>
        PARSER = new com.google.protobuf.AbstractParser<DeviceOption>() {
      public DeviceOption parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DeviceOption(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DeviceOption> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DeviceOption> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OperatorDefOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * the name of the input blobs
     * </pre>
     *
     * <code>repeated string input = 1;</code>
     */
    java.util.List<java.lang.String>
        getInputList();
    /**
     * <pre>
     * the name of the input blobs
     * </pre>
     *
     * <code>repeated string input = 1;</code>
     */
    int getInputCount();
    /**
     * <pre>
     * the name of the input blobs
     * </pre>
     *
     * <code>repeated string input = 1;</code>
     */
    java.lang.String getInput(int index);
    /**
     * <pre>
     * the name of the input blobs
     * </pre>
     *
     * <code>repeated string input = 1;</code>
     */
    com.google.protobuf.ByteString
        getInputBytes(int index);

    /**
     * <pre>
     * the name of output top blobs
     * </pre>
     *
     * <code>repeated string output = 2;</code>
     */
    java.util.List<java.lang.String>
        getOutputList();
    /**
     * <pre>
     * the name of output top blobs
     * </pre>
     *
     * <code>repeated string output = 2;</code>
     */
    int getOutputCount();
    /**
     * <pre>
     * the name of output top blobs
     * </pre>
     *
     * <code>repeated string output = 2;</code>
     */
    java.lang.String getOutput(int index);
    /**
     * <pre>
     * the name of output top blobs
     * </pre>
     *
     * <code>repeated string output = 2;</code>
     */
    com.google.protobuf.ByteString
        getOutputBytes(int index);

    /**
     * <pre>
     * the operator name. This is optional.
     * </pre>
     *
     * <code>optional string name = 3;</code>
     */
    boolean hasName();
    /**
     * <pre>
     * the operator name. This is optional.
     * </pre>
     *
     * <code>optional string name = 3;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * the operator name. This is optional.
     * </pre>
     *
     * <code>optional string name = 3;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * the operator type. This is needed to create the object from the operator
     * registry.
     * </pre>
     *
     * <code>optional string type = 4;</code>
     */
    boolean hasType();
    /**
     * <pre>
     * the operator type. This is needed to create the object from the operator
     * registry.
     * </pre>
     *
     * <code>optional string type = 4;</code>
     */
    java.lang.String getType();
    /**
     * <pre>
     * the operator type. This is needed to create the object from the operator
     * registry.
     * </pre>
     *
     * <code>optional string type = 4;</code>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <pre>
     * arg is for the argument defined in operator schema
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
     */
    java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument> 
        getArgList();
    /**
     * <pre>
     * arg is for the argument defined in operator schema
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument getArg(int index);
    /**
     * <pre>
     * arg is for the argument defined in operator schema
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
     */
    int getArgCount();
    /**
     * <pre>
     * arg is for the argument defined in operator schema
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
     */
    java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder> 
        getArgOrBuilderList();
    /**
     * <pre>
     * arg is for the argument defined in operator schema
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder getArgOrBuilder(
        int index);

    /**
     * <pre>
     * The device option that the operator should run under.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
     */
    boolean hasDeviceOption();
    /**
     * <pre>
     * The device option that the operator should run under.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption getDeviceOption();
    /**
     * <pre>
     * The device option that the operator should run under.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder getDeviceOptionOrBuilder();

    /**
     * <pre>
     * Optionally, one can specify an engine when there are multiple
     * implementations available simultaneously for one device type.
     * If one specifies an engine but that engine does not exist in the compiled
     * Caffe2 binary, Caffe2 will fall back to the default engine of that device
     * type.
     * </pre>
     *
     * <code>optional string engine = 7;</code>
     */
    boolean hasEngine();
    /**
     * <pre>
     * Optionally, one can specify an engine when there are multiple
     * implementations available simultaneously for one device type.
     * If one specifies an engine but that engine does not exist in the compiled
     * Caffe2 binary, Caffe2 will fall back to the default engine of that device
     * type.
     * </pre>
     *
     * <code>optional string engine = 7;</code>
     */
    java.lang.String getEngine();
    /**
     * <pre>
     * Optionally, one can specify an engine when there are multiple
     * implementations available simultaneously for one device type.
     * If one specifies an engine but that engine does not exist in the compiled
     * Caffe2 binary, Caffe2 will fall back to the default engine of that device
     * type.
     * </pre>
     *
     * <code>optional string engine = 7;</code>
     */
    com.google.protobuf.ByteString
        getEngineBytes();

    /**
     * <pre>
     * Additional 'fake' inputs used for expressing control dependencies
     * in the operator graph. This can be used to ensure that an
     * operator does not run until another operator is ready, for e.g.
     * scheduling control. These are not passed as actual inputs to the
     * Operator implementation, and are only used by the Net class for
     * scheduling purposes.
     * </pre>
     *
     * <code>repeated string control_input = 8;</code>
     */
    java.util.List<java.lang.String>
        getControlInputList();
    /**
     * <pre>
     * Additional 'fake' inputs used for expressing control dependencies
     * in the operator graph. This can be used to ensure that an
     * operator does not run until another operator is ready, for e.g.
     * scheduling control. These are not passed as actual inputs to the
     * Operator implementation, and are only used by the Net class for
     * scheduling purposes.
     * </pre>
     *
     * <code>repeated string control_input = 8;</code>
     */
    int getControlInputCount();
    /**
     * <pre>
     * Additional 'fake' inputs used for expressing control dependencies
     * in the operator graph. This can be used to ensure that an
     * operator does not run until another operator is ready, for e.g.
     * scheduling control. These are not passed as actual inputs to the
     * Operator implementation, and are only used by the Net class for
     * scheduling purposes.
     * </pre>
     *
     * <code>repeated string control_input = 8;</code>
     */
    java.lang.String getControlInput(int index);
    /**
     * <pre>
     * Additional 'fake' inputs used for expressing control dependencies
     * in the operator graph. This can be used to ensure that an
     * operator does not run until another operator is ready, for e.g.
     * scheduling control. These are not passed as actual inputs to the
     * Operator implementation, and are only used by the Net class for
     * scheduling purposes.
     * </pre>
     *
     * <code>repeated string control_input = 8;</code>
     */
    com.google.protobuf.ByteString
        getControlInputBytes(int index);

    /**
     * <pre>
     * is_gradient_op argument is only used as a hint in shape inference
     * and has no runtime significance
     * </pre>
     *
     * <code>optional bool is_gradient_op = 9 [default = false];</code>
     */
    boolean hasIsGradientOp();
    /**
     * <pre>
     * is_gradient_op argument is only used as a hint in shape inference
     * and has no runtime significance
     * </pre>
     *
     * <code>optional bool is_gradient_op = 9 [default = false];</code>
     */
    boolean getIsGradientOp();

    /**
     * <pre>
     * debug information associated with the construction of the operator.
     * This is an optional string with no assumed characteristics as
     * operators can be constructed in any language.
     * </pre>
     *
     * <code>optional string debug_info = 10;</code>
     */
    boolean hasDebugInfo();
    /**
     * <pre>
     * debug information associated with the construction of the operator.
     * This is an optional string with no assumed characteristics as
     * operators can be constructed in any language.
     * </pre>
     *
     * <code>optional string debug_info = 10;</code>
     */
    java.lang.String getDebugInfo();
    /**
     * <pre>
     * debug information associated with the construction of the operator.
     * This is an optional string with no assumed characteristics as
     * operators can be constructed in any language.
     * </pre>
     *
     * <code>optional string debug_info = 10;</code>
     */
    com.google.protobuf.ByteString
        getDebugInfoBytes();

    /**
     * <pre>
     * the domain of the operator to help runtime distinguish which operator
     * library this OperatorDef refers to. For example, both caffe2 and aten
     * has `Add` operator, with domain, we can easily decide which operator
     * to execute. to support multiple operator libs, we use domain to
     * distinguish which operator lib we refer to:
     *   - "caffe2" means this uses Caffe2 operator library
     *   - "aten" means this uses ATen operator library
     *   - "c10" is for the fused library
     *   - if the domain is missing or empty, we use "caffe2", this is for
     *     legacy models, new serializer should always export an OperatorDef
     *     with domain and op_version
     * </pre>
     *
     * <code>optional string domain = 11;</code>
     */
    boolean hasDomain();
    /**
     * <pre>
     * the domain of the operator to help runtime distinguish which operator
     * library this OperatorDef refers to. For example, both caffe2 and aten
     * has `Add` operator, with domain, we can easily decide which operator
     * to execute. to support multiple operator libs, we use domain to
     * distinguish which operator lib we refer to:
     *   - "caffe2" means this uses Caffe2 operator library
     *   - "aten" means this uses ATen operator library
     *   - "c10" is for the fused library
     *   - if the domain is missing or empty, we use "caffe2", this is for
     *     legacy models, new serializer should always export an OperatorDef
     *     with domain and op_version
     * </pre>
     *
     * <code>optional string domain = 11;</code>
     */
    java.lang.String getDomain();
    /**
     * <pre>
     * the domain of the operator to help runtime distinguish which operator
     * library this OperatorDef refers to. For example, both caffe2 and aten
     * has `Add` operator, with domain, we can easily decide which operator
     * to execute. to support multiple operator libs, we use domain to
     * distinguish which operator lib we refer to:
     *   - "caffe2" means this uses Caffe2 operator library
     *   - "aten" means this uses ATen operator library
     *   - "c10" is for the fused library
     *   - if the domain is missing or empty, we use "caffe2", this is for
     *     legacy models, new serializer should always export an OperatorDef
     *     with domain and op_version
     * </pre>
     *
     * <code>optional string domain = 11;</code>
     */
    com.google.protobuf.ByteString
        getDomainBytes();

    /**
     * <pre>
     * each operator is has its own version number.
     * operator version information
     * each time, we change the API or semantics of the operator,
     * we bump the version for the operator.
     * the runtime system should check the op_version of each OperatorDef
     * and decide it should reject or accept the model
     * </pre>
     *
     * <code>optional int64 op_version = 12;</code>
     */
    boolean hasOpVersion();
    /**
     * <pre>
     * each operator is has its own version number.
     * operator version information
     * each time, we change the API or semantics of the operator,
     * we bump the version for the operator.
     * the runtime system should check the op_version of each OperatorDef
     * and decide it should reject or accept the model
     * </pre>
     *
     * <code>optional int64 op_version = 12;</code>
     */
    long getOpVersion();
  }
  /**
   * <pre>
   * Operator Definition.
   * </pre>
   *
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef}
   */
  public  static final class OperatorDef extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef)
      OperatorDefOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OperatorDef.newBuilder() to construct.
    private OperatorDef(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OperatorDef() {
      input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      output_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      name_ = "";
      type_ = "";
      arg_ = java.util.Collections.emptyList();
      engine_ = "";
      controlInput_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      isGradientOp_ = false;
      debugInfo_ = "";
      domain_ = "";
      opVersion_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private OperatorDef(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                input_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              input_.add(bs);
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                output_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              output_.add(bs);
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              type_ = bs;
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                arg_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument>();
                mutable_bitField0_ |= 0x00000010;
              }
              arg_.add(
                  input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = deviceOption_.toBuilder();
              }
              deviceOption_ = input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(deviceOption_);
                deviceOption_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              engine_ = bs;
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                controlInput_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000080;
              }
              controlInput_.add(bs);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              isGradientOp_ = input.readBool();
              break;
            }
            case 82: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              debugInfo_ = bs;
              break;
            }
            case 90: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              domain_ = bs;
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              opVersion_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          input_ = input_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          output_ = output_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          arg_ = java.util.Collections.unmodifiableList(arg_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          controlInput_ = controlInput_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_OperatorDef_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_OperatorDef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.Builder.class);
    }

    private int bitField0_;
    public static final int INPUT_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList input_;
    /**
     * <pre>
     * the name of the input blobs
     * </pre>
     *
     * <code>repeated string input = 1;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getInputList() {
      return input_;
    }
    /**
     * <pre>
     * the name of the input blobs
     * </pre>
     *
     * <code>repeated string input = 1;</code>
     */
    public int getInputCount() {
      return input_.size();
    }
    /**
     * <pre>
     * the name of the input blobs
     * </pre>
     *
     * <code>repeated string input = 1;</code>
     */
    public java.lang.String getInput(int index) {
      return input_.get(index);
    }
    /**
     * <pre>
     * the name of the input blobs
     * </pre>
     *
     * <code>repeated string input = 1;</code>
     */
    public com.google.protobuf.ByteString
        getInputBytes(int index) {
      return input_.getByteString(index);
    }

    public static final int OUTPUT_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList output_;
    /**
     * <pre>
     * the name of output top blobs
     * </pre>
     *
     * <code>repeated string output = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getOutputList() {
      return output_;
    }
    /**
     * <pre>
     * the name of output top blobs
     * </pre>
     *
     * <code>repeated string output = 2;</code>
     */
    public int getOutputCount() {
      return output_.size();
    }
    /**
     * <pre>
     * the name of output top blobs
     * </pre>
     *
     * <code>repeated string output = 2;</code>
     */
    public java.lang.String getOutput(int index) {
      return output_.get(index);
    }
    /**
     * <pre>
     * the name of output top blobs
     * </pre>
     *
     * <code>repeated string output = 2;</code>
     */
    public com.google.protobuf.ByteString
        getOutputBytes(int index) {
      return output_.getByteString(index);
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * the operator name. This is optional.
     * </pre>
     *
     * <code>optional string name = 3;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * the operator name. This is optional.
     * </pre>
     *
     * <code>optional string name = 3;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * the operator name. This is optional.
     * </pre>
     *
     * <code>optional string name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 4;
    private volatile java.lang.Object type_;
    /**
     * <pre>
     * the operator type. This is needed to create the object from the operator
     * registry.
     * </pre>
     *
     * <code>optional string type = 4;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * the operator type. This is needed to create the object from the operator
     * registry.
     * </pre>
     *
     * <code>optional string type = 4;</code>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * the operator type. This is needed to create the object from the operator
     * registry.
     * </pre>
     *
     * <code>optional string type = 4;</code>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ARG_FIELD_NUMBER = 5;
    private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument> arg_;
    /**
     * <pre>
     * arg is for the argument defined in operator schema
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
     */
    public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument> getArgList() {
      return arg_;
    }
    /**
     * <pre>
     * arg is for the argument defined in operator schema
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
     */
    public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder> 
        getArgOrBuilderList() {
      return arg_;
    }
    /**
     * <pre>
     * arg is for the argument defined in operator schema
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
     */
    public int getArgCount() {
      return arg_.size();
    }
    /**
     * <pre>
     * arg is for the argument defined in operator schema
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument getArg(int index) {
      return arg_.get(index);
    }
    /**
     * <pre>
     * arg is for the argument defined in operator schema
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder getArgOrBuilder(
        int index) {
      return arg_.get(index);
    }

    public static final int DEVICE_OPTION_FIELD_NUMBER = 6;
    private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption deviceOption_;
    /**
     * <pre>
     * The device option that the operator should run under.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
     */
    public boolean hasDeviceOption() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * The device option that the operator should run under.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption getDeviceOption() {
      return deviceOption_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance() : deviceOption_;
    }
    /**
     * <pre>
     * The device option that the operator should run under.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder getDeviceOptionOrBuilder() {
      return deviceOption_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance() : deviceOption_;
    }

    public static final int ENGINE_FIELD_NUMBER = 7;
    private volatile java.lang.Object engine_;
    /**
     * <pre>
     * Optionally, one can specify an engine when there are multiple
     * implementations available simultaneously for one device type.
     * If one specifies an engine but that engine does not exist in the compiled
     * Caffe2 binary, Caffe2 will fall back to the default engine of that device
     * type.
     * </pre>
     *
     * <code>optional string engine = 7;</code>
     */
    public boolean hasEngine() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Optionally, one can specify an engine when there are multiple
     * implementations available simultaneously for one device type.
     * If one specifies an engine but that engine does not exist in the compiled
     * Caffe2 binary, Caffe2 will fall back to the default engine of that device
     * type.
     * </pre>
     *
     * <code>optional string engine = 7;</code>
     */
    public java.lang.String getEngine() {
      java.lang.Object ref = engine_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          engine_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Optionally, one can specify an engine when there are multiple
     * implementations available simultaneously for one device type.
     * If one specifies an engine but that engine does not exist in the compiled
     * Caffe2 binary, Caffe2 will fall back to the default engine of that device
     * type.
     * </pre>
     *
     * <code>optional string engine = 7;</code>
     */
    public com.google.protobuf.ByteString
        getEngineBytes() {
      java.lang.Object ref = engine_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        engine_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CONTROL_INPUT_FIELD_NUMBER = 8;
    private com.google.protobuf.LazyStringList controlInput_;
    /**
     * <pre>
     * Additional 'fake' inputs used for expressing control dependencies
     * in the operator graph. This can be used to ensure that an
     * operator does not run until another operator is ready, for e.g.
     * scheduling control. These are not passed as actual inputs to the
     * Operator implementation, and are only used by the Net class for
     * scheduling purposes.
     * </pre>
     *
     * <code>repeated string control_input = 8;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getControlInputList() {
      return controlInput_;
    }
    /**
     * <pre>
     * Additional 'fake' inputs used for expressing control dependencies
     * in the operator graph. This can be used to ensure that an
     * operator does not run until another operator is ready, for e.g.
     * scheduling control. These are not passed as actual inputs to the
     * Operator implementation, and are only used by the Net class for
     * scheduling purposes.
     * </pre>
     *
     * <code>repeated string control_input = 8;</code>
     */
    public int getControlInputCount() {
      return controlInput_.size();
    }
    /**
     * <pre>
     * Additional 'fake' inputs used for expressing control dependencies
     * in the operator graph. This can be used to ensure that an
     * operator does not run until another operator is ready, for e.g.
     * scheduling control. These are not passed as actual inputs to the
     * Operator implementation, and are only used by the Net class for
     * scheduling purposes.
     * </pre>
     *
     * <code>repeated string control_input = 8;</code>
     */
    public java.lang.String getControlInput(int index) {
      return controlInput_.get(index);
    }
    /**
     * <pre>
     * Additional 'fake' inputs used for expressing control dependencies
     * in the operator graph. This can be used to ensure that an
     * operator does not run until another operator is ready, for e.g.
     * scheduling control. These are not passed as actual inputs to the
     * Operator implementation, and are only used by the Net class for
     * scheduling purposes.
     * </pre>
     *
     * <code>repeated string control_input = 8;</code>
     */
    public com.google.protobuf.ByteString
        getControlInputBytes(int index) {
      return controlInput_.getByteString(index);
    }

    public static final int IS_GRADIENT_OP_FIELD_NUMBER = 9;
    private boolean isGradientOp_;
    /**
     * <pre>
     * is_gradient_op argument is only used as a hint in shape inference
     * and has no runtime significance
     * </pre>
     *
     * <code>optional bool is_gradient_op = 9 [default = false];</code>
     */
    public boolean hasIsGradientOp() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * is_gradient_op argument is only used as a hint in shape inference
     * and has no runtime significance
     * </pre>
     *
     * <code>optional bool is_gradient_op = 9 [default = false];</code>
     */
    public boolean getIsGradientOp() {
      return isGradientOp_;
    }

    public static final int DEBUG_INFO_FIELD_NUMBER = 10;
    private volatile java.lang.Object debugInfo_;
    /**
     * <pre>
     * debug information associated with the construction of the operator.
     * This is an optional string with no assumed characteristics as
     * operators can be constructed in any language.
     * </pre>
     *
     * <code>optional string debug_info = 10;</code>
     */
    public boolean hasDebugInfo() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * debug information associated with the construction of the operator.
     * This is an optional string with no assumed characteristics as
     * operators can be constructed in any language.
     * </pre>
     *
     * <code>optional string debug_info = 10;</code>
     */
    public java.lang.String getDebugInfo() {
      java.lang.Object ref = debugInfo_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          debugInfo_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * debug information associated with the construction of the operator.
     * This is an optional string with no assumed characteristics as
     * operators can be constructed in any language.
     * </pre>
     *
     * <code>optional string debug_info = 10;</code>
     */
    public com.google.protobuf.ByteString
        getDebugInfoBytes() {
      java.lang.Object ref = debugInfo_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        debugInfo_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DOMAIN_FIELD_NUMBER = 11;
    private volatile java.lang.Object domain_;
    /**
     * <pre>
     * the domain of the operator to help runtime distinguish which operator
     * library this OperatorDef refers to. For example, both caffe2 and aten
     * has `Add` operator, with domain, we can easily decide which operator
     * to execute. to support multiple operator libs, we use domain to
     * distinguish which operator lib we refer to:
     *   - "caffe2" means this uses Caffe2 operator library
     *   - "aten" means this uses ATen operator library
     *   - "c10" is for the fused library
     *   - if the domain is missing or empty, we use "caffe2", this is for
     *     legacy models, new serializer should always export an OperatorDef
     *     with domain and op_version
     * </pre>
     *
     * <code>optional string domain = 11;</code>
     */
    public boolean hasDomain() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * the domain of the operator to help runtime distinguish which operator
     * library this OperatorDef refers to. For example, both caffe2 and aten
     * has `Add` operator, with domain, we can easily decide which operator
     * to execute. to support multiple operator libs, we use domain to
     * distinguish which operator lib we refer to:
     *   - "caffe2" means this uses Caffe2 operator library
     *   - "aten" means this uses ATen operator library
     *   - "c10" is for the fused library
     *   - if the domain is missing or empty, we use "caffe2", this is for
     *     legacy models, new serializer should always export an OperatorDef
     *     with domain and op_version
     * </pre>
     *
     * <code>optional string domain = 11;</code>
     */
    public java.lang.String getDomain() {
      java.lang.Object ref = domain_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          domain_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * the domain of the operator to help runtime distinguish which operator
     * library this OperatorDef refers to. For example, both caffe2 and aten
     * has `Add` operator, with domain, we can easily decide which operator
     * to execute. to support multiple operator libs, we use domain to
     * distinguish which operator lib we refer to:
     *   - "caffe2" means this uses Caffe2 operator library
     *   - "aten" means this uses ATen operator library
     *   - "c10" is for the fused library
     *   - if the domain is missing or empty, we use "caffe2", this is for
     *     legacy models, new serializer should always export an OperatorDef
     *     with domain and op_version
     * </pre>
     *
     * <code>optional string domain = 11;</code>
     */
    public com.google.protobuf.ByteString
        getDomainBytes() {
      java.lang.Object ref = domain_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        domain_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OP_VERSION_FIELD_NUMBER = 12;
    private long opVersion_;
    /**
     * <pre>
     * each operator is has its own version number.
     * operator version information
     * each time, we change the API or semantics of the operator,
     * we bump the version for the operator.
     * the runtime system should check the op_version of each OperatorDef
     * and decide it should reject or accept the model
     * </pre>
     *
     * <code>optional int64 op_version = 12;</code>
     */
    public boolean hasOpVersion() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * each operator is has its own version number.
     * operator version information
     * each time, we change the API or semantics of the operator,
     * we bump the version for the operator.
     * the runtime system should check the op_version of each OperatorDef
     * and decide it should reject or accept the model
     * </pre>
     *
     * <code>optional int64 op_version = 12;</code>
     */
    public long getOpVersion() {
      return opVersion_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getArgCount(); i++) {
        if (!getArg(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < input_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, input_.getRaw(i));
      }
      for (int i = 0; i < output_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, output_.getRaw(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, type_);
      }
      for (int i = 0; i < arg_.size(); i++) {
        output.writeMessage(5, arg_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(6, getDeviceOption());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, engine_);
      }
      for (int i = 0; i < controlInput_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, controlInput_.getRaw(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(9, isGradientOp_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 10, debugInfo_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 11, domain_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt64(12, opVersion_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < input_.size(); i++) {
          dataSize += computeStringSizeNoTag(input_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getInputList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < output_.size(); i++) {
          dataSize += computeStringSizeNoTag(output_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getOutputList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, type_);
      }
      for (int i = 0; i < arg_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, arg_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getDeviceOption());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, engine_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < controlInput_.size(); i++) {
          dataSize += computeStringSizeNoTag(controlInput_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getControlInputList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, isGradientOp_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, debugInfo_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, domain_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(12, opVersion_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef) obj;

      boolean result = true;
      result = result && getInputList()
          .equals(other.getInputList());
      result = result && getOutputList()
          .equals(other.getOutputList());
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result && getType()
            .equals(other.getType());
      }
      result = result && getArgList()
          .equals(other.getArgList());
      result = result && (hasDeviceOption() == other.hasDeviceOption());
      if (hasDeviceOption()) {
        result = result && getDeviceOption()
            .equals(other.getDeviceOption());
      }
      result = result && (hasEngine() == other.hasEngine());
      if (hasEngine()) {
        result = result && getEngine()
            .equals(other.getEngine());
      }
      result = result && getControlInputList()
          .equals(other.getControlInputList());
      result = result && (hasIsGradientOp() == other.hasIsGradientOp());
      if (hasIsGradientOp()) {
        result = result && (getIsGradientOp()
            == other.getIsGradientOp());
      }
      result = result && (hasDebugInfo() == other.hasDebugInfo());
      if (hasDebugInfo()) {
        result = result && getDebugInfo()
            .equals(other.getDebugInfo());
      }
      result = result && (hasDomain() == other.hasDomain());
      if (hasDomain()) {
        result = result && getDomain()
            .equals(other.getDomain());
      }
      result = result && (hasOpVersion() == other.hasOpVersion());
      if (hasOpVersion()) {
        result = result && (getOpVersion()
            == other.getOpVersion());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getInputCount() > 0) {
        hash = (37 * hash) + INPUT_FIELD_NUMBER;
        hash = (53 * hash) + getInputList().hashCode();
      }
      if (getOutputCount() > 0) {
        hash = (37 * hash) + OUTPUT_FIELD_NUMBER;
        hash = (53 * hash) + getOutputList().hashCode();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getType().hashCode();
      }
      if (getArgCount() > 0) {
        hash = (37 * hash) + ARG_FIELD_NUMBER;
        hash = (53 * hash) + getArgList().hashCode();
      }
      if (hasDeviceOption()) {
        hash = (37 * hash) + DEVICE_OPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDeviceOption().hashCode();
      }
      if (hasEngine()) {
        hash = (37 * hash) + ENGINE_FIELD_NUMBER;
        hash = (53 * hash) + getEngine().hashCode();
      }
      if (getControlInputCount() > 0) {
        hash = (37 * hash) + CONTROL_INPUT_FIELD_NUMBER;
        hash = (53 * hash) + getControlInputList().hashCode();
      }
      if (hasIsGradientOp()) {
        hash = (37 * hash) + IS_GRADIENT_OP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsGradientOp());
      }
      if (hasDebugInfo()) {
        hash = (37 * hash) + DEBUG_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getDebugInfo().hashCode();
      }
      if (hasDomain()) {
        hash = (37 * hash) + DOMAIN_FIELD_NUMBER;
        hash = (53 * hash) + getDomain().hashCode();
      }
      if (hasOpVersion()) {
        hash = (37 * hash) + OP_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getOpVersion());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Operator Definition.
     * </pre>
     *
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDefOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_OperatorDef_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_OperatorDef_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArgFieldBuilder();
          getDeviceOptionFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        output_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        if (argBuilder_ == null) {
          arg_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          argBuilder_.clear();
        }
        if (deviceOptionBuilder_ == null) {
          deviceOption_ = null;
        } else {
          deviceOptionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        engine_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        controlInput_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        isGradientOp_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        debugInfo_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        domain_ = "";
        bitField0_ = (bitField0_ & ~0x00000400);
        opVersion_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_OperatorDef_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          input_ = input_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.input_ = input_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output_ = output_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.output_ = output_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (argBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            arg_ = java.util.Collections.unmodifiableList(arg_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.arg_ = arg_;
        } else {
          result.arg_ = argBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        if (deviceOptionBuilder_ == null) {
          result.deviceOption_ = deviceOption_;
        } else {
          result.deviceOption_ = deviceOptionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.engine_ = engine_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          controlInput_ = controlInput_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.controlInput_ = controlInput_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isGradientOp_ = isGradientOp_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.debugInfo_ = debugInfo_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.domain_ = domain_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.opVersion_ = opVersion_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.getDefaultInstance()) return this;
        if (!other.input_.isEmpty()) {
          if (input_.isEmpty()) {
            input_ = other.input_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureInputIsMutable();
            input_.addAll(other.input_);
          }
          onChanged();
        }
        if (!other.output_.isEmpty()) {
          if (output_.isEmpty()) {
            output_ = other.output_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureOutputIsMutable();
            output_.addAll(other.output_);
          }
          onChanged();
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasType()) {
          bitField0_ |= 0x00000008;
          type_ = other.type_;
          onChanged();
        }
        if (argBuilder_ == null) {
          if (!other.arg_.isEmpty()) {
            if (arg_.isEmpty()) {
              arg_ = other.arg_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureArgIsMutable();
              arg_.addAll(other.arg_);
            }
            onChanged();
          }
        } else {
          if (!other.arg_.isEmpty()) {
            if (argBuilder_.isEmpty()) {
              argBuilder_.dispose();
              argBuilder_ = null;
              arg_ = other.arg_;
              bitField0_ = (bitField0_ & ~0x00000010);
              argBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgFieldBuilder() : null;
            } else {
              argBuilder_.addAllMessages(other.arg_);
            }
          }
        }
        if (other.hasDeviceOption()) {
          mergeDeviceOption(other.getDeviceOption());
        }
        if (other.hasEngine()) {
          bitField0_ |= 0x00000040;
          engine_ = other.engine_;
          onChanged();
        }
        if (!other.controlInput_.isEmpty()) {
          if (controlInput_.isEmpty()) {
            controlInput_ = other.controlInput_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureControlInputIsMutable();
            controlInput_.addAll(other.controlInput_);
          }
          onChanged();
        }
        if (other.hasIsGradientOp()) {
          setIsGradientOp(other.getIsGradientOp());
        }
        if (other.hasDebugInfo()) {
          bitField0_ |= 0x00000200;
          debugInfo_ = other.debugInfo_;
          onChanged();
        }
        if (other.hasDomain()) {
          bitField0_ |= 0x00000400;
          domain_ = other.domain_;
          onChanged();
        }
        if (other.hasOpVersion()) {
          setOpVersion(other.getOpVersion());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getArgCount(); i++) {
          if (!getArg(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureInputIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          input_ = new com.google.protobuf.LazyStringArrayList(input_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * the name of the input blobs
       * </pre>
       *
       * <code>repeated string input = 1;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getInputList() {
        return input_.getUnmodifiableView();
      }
      /**
       * <pre>
       * the name of the input blobs
       * </pre>
       *
       * <code>repeated string input = 1;</code>
       */
      public int getInputCount() {
        return input_.size();
      }
      /**
       * <pre>
       * the name of the input blobs
       * </pre>
       *
       * <code>repeated string input = 1;</code>
       */
      public java.lang.String getInput(int index) {
        return input_.get(index);
      }
      /**
       * <pre>
       * the name of the input blobs
       * </pre>
       *
       * <code>repeated string input = 1;</code>
       */
      public com.google.protobuf.ByteString
          getInputBytes(int index) {
        return input_.getByteString(index);
      }
      /**
       * <pre>
       * the name of the input blobs
       * </pre>
       *
       * <code>repeated string input = 1;</code>
       */
      public Builder setInput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the name of the input blobs
       * </pre>
       *
       * <code>repeated string input = 1;</code>
       */
      public Builder addInput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the name of the input blobs
       * </pre>
       *
       * <code>repeated string input = 1;</code>
       */
      public Builder addAllInput(
          java.lang.Iterable<java.lang.String> values) {
        ensureInputIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, input_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the name of the input blobs
       * </pre>
       *
       * <code>repeated string input = 1;</code>
       */
      public Builder clearInput() {
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the name of the input blobs
       * </pre>
       *
       * <code>repeated string input = 1;</code>
       */
      public Builder addInputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList output_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureOutputIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          output_ = new com.google.protobuf.LazyStringArrayList(output_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * the name of output top blobs
       * </pre>
       *
       * <code>repeated string output = 2;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getOutputList() {
        return output_.getUnmodifiableView();
      }
      /**
       * <pre>
       * the name of output top blobs
       * </pre>
       *
       * <code>repeated string output = 2;</code>
       */
      public int getOutputCount() {
        return output_.size();
      }
      /**
       * <pre>
       * the name of output top blobs
       * </pre>
       *
       * <code>repeated string output = 2;</code>
       */
      public java.lang.String getOutput(int index) {
        return output_.get(index);
      }
      /**
       * <pre>
       * the name of output top blobs
       * </pre>
       *
       * <code>repeated string output = 2;</code>
       */
      public com.google.protobuf.ByteString
          getOutputBytes(int index) {
        return output_.getByteString(index);
      }
      /**
       * <pre>
       * the name of output top blobs
       * </pre>
       *
       * <code>repeated string output = 2;</code>
       */
      public Builder setOutput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputIsMutable();
        output_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the name of output top blobs
       * </pre>
       *
       * <code>repeated string output = 2;</code>
       */
      public Builder addOutput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputIsMutable();
        output_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the name of output top blobs
       * </pre>
       *
       * <code>repeated string output = 2;</code>
       */
      public Builder addAllOutput(
          java.lang.Iterable<java.lang.String> values) {
        ensureOutputIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, output_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the name of output top blobs
       * </pre>
       *
       * <code>repeated string output = 2;</code>
       */
      public Builder clearOutput() {
        output_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the name of output top blobs
       * </pre>
       *
       * <code>repeated string output = 2;</code>
       */
      public Builder addOutputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputIsMutable();
        output_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * the operator name. This is optional.
       * </pre>
       *
       * <code>optional string name = 3;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * the operator name. This is optional.
       * </pre>
       *
       * <code>optional string name = 3;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the operator name. This is optional.
       * </pre>
       *
       * <code>optional string name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the operator name. This is optional.
       * </pre>
       *
       * <code>optional string name = 3;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the operator name. This is optional.
       * </pre>
       *
       * <code>optional string name = 3;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the operator name. This is optional.
       * </pre>
       *
       * <code>optional string name = 3;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object type_ = "";
      /**
       * <pre>
       * the operator type. This is needed to create the object from the operator
       * registry.
       * </pre>
       *
       * <code>optional string type = 4;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * the operator type. This is needed to create the object from the operator
       * registry.
       * </pre>
       *
       * <code>optional string type = 4;</code>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            type_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the operator type. This is needed to create the object from the operator
       * registry.
       * </pre>
       *
       * <code>optional string type = 4;</code>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the operator type. This is needed to create the object from the operator
       * registry.
       * </pre>
       *
       * <code>optional string type = 4;</code>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the operator type. This is needed to create the object from the operator
       * registry.
       * </pre>
       *
       * <code>optional string type = 4;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the operator type. This is needed to create the object from the operator
       * registry.
       * </pre>
       *
       * <code>optional string type = 4;</code>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        type_ = value;
        onChanged();
        return this;
      }

      private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument> arg_ =
        java.util.Collections.emptyList();
      private void ensureArgIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          arg_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument>(arg_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder> argBuilder_;

      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument> getArgList() {
        if (argBuilder_ == null) {
          return java.util.Collections.unmodifiableList(arg_);
        } else {
          return argBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public int getArgCount() {
        if (argBuilder_ == null) {
          return arg_.size();
        } else {
          return argBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument getArg(int index) {
        if (argBuilder_ == null) {
          return arg_.get(index);
        } else {
          return argBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public Builder setArg(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument value) {
        if (argBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgIsMutable();
          arg_.set(index, value);
          onChanged();
        } else {
          argBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public Builder setArg(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder builderForValue) {
        if (argBuilder_ == null) {
          ensureArgIsMutable();
          arg_.set(index, builderForValue.build());
          onChanged();
        } else {
          argBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public Builder addArg(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument value) {
        if (argBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgIsMutable();
          arg_.add(value);
          onChanged();
        } else {
          argBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public Builder addArg(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument value) {
        if (argBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgIsMutable();
          arg_.add(index, value);
          onChanged();
        } else {
          argBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public Builder addArg(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder builderForValue) {
        if (argBuilder_ == null) {
          ensureArgIsMutable();
          arg_.add(builderForValue.build());
          onChanged();
        } else {
          argBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public Builder addArg(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder builderForValue) {
        if (argBuilder_ == null) {
          ensureArgIsMutable();
          arg_.add(index, builderForValue.build());
          onChanged();
        } else {
          argBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public Builder addAllArg(
          java.lang.Iterable<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument> values) {
        if (argBuilder_ == null) {
          ensureArgIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, arg_);
          onChanged();
        } else {
          argBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public Builder clearArg() {
        if (argBuilder_ == null) {
          arg_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          argBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public Builder removeArg(int index) {
        if (argBuilder_ == null) {
          ensureArgIsMutable();
          arg_.remove(index);
          onChanged();
        } else {
          argBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder getArgBuilder(
          int index) {
        return getArgFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder getArgOrBuilder(
          int index) {
        if (argBuilder_ == null) {
          return arg_.get(index);  } else {
          return argBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder> 
           getArgOrBuilderList() {
        if (argBuilder_ != null) {
          return argBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(arg_);
        }
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder addArgBuilder() {
        return getArgFieldBuilder().addBuilder(
            dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.getDefaultInstance());
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder addArgBuilder(
          int index) {
        return getArgFieldBuilder().addBuilder(
            index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.getDefaultInstance());
      }
      /**
       * <pre>
       * arg is for the argument defined in operator schema
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 5;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder> 
           getArgBuilderList() {
        return getArgFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder> 
          getArgFieldBuilder() {
        if (argBuilder_ == null) {
          argBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder>(
                  arg_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          arg_ = null;
        }
        return argBuilder_;
      }

      private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption deviceOption_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder> deviceOptionBuilder_;
      /**
       * <pre>
       * The device option that the operator should run under.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
       */
      public boolean hasDeviceOption() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * The device option that the operator should run under.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption getDeviceOption() {
        if (deviceOptionBuilder_ == null) {
          return deviceOption_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance() : deviceOption_;
        } else {
          return deviceOptionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The device option that the operator should run under.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
       */
      public Builder setDeviceOption(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption value) {
        if (deviceOptionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deviceOption_ = value;
          onChanged();
        } else {
          deviceOptionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * The device option that the operator should run under.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
       */
      public Builder setDeviceOption(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder builderForValue) {
        if (deviceOptionBuilder_ == null) {
          deviceOption_ = builderForValue.build();
          onChanged();
        } else {
          deviceOptionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * The device option that the operator should run under.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
       */
      public Builder mergeDeviceOption(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption value) {
        if (deviceOptionBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              deviceOption_ != null &&
              deviceOption_ != dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance()) {
            deviceOption_ =
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.newBuilder(deviceOption_).mergeFrom(value).buildPartial();
          } else {
            deviceOption_ = value;
          }
          onChanged();
        } else {
          deviceOptionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * The device option that the operator should run under.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
       */
      public Builder clearDeviceOption() {
        if (deviceOptionBuilder_ == null) {
          deviceOption_ = null;
          onChanged();
        } else {
          deviceOptionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <pre>
       * The device option that the operator should run under.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder getDeviceOptionBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getDeviceOptionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The device option that the operator should run under.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder getDeviceOptionOrBuilder() {
        if (deviceOptionBuilder_ != null) {
          return deviceOptionBuilder_.getMessageOrBuilder();
        } else {
          return deviceOption_ == null ?
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance() : deviceOption_;
        }
      }
      /**
       * <pre>
       * The device option that the operator should run under.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder> 
          getDeviceOptionFieldBuilder() {
        if (deviceOptionBuilder_ == null) {
          deviceOptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder>(
                  getDeviceOption(),
                  getParentForChildren(),
                  isClean());
          deviceOption_ = null;
        }
        return deviceOptionBuilder_;
      }

      private java.lang.Object engine_ = "";
      /**
       * <pre>
       * Optionally, one can specify an engine when there are multiple
       * implementations available simultaneously for one device type.
       * If one specifies an engine but that engine does not exist in the compiled
       * Caffe2 binary, Caffe2 will fall back to the default engine of that device
       * type.
       * </pre>
       *
       * <code>optional string engine = 7;</code>
       */
      public boolean hasEngine() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * Optionally, one can specify an engine when there are multiple
       * implementations available simultaneously for one device type.
       * If one specifies an engine but that engine does not exist in the compiled
       * Caffe2 binary, Caffe2 will fall back to the default engine of that device
       * type.
       * </pre>
       *
       * <code>optional string engine = 7;</code>
       */
      public java.lang.String getEngine() {
        java.lang.Object ref = engine_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            engine_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Optionally, one can specify an engine when there are multiple
       * implementations available simultaneously for one device type.
       * If one specifies an engine but that engine does not exist in the compiled
       * Caffe2 binary, Caffe2 will fall back to the default engine of that device
       * type.
       * </pre>
       *
       * <code>optional string engine = 7;</code>
       */
      public com.google.protobuf.ByteString
          getEngineBytes() {
        java.lang.Object ref = engine_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          engine_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Optionally, one can specify an engine when there are multiple
       * implementations available simultaneously for one device type.
       * If one specifies an engine but that engine does not exist in the compiled
       * Caffe2 binary, Caffe2 will fall back to the default engine of that device
       * type.
       * </pre>
       *
       * <code>optional string engine = 7;</code>
       */
      public Builder setEngine(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        engine_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optionally, one can specify an engine when there are multiple
       * implementations available simultaneously for one device type.
       * If one specifies an engine but that engine does not exist in the compiled
       * Caffe2 binary, Caffe2 will fall back to the default engine of that device
       * type.
       * </pre>
       *
       * <code>optional string engine = 7;</code>
       */
      public Builder clearEngine() {
        bitField0_ = (bitField0_ & ~0x00000040);
        engine_ = getDefaultInstance().getEngine();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optionally, one can specify an engine when there are multiple
       * implementations available simultaneously for one device type.
       * If one specifies an engine but that engine does not exist in the compiled
       * Caffe2 binary, Caffe2 will fall back to the default engine of that device
       * type.
       * </pre>
       *
       * <code>optional string engine = 7;</code>
       */
      public Builder setEngineBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        engine_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList controlInput_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureControlInputIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          controlInput_ = new com.google.protobuf.LazyStringArrayList(controlInput_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <pre>
       * Additional 'fake' inputs used for expressing control dependencies
       * in the operator graph. This can be used to ensure that an
       * operator does not run until another operator is ready, for e.g.
       * scheduling control. These are not passed as actual inputs to the
       * Operator implementation, and are only used by the Net class for
       * scheduling purposes.
       * </pre>
       *
       * <code>repeated string control_input = 8;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getControlInputList() {
        return controlInput_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Additional 'fake' inputs used for expressing control dependencies
       * in the operator graph. This can be used to ensure that an
       * operator does not run until another operator is ready, for e.g.
       * scheduling control. These are not passed as actual inputs to the
       * Operator implementation, and are only used by the Net class for
       * scheduling purposes.
       * </pre>
       *
       * <code>repeated string control_input = 8;</code>
       */
      public int getControlInputCount() {
        return controlInput_.size();
      }
      /**
       * <pre>
       * Additional 'fake' inputs used for expressing control dependencies
       * in the operator graph. This can be used to ensure that an
       * operator does not run until another operator is ready, for e.g.
       * scheduling control. These are not passed as actual inputs to the
       * Operator implementation, and are only used by the Net class for
       * scheduling purposes.
       * </pre>
       *
       * <code>repeated string control_input = 8;</code>
       */
      public java.lang.String getControlInput(int index) {
        return controlInput_.get(index);
      }
      /**
       * <pre>
       * Additional 'fake' inputs used for expressing control dependencies
       * in the operator graph. This can be used to ensure that an
       * operator does not run until another operator is ready, for e.g.
       * scheduling control. These are not passed as actual inputs to the
       * Operator implementation, and are only used by the Net class for
       * scheduling purposes.
       * </pre>
       *
       * <code>repeated string control_input = 8;</code>
       */
      public com.google.protobuf.ByteString
          getControlInputBytes(int index) {
        return controlInput_.getByteString(index);
      }
      /**
       * <pre>
       * Additional 'fake' inputs used for expressing control dependencies
       * in the operator graph. This can be used to ensure that an
       * operator does not run until another operator is ready, for e.g.
       * scheduling control. These are not passed as actual inputs to the
       * Operator implementation, and are only used by the Net class for
       * scheduling purposes.
       * </pre>
       *
       * <code>repeated string control_input = 8;</code>
       */
      public Builder setControlInput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureControlInputIsMutable();
        controlInput_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional 'fake' inputs used for expressing control dependencies
       * in the operator graph. This can be used to ensure that an
       * operator does not run until another operator is ready, for e.g.
       * scheduling control. These are not passed as actual inputs to the
       * Operator implementation, and are only used by the Net class for
       * scheduling purposes.
       * </pre>
       *
       * <code>repeated string control_input = 8;</code>
       */
      public Builder addControlInput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureControlInputIsMutable();
        controlInput_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional 'fake' inputs used for expressing control dependencies
       * in the operator graph. This can be used to ensure that an
       * operator does not run until another operator is ready, for e.g.
       * scheduling control. These are not passed as actual inputs to the
       * Operator implementation, and are only used by the Net class for
       * scheduling purposes.
       * </pre>
       *
       * <code>repeated string control_input = 8;</code>
       */
      public Builder addAllControlInput(
          java.lang.Iterable<java.lang.String> values) {
        ensureControlInputIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, controlInput_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional 'fake' inputs used for expressing control dependencies
       * in the operator graph. This can be used to ensure that an
       * operator does not run until another operator is ready, for e.g.
       * scheduling control. These are not passed as actual inputs to the
       * Operator implementation, and are only used by the Net class for
       * scheduling purposes.
       * </pre>
       *
       * <code>repeated string control_input = 8;</code>
       */
      public Builder clearControlInput() {
        controlInput_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional 'fake' inputs used for expressing control dependencies
       * in the operator graph. This can be used to ensure that an
       * operator does not run until another operator is ready, for e.g.
       * scheduling control. These are not passed as actual inputs to the
       * Operator implementation, and are only used by the Net class for
       * scheduling purposes.
       * </pre>
       *
       * <code>repeated string control_input = 8;</code>
       */
      public Builder addControlInputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureControlInputIsMutable();
        controlInput_.add(value);
        onChanged();
        return this;
      }

      private boolean isGradientOp_ ;
      /**
       * <pre>
       * is_gradient_op argument is only used as a hint in shape inference
       * and has no runtime significance
       * </pre>
       *
       * <code>optional bool is_gradient_op = 9 [default = false];</code>
       */
      public boolean hasIsGradientOp() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * is_gradient_op argument is only used as a hint in shape inference
       * and has no runtime significance
       * </pre>
       *
       * <code>optional bool is_gradient_op = 9 [default = false];</code>
       */
      public boolean getIsGradientOp() {
        return isGradientOp_;
      }
      /**
       * <pre>
       * is_gradient_op argument is only used as a hint in shape inference
       * and has no runtime significance
       * </pre>
       *
       * <code>optional bool is_gradient_op = 9 [default = false];</code>
       */
      public Builder setIsGradientOp(boolean value) {
        bitField0_ |= 0x00000100;
        isGradientOp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * is_gradient_op argument is only used as a hint in shape inference
       * and has no runtime significance
       * </pre>
       *
       * <code>optional bool is_gradient_op = 9 [default = false];</code>
       */
      public Builder clearIsGradientOp() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isGradientOp_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object debugInfo_ = "";
      /**
       * <pre>
       * debug information associated with the construction of the operator.
       * This is an optional string with no assumed characteristics as
       * operators can be constructed in any language.
       * </pre>
       *
       * <code>optional string debug_info = 10;</code>
       */
      public boolean hasDebugInfo() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * debug information associated with the construction of the operator.
       * This is an optional string with no assumed characteristics as
       * operators can be constructed in any language.
       * </pre>
       *
       * <code>optional string debug_info = 10;</code>
       */
      public java.lang.String getDebugInfo() {
        java.lang.Object ref = debugInfo_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            debugInfo_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * debug information associated with the construction of the operator.
       * This is an optional string with no assumed characteristics as
       * operators can be constructed in any language.
       * </pre>
       *
       * <code>optional string debug_info = 10;</code>
       */
      public com.google.protobuf.ByteString
          getDebugInfoBytes() {
        java.lang.Object ref = debugInfo_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          debugInfo_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * debug information associated with the construction of the operator.
       * This is an optional string with no assumed characteristics as
       * operators can be constructed in any language.
       * </pre>
       *
       * <code>optional string debug_info = 10;</code>
       */
      public Builder setDebugInfo(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        debugInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * debug information associated with the construction of the operator.
       * This is an optional string with no assumed characteristics as
       * operators can be constructed in any language.
       * </pre>
       *
       * <code>optional string debug_info = 10;</code>
       */
      public Builder clearDebugInfo() {
        bitField0_ = (bitField0_ & ~0x00000200);
        debugInfo_ = getDefaultInstance().getDebugInfo();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * debug information associated with the construction of the operator.
       * This is an optional string with no assumed characteristics as
       * operators can be constructed in any language.
       * </pre>
       *
       * <code>optional string debug_info = 10;</code>
       */
      public Builder setDebugInfoBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        debugInfo_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object domain_ = "";
      /**
       * <pre>
       * the domain of the operator to help runtime distinguish which operator
       * library this OperatorDef refers to. For example, both caffe2 and aten
       * has `Add` operator, with domain, we can easily decide which operator
       * to execute. to support multiple operator libs, we use domain to
       * distinguish which operator lib we refer to:
       *   - "caffe2" means this uses Caffe2 operator library
       *   - "aten" means this uses ATen operator library
       *   - "c10" is for the fused library
       *   - if the domain is missing or empty, we use "caffe2", this is for
       *     legacy models, new serializer should always export an OperatorDef
       *     with domain and op_version
       * </pre>
       *
       * <code>optional string domain = 11;</code>
       */
      public boolean hasDomain() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * the domain of the operator to help runtime distinguish which operator
       * library this OperatorDef refers to. For example, both caffe2 and aten
       * has `Add` operator, with domain, we can easily decide which operator
       * to execute. to support multiple operator libs, we use domain to
       * distinguish which operator lib we refer to:
       *   - "caffe2" means this uses Caffe2 operator library
       *   - "aten" means this uses ATen operator library
       *   - "c10" is for the fused library
       *   - if the domain is missing or empty, we use "caffe2", this is for
       *     legacy models, new serializer should always export an OperatorDef
       *     with domain and op_version
       * </pre>
       *
       * <code>optional string domain = 11;</code>
       */
      public java.lang.String getDomain() {
        java.lang.Object ref = domain_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            domain_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the domain of the operator to help runtime distinguish which operator
       * library this OperatorDef refers to. For example, both caffe2 and aten
       * has `Add` operator, with domain, we can easily decide which operator
       * to execute. to support multiple operator libs, we use domain to
       * distinguish which operator lib we refer to:
       *   - "caffe2" means this uses Caffe2 operator library
       *   - "aten" means this uses ATen operator library
       *   - "c10" is for the fused library
       *   - if the domain is missing or empty, we use "caffe2", this is for
       *     legacy models, new serializer should always export an OperatorDef
       *     with domain and op_version
       * </pre>
       *
       * <code>optional string domain = 11;</code>
       */
      public com.google.protobuf.ByteString
          getDomainBytes() {
        java.lang.Object ref = domain_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          domain_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the domain of the operator to help runtime distinguish which operator
       * library this OperatorDef refers to. For example, both caffe2 and aten
       * has `Add` operator, with domain, we can easily decide which operator
       * to execute. to support multiple operator libs, we use domain to
       * distinguish which operator lib we refer to:
       *   - "caffe2" means this uses Caffe2 operator library
       *   - "aten" means this uses ATen operator library
       *   - "c10" is for the fused library
       *   - if the domain is missing or empty, we use "caffe2", this is for
       *     legacy models, new serializer should always export an OperatorDef
       *     with domain and op_version
       * </pre>
       *
       * <code>optional string domain = 11;</code>
       */
      public Builder setDomain(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        domain_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the domain of the operator to help runtime distinguish which operator
       * library this OperatorDef refers to. For example, both caffe2 and aten
       * has `Add` operator, with domain, we can easily decide which operator
       * to execute. to support multiple operator libs, we use domain to
       * distinguish which operator lib we refer to:
       *   - "caffe2" means this uses Caffe2 operator library
       *   - "aten" means this uses ATen operator library
       *   - "c10" is for the fused library
       *   - if the domain is missing or empty, we use "caffe2", this is for
       *     legacy models, new serializer should always export an OperatorDef
       *     with domain and op_version
       * </pre>
       *
       * <code>optional string domain = 11;</code>
       */
      public Builder clearDomain() {
        bitField0_ = (bitField0_ & ~0x00000400);
        domain_ = getDefaultInstance().getDomain();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the domain of the operator to help runtime distinguish which operator
       * library this OperatorDef refers to. For example, both caffe2 and aten
       * has `Add` operator, with domain, we can easily decide which operator
       * to execute. to support multiple operator libs, we use domain to
       * distinguish which operator lib we refer to:
       *   - "caffe2" means this uses Caffe2 operator library
       *   - "aten" means this uses ATen operator library
       *   - "c10" is for the fused library
       *   - if the domain is missing or empty, we use "caffe2", this is for
       *     legacy models, new serializer should always export an OperatorDef
       *     with domain and op_version
       * </pre>
       *
       * <code>optional string domain = 11;</code>
       */
      public Builder setDomainBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        domain_ = value;
        onChanged();
        return this;
      }

      private long opVersion_ ;
      /**
       * <pre>
       * each operator is has its own version number.
       * operator version information
       * each time, we change the API or semantics of the operator,
       * we bump the version for the operator.
       * the runtime system should check the op_version of each OperatorDef
       * and decide it should reject or accept the model
       * </pre>
       *
       * <code>optional int64 op_version = 12;</code>
       */
      public boolean hasOpVersion() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * each operator is has its own version number.
       * operator version information
       * each time, we change the API or semantics of the operator,
       * we bump the version for the operator.
       * the runtime system should check the op_version of each OperatorDef
       * and decide it should reject or accept the model
       * </pre>
       *
       * <code>optional int64 op_version = 12;</code>
       */
      public long getOpVersion() {
        return opVersion_;
      }
      /**
       * <pre>
       * each operator is has its own version number.
       * operator version information
       * each time, we change the API or semantics of the operator,
       * we bump the version for the operator.
       * the runtime system should check the op_version of each OperatorDef
       * and decide it should reject or accept the model
       * </pre>
       *
       * <code>optional int64 op_version = 12;</code>
       */
      public Builder setOpVersion(long value) {
        bitField0_ |= 0x00000800;
        opVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * each operator is has its own version number.
       * operator version information
       * each time, we change the API or semantics of the operator,
       * we bump the version for the operator.
       * the runtime system should check the op_version of each OperatorDef
       * and decide it should reject or accept the model
       * </pre>
       *
       * <code>optional int64 op_version = 12;</code>
       */
      public Builder clearOpVersion() {
        bitField0_ = (bitField0_ & ~0x00000800);
        opVersion_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<OperatorDef>
        PARSER = new com.google.protobuf.AbstractParser<OperatorDef>() {
      public OperatorDef parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OperatorDef(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OperatorDef> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OperatorDef> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NetDefOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * the network's name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <pre>
     * the network's name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * the network's name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Operators that the network contains.
     * Note: this is not named "operator" because that is a reserved word in C++.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
     */
    java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef> 
        getOpList();
    /**
     * <pre>
     * Operators that the network contains.
     * Note: this is not named "operator" because that is a reserved word in C++.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef getOp(int index);
    /**
     * <pre>
     * Operators that the network contains.
     * Note: this is not named "operator" because that is a reserved word in C++.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
     */
    int getOpCount();
    /**
     * <pre>
     * Operators that the network contains.
     * Note: this is not named "operator" because that is a reserved word in C++.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
     */
    java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDefOrBuilder> 
        getOpOrBuilderList();
    /**
     * <pre>
     * Operators that the network contains.
     * Note: this is not named "operator" because that is a reserved word in C++.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDefOrBuilder getOpOrBuilder(
        int index);

    /**
     * <pre>
     * The type of network that the net should be run with. This routes the
     * network instantiation to different execution modes. The default mode,
     * "simple", runs the operators in a sequential way as the original Caffe
     * implementation does.
     * </pre>
     *
     * <code>optional string type = 3;</code>
     */
    boolean hasType();
    /**
     * <pre>
     * The type of network that the net should be run with. This routes the
     * network instantiation to different execution modes. The default mode,
     * "simple", runs the operators in a sequential way as the original Caffe
     * implementation does.
     * </pre>
     *
     * <code>optional string type = 3;</code>
     */
    java.lang.String getType();
    /**
     * <pre>
     * The type of network that the net should be run with. This routes the
     * network instantiation to different execution modes. The default mode,
     * "simple", runs the operators in a sequential way as the original Caffe
     * implementation does.
     * </pre>
     *
     * <code>optional string type = 3;</code>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <pre>
     * the number of workers, if the operators in the network is to be carried out
     * in parallel.
     * Note: This is to be deprecated. Using the arg field with "num_workers" as
     * key.
     * </pre>
     *
     * <code>optional int32 num_workers = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasNumWorkers();
    /**
     * <pre>
     * the number of workers, if the operators in the network is to be carried out
     * in parallel.
     * Note: This is to be deprecated. Using the arg field with "num_workers" as
     * key.
     * </pre>
     *
     * <code>optional int32 num_workers = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated int getNumWorkers();

    /**
     * <pre>
     * The device option for the network. If a network has a specific device
     * option and one of its operators does not have it set, we will copy over the
     * device option to the operator. This allows us to basically avoid putting
     * device options at every operator.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
     */
    boolean hasDeviceOption();
    /**
     * <pre>
     * The device option for the network. If a network has a specific device
     * option and one of its operators does not have it set, we will copy over the
     * device option to the operator. This allows us to basically avoid putting
     * device options at every operator.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption getDeviceOption();
    /**
     * <pre>
     * The device option for the network. If a network has a specific device
     * option and one of its operators does not have it set, we will copy over the
     * device option to the operator. This allows us to basically avoid putting
     * device options at every operator.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder getDeviceOptionOrBuilder();

    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
     */
    java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument> 
        getArgList();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument getArg(int index);
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
     */
    int getArgCount();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
     */
    java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder> 
        getArgOrBuilderList();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder getArgOrBuilder(
        int index);

    /**
     * <pre>
     * Two optional fields to declare external input and output of a net.
     * If these two are set, when a net is created, we will sanity check for
     * every op whether its input is declared (either as an external input,
     * or as an intermediate blob created by one of the ops), and sanity check
     * if all blobs in external_output are produced.
     * In cases of memory optimization, declaring external_input and
     * external_output also ensures that storage of these blobs are persistent:
     * for any blob in external_input and external_output, after a network run
     * finishes, their content are actually the right content. Any intermediate
     * blobs' contents may be overwritten.
     * </pre>
     *
     * <code>repeated string external_input = 7;</code>
     */
    java.util.List<java.lang.String>
        getExternalInputList();
    /**
     * <pre>
     * Two optional fields to declare external input and output of a net.
     * If these two are set, when a net is created, we will sanity check for
     * every op whether its input is declared (either as an external input,
     * or as an intermediate blob created by one of the ops), and sanity check
     * if all blobs in external_output are produced.
     * In cases of memory optimization, declaring external_input and
     * external_output also ensures that storage of these blobs are persistent:
     * for any blob in external_input and external_output, after a network run
     * finishes, their content are actually the right content. Any intermediate
     * blobs' contents may be overwritten.
     * </pre>
     *
     * <code>repeated string external_input = 7;</code>
     */
    int getExternalInputCount();
    /**
     * <pre>
     * Two optional fields to declare external input and output of a net.
     * If these two are set, when a net is created, we will sanity check for
     * every op whether its input is declared (either as an external input,
     * or as an intermediate blob created by one of the ops), and sanity check
     * if all blobs in external_output are produced.
     * In cases of memory optimization, declaring external_input and
     * external_output also ensures that storage of these blobs are persistent:
     * for any blob in external_input and external_output, after a network run
     * finishes, their content are actually the right content. Any intermediate
     * blobs' contents may be overwritten.
     * </pre>
     *
     * <code>repeated string external_input = 7;</code>
     */
    java.lang.String getExternalInput(int index);
    /**
     * <pre>
     * Two optional fields to declare external input and output of a net.
     * If these two are set, when a net is created, we will sanity check for
     * every op whether its input is declared (either as an external input,
     * or as an intermediate blob created by one of the ops), and sanity check
     * if all blobs in external_output are produced.
     * In cases of memory optimization, declaring external_input and
     * external_output also ensures that storage of these blobs are persistent:
     * for any blob in external_input and external_output, after a network run
     * finishes, their content are actually the right content. Any intermediate
     * blobs' contents may be overwritten.
     * </pre>
     *
     * <code>repeated string external_input = 7;</code>
     */
    com.google.protobuf.ByteString
        getExternalInputBytes(int index);

    /**
     * <code>repeated string external_output = 8;</code>
     */
    java.util.List<java.lang.String>
        getExternalOutputList();
    /**
     * <code>repeated string external_output = 8;</code>
     */
    int getExternalOutputCount();
    /**
     * <code>repeated string external_output = 8;</code>
     */
    java.lang.String getExternalOutput(int index);
    /**
     * <code>repeated string external_output = 8;</code>
     */
    com.google.protobuf.ByteString
        getExternalOutputBytes(int index);
  }
  /**
   * <pre>
   * Network definition.
   * </pre>
   *
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef}
   */
  public  static final class NetDef extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef)
      NetDefOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use NetDef.newBuilder() to construct.
    private NetDef(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private NetDef() {
      name_ = "";
      op_ = java.util.Collections.emptyList();
      type_ = "";
      numWorkers_ = 0;
      arg_ = java.util.Collections.emptyList();
      externalInput_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      externalOutput_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private NetDef(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                op_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef>();
                mutable_bitField0_ |= 0x00000002;
              }
              op_.add(
                  input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              type_ = bs;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              numWorkers_ = input.readInt32();
              break;
            }
            case 42: {
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = deviceOption_.toBuilder();
              }
              deviceOption_ = input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(deviceOption_);
                deviceOption_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                arg_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument>();
                mutable_bitField0_ |= 0x00000020;
              }
              arg_.add(
                  input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.PARSER, extensionRegistry));
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                externalInput_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000040;
              }
              externalInput_.add(bs);
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                externalOutput_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000080;
              }
              externalOutput_.add(bs);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          op_ = java.util.Collections.unmodifiableList(op_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          arg_ = java.util.Collections.unmodifiableList(arg_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          externalInput_ = externalInput_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          externalOutput_ = externalOutput_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_NetDef_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_NetDef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * the network's name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * the network's name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * the network's name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OP_FIELD_NUMBER = 2;
    private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef> op_;
    /**
     * <pre>
     * Operators that the network contains.
     * Note: this is not named "operator" because that is a reserved word in C++.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
     */
    public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef> getOpList() {
      return op_;
    }
    /**
     * <pre>
     * Operators that the network contains.
     * Note: this is not named "operator" because that is a reserved word in C++.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
     */
    public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDefOrBuilder> 
        getOpOrBuilderList() {
      return op_;
    }
    /**
     * <pre>
     * Operators that the network contains.
     * Note: this is not named "operator" because that is a reserved word in C++.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
     */
    public int getOpCount() {
      return op_.size();
    }
    /**
     * <pre>
     * Operators that the network contains.
     * Note: this is not named "operator" because that is a reserved word in C++.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef getOp(int index) {
      return op_.get(index);
    }
    /**
     * <pre>
     * Operators that the network contains.
     * Note: this is not named "operator" because that is a reserved word in C++.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDefOrBuilder getOpOrBuilder(
        int index) {
      return op_.get(index);
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private volatile java.lang.Object type_;
    /**
     * <pre>
     * The type of network that the net should be run with. This routes the
     * network instantiation to different execution modes. The default mode,
     * "simple", runs the operators in a sequential way as the original Caffe
     * implementation does.
     * </pre>
     *
     * <code>optional string type = 3;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The type of network that the net should be run with. This routes the
     * network instantiation to different execution modes. The default mode,
     * "simple", runs the operators in a sequential way as the original Caffe
     * implementation does.
     * </pre>
     *
     * <code>optional string type = 3;</code>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The type of network that the net should be run with. This routes the
     * network instantiation to different execution modes. The default mode,
     * "simple", runs the operators in a sequential way as the original Caffe
     * implementation does.
     * </pre>
     *
     * <code>optional string type = 3;</code>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NUM_WORKERS_FIELD_NUMBER = 4;
    private int numWorkers_;
    /**
     * <pre>
     * the number of workers, if the operators in the network is to be carried out
     * in parallel.
     * Note: This is to be deprecated. Using the arg field with "num_workers" as
     * key.
     * </pre>
     *
     * <code>optional int32 num_workers = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasNumWorkers() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * the number of workers, if the operators in the network is to be carried out
     * in parallel.
     * Note: This is to be deprecated. Using the arg field with "num_workers" as
     * key.
     * </pre>
     *
     * <code>optional int32 num_workers = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public int getNumWorkers() {
      return numWorkers_;
    }

    public static final int DEVICE_OPTION_FIELD_NUMBER = 5;
    private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption deviceOption_;
    /**
     * <pre>
     * The device option for the network. If a network has a specific device
     * option and one of its operators does not have it set, we will copy over the
     * device option to the operator. This allows us to basically avoid putting
     * device options at every operator.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
     */
    public boolean hasDeviceOption() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * The device option for the network. If a network has a specific device
     * option and one of its operators does not have it set, we will copy over the
     * device option to the operator. This allows us to basically avoid putting
     * device options at every operator.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption getDeviceOption() {
      return deviceOption_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance() : deviceOption_;
    }
    /**
     * <pre>
     * The device option for the network. If a network has a specific device
     * option and one of its operators does not have it set, we will copy over the
     * device option to the operator. This allows us to basically avoid putting
     * device options at every operator.
     * </pre>
     *
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder getDeviceOptionOrBuilder() {
      return deviceOption_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance() : deviceOption_;
    }

    public static final int ARG_FIELD_NUMBER = 6;
    private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument> arg_;
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
     */
    public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument> getArgList() {
      return arg_;
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
     */
    public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder> 
        getArgOrBuilderList() {
      return arg_;
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
     */
    public int getArgCount() {
      return arg_.size();
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument getArg(int index) {
      return arg_.get(index);
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder getArgOrBuilder(
        int index) {
      return arg_.get(index);
    }

    public static final int EXTERNAL_INPUT_FIELD_NUMBER = 7;
    private com.google.protobuf.LazyStringList externalInput_;
    /**
     * <pre>
     * Two optional fields to declare external input and output of a net.
     * If these two are set, when a net is created, we will sanity check for
     * every op whether its input is declared (either as an external input,
     * or as an intermediate blob created by one of the ops), and sanity check
     * if all blobs in external_output are produced.
     * In cases of memory optimization, declaring external_input and
     * external_output also ensures that storage of these blobs are persistent:
     * for any blob in external_input and external_output, after a network run
     * finishes, their content are actually the right content. Any intermediate
     * blobs' contents may be overwritten.
     * </pre>
     *
     * <code>repeated string external_input = 7;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getExternalInputList() {
      return externalInput_;
    }
    /**
     * <pre>
     * Two optional fields to declare external input and output of a net.
     * If these two are set, when a net is created, we will sanity check for
     * every op whether its input is declared (either as an external input,
     * or as an intermediate blob created by one of the ops), and sanity check
     * if all blobs in external_output are produced.
     * In cases of memory optimization, declaring external_input and
     * external_output also ensures that storage of these blobs are persistent:
     * for any blob in external_input and external_output, after a network run
     * finishes, their content are actually the right content. Any intermediate
     * blobs' contents may be overwritten.
     * </pre>
     *
     * <code>repeated string external_input = 7;</code>
     */
    public int getExternalInputCount() {
      return externalInput_.size();
    }
    /**
     * <pre>
     * Two optional fields to declare external input and output of a net.
     * If these two are set, when a net is created, we will sanity check for
     * every op whether its input is declared (either as an external input,
     * or as an intermediate blob created by one of the ops), and sanity check
     * if all blobs in external_output are produced.
     * In cases of memory optimization, declaring external_input and
     * external_output also ensures that storage of these blobs are persistent:
     * for any blob in external_input and external_output, after a network run
     * finishes, their content are actually the right content. Any intermediate
     * blobs' contents may be overwritten.
     * </pre>
     *
     * <code>repeated string external_input = 7;</code>
     */
    public java.lang.String getExternalInput(int index) {
      return externalInput_.get(index);
    }
    /**
     * <pre>
     * Two optional fields to declare external input and output of a net.
     * If these two are set, when a net is created, we will sanity check for
     * every op whether its input is declared (either as an external input,
     * or as an intermediate blob created by one of the ops), and sanity check
     * if all blobs in external_output are produced.
     * In cases of memory optimization, declaring external_input and
     * external_output also ensures that storage of these blobs are persistent:
     * for any blob in external_input and external_output, after a network run
     * finishes, their content are actually the right content. Any intermediate
     * blobs' contents may be overwritten.
     * </pre>
     *
     * <code>repeated string external_input = 7;</code>
     */
    public com.google.protobuf.ByteString
        getExternalInputBytes(int index) {
      return externalInput_.getByteString(index);
    }

    public static final int EXTERNAL_OUTPUT_FIELD_NUMBER = 8;
    private com.google.protobuf.LazyStringList externalOutput_;
    /**
     * <code>repeated string external_output = 8;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getExternalOutputList() {
      return externalOutput_;
    }
    /**
     * <code>repeated string external_output = 8;</code>
     */
    public int getExternalOutputCount() {
      return externalOutput_.size();
    }
    /**
     * <code>repeated string external_output = 8;</code>
     */
    public java.lang.String getExternalOutput(int index) {
      return externalOutput_.get(index);
    }
    /**
     * <code>repeated string external_output = 8;</code>
     */
    public com.google.protobuf.ByteString
        getExternalOutputBytes(int index) {
      return externalOutput_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getOpCount(); i++) {
        if (!getOp(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getArgCount(); i++) {
        if (!getArg(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      for (int i = 0; i < op_.size(); i++) {
        output.writeMessage(2, op_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, type_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, numWorkers_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(5, getDeviceOption());
      }
      for (int i = 0; i < arg_.size(); i++) {
        output.writeMessage(6, arg_.get(i));
      }
      for (int i = 0; i < externalInput_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, externalInput_.getRaw(i));
      }
      for (int i = 0; i < externalOutput_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, externalOutput_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      for (int i = 0; i < op_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, op_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, type_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, numWorkers_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getDeviceOption());
      }
      for (int i = 0; i < arg_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, arg_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < externalInput_.size(); i++) {
          dataSize += computeStringSizeNoTag(externalInput_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getExternalInputList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < externalOutput_.size(); i++) {
          dataSize += computeStringSizeNoTag(externalOutput_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getExternalOutputList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && getOpList()
          .equals(other.getOpList());
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result && getType()
            .equals(other.getType());
      }
      result = result && (hasNumWorkers() == other.hasNumWorkers());
      if (hasNumWorkers()) {
        result = result && (getNumWorkers()
            == other.getNumWorkers());
      }
      result = result && (hasDeviceOption() == other.hasDeviceOption());
      if (hasDeviceOption()) {
        result = result && getDeviceOption()
            .equals(other.getDeviceOption());
      }
      result = result && getArgList()
          .equals(other.getArgList());
      result = result && getExternalInputList()
          .equals(other.getExternalInputList());
      result = result && getExternalOutputList()
          .equals(other.getExternalOutputList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (getOpCount() > 0) {
        hash = (37 * hash) + OP_FIELD_NUMBER;
        hash = (53 * hash) + getOpList().hashCode();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getType().hashCode();
      }
      if (hasNumWorkers()) {
        hash = (37 * hash) + NUM_WORKERS_FIELD_NUMBER;
        hash = (53 * hash) + getNumWorkers();
      }
      if (hasDeviceOption()) {
        hash = (37 * hash) + DEVICE_OPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDeviceOption().hashCode();
      }
      if (getArgCount() > 0) {
        hash = (37 * hash) + ARG_FIELD_NUMBER;
        hash = (53 * hash) + getArgList().hashCode();
      }
      if (getExternalInputCount() > 0) {
        hash = (37 * hash) + EXTERNAL_INPUT_FIELD_NUMBER;
        hash = (53 * hash) + getExternalInputList().hashCode();
      }
      if (getExternalOutputCount() > 0) {
        hash = (37 * hash) + EXTERNAL_OUTPUT_FIELD_NUMBER;
        hash = (53 * hash) + getExternalOutputList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Network definition.
     * </pre>
     *
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_NetDef_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_NetDef_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getOpFieldBuilder();
          getDeviceOptionFieldBuilder();
          getArgFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (opBuilder_ == null) {
          op_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          opBuilder_.clear();
        }
        type_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        numWorkers_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (deviceOptionBuilder_ == null) {
          deviceOption_ = null;
        } else {
          deviceOptionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (argBuilder_ == null) {
          arg_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          argBuilder_.clear();
        }
        externalInput_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        externalOutput_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_NetDef_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (opBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            op_ = java.util.Collections.unmodifiableList(op_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.op_ = op_;
        } else {
          result.op_ = opBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.numWorkers_ = numWorkers_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        if (deviceOptionBuilder_ == null) {
          result.deviceOption_ = deviceOption_;
        } else {
          result.deviceOption_ = deviceOptionBuilder_.build();
        }
        if (argBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            arg_ = java.util.Collections.unmodifiableList(arg_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.arg_ = arg_;
        } else {
          result.arg_ = argBuilder_.build();
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          externalInput_ = externalInput_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.externalInput_ = externalInput_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          externalOutput_ = externalOutput_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.externalOutput_ = externalOutput_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (opBuilder_ == null) {
          if (!other.op_.isEmpty()) {
            if (op_.isEmpty()) {
              op_ = other.op_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureOpIsMutable();
              op_.addAll(other.op_);
            }
            onChanged();
          }
        } else {
          if (!other.op_.isEmpty()) {
            if (opBuilder_.isEmpty()) {
              opBuilder_.dispose();
              opBuilder_ = null;
              op_ = other.op_;
              bitField0_ = (bitField0_ & ~0x00000002);
              opBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOpFieldBuilder() : null;
            } else {
              opBuilder_.addAllMessages(other.op_);
            }
          }
        }
        if (other.hasType()) {
          bitField0_ |= 0x00000004;
          type_ = other.type_;
          onChanged();
        }
        if (other.hasNumWorkers()) {
          setNumWorkers(other.getNumWorkers());
        }
        if (other.hasDeviceOption()) {
          mergeDeviceOption(other.getDeviceOption());
        }
        if (argBuilder_ == null) {
          if (!other.arg_.isEmpty()) {
            if (arg_.isEmpty()) {
              arg_ = other.arg_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureArgIsMutable();
              arg_.addAll(other.arg_);
            }
            onChanged();
          }
        } else {
          if (!other.arg_.isEmpty()) {
            if (argBuilder_.isEmpty()) {
              argBuilder_.dispose();
              argBuilder_ = null;
              arg_ = other.arg_;
              bitField0_ = (bitField0_ & ~0x00000020);
              argBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgFieldBuilder() : null;
            } else {
              argBuilder_.addAllMessages(other.arg_);
            }
          }
        }
        if (!other.externalInput_.isEmpty()) {
          if (externalInput_.isEmpty()) {
            externalInput_ = other.externalInput_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureExternalInputIsMutable();
            externalInput_.addAll(other.externalInput_);
          }
          onChanged();
        }
        if (!other.externalOutput_.isEmpty()) {
          if (externalOutput_.isEmpty()) {
            externalOutput_ = other.externalOutput_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureExternalOutputIsMutable();
            externalOutput_.addAll(other.externalOutput_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getOpCount(); i++) {
          if (!getOp(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getArgCount(); i++) {
          if (!getArg(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * the network's name
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * the network's name
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the network's name
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the network's name
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the network's name
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the network's name
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef> op_ =
        java.util.Collections.emptyList();
      private void ensureOpIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          op_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef>(op_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDefOrBuilder> opBuilder_;

      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef> getOpList() {
        if (opBuilder_ == null) {
          return java.util.Collections.unmodifiableList(op_);
        } else {
          return opBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public int getOpCount() {
        if (opBuilder_ == null) {
          return op_.size();
        } else {
          return opBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef getOp(int index) {
        if (opBuilder_ == null) {
          return op_.get(index);
        } else {
          return opBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public Builder setOp(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef value) {
        if (opBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOpIsMutable();
          op_.set(index, value);
          onChanged();
        } else {
          opBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public Builder setOp(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.Builder builderForValue) {
        if (opBuilder_ == null) {
          ensureOpIsMutable();
          op_.set(index, builderForValue.build());
          onChanged();
        } else {
          opBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public Builder addOp(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef value) {
        if (opBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOpIsMutable();
          op_.add(value);
          onChanged();
        } else {
          opBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public Builder addOp(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef value) {
        if (opBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOpIsMutable();
          op_.add(index, value);
          onChanged();
        } else {
          opBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public Builder addOp(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.Builder builderForValue) {
        if (opBuilder_ == null) {
          ensureOpIsMutable();
          op_.add(builderForValue.build());
          onChanged();
        } else {
          opBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public Builder addOp(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.Builder builderForValue) {
        if (opBuilder_ == null) {
          ensureOpIsMutable();
          op_.add(index, builderForValue.build());
          onChanged();
        } else {
          opBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public Builder addAllOp(
          java.lang.Iterable<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef> values) {
        if (opBuilder_ == null) {
          ensureOpIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, op_);
          onChanged();
        } else {
          opBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public Builder clearOp() {
        if (opBuilder_ == null) {
          op_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          opBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public Builder removeOp(int index) {
        if (opBuilder_ == null) {
          ensureOpIsMutable();
          op_.remove(index);
          onChanged();
        } else {
          opBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.Builder getOpBuilder(
          int index) {
        return getOpFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDefOrBuilder getOpOrBuilder(
          int index) {
        if (opBuilder_ == null) {
          return op_.get(index);  } else {
          return opBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDefOrBuilder> 
           getOpOrBuilderList() {
        if (opBuilder_ != null) {
          return opBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(op_);
        }
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.Builder addOpBuilder() {
        return getOpFieldBuilder().addBuilder(
            dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.getDefaultInstance());
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.Builder addOpBuilder(
          int index) {
        return getOpFieldBuilder().addBuilder(
            index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.getDefaultInstance());
      }
      /**
       * <pre>
       * Operators that the network contains.
       * Note: this is not named "operator" because that is a reserved word in C++.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.OperatorDef op = 2;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.Builder> 
           getOpBuilderList() {
        return getOpFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDefOrBuilder> 
          getOpFieldBuilder() {
        if (opBuilder_ == null) {
          opBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDef.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.OperatorDefOrBuilder>(
                  op_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          op_ = null;
        }
        return opBuilder_;
      }

      private java.lang.Object type_ = "";
      /**
       * <pre>
       * The type of network that the net should be run with. This routes the
       * network instantiation to different execution modes. The default mode,
       * "simple", runs the operators in a sequential way as the original Caffe
       * implementation does.
       * </pre>
       *
       * <code>optional string type = 3;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * The type of network that the net should be run with. This routes the
       * network instantiation to different execution modes. The default mode,
       * "simple", runs the operators in a sequential way as the original Caffe
       * implementation does.
       * </pre>
       *
       * <code>optional string type = 3;</code>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            type_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The type of network that the net should be run with. This routes the
       * network instantiation to different execution modes. The default mode,
       * "simple", runs the operators in a sequential way as the original Caffe
       * implementation does.
       * </pre>
       *
       * <code>optional string type = 3;</code>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The type of network that the net should be run with. This routes the
       * network instantiation to different execution modes. The default mode,
       * "simple", runs the operators in a sequential way as the original Caffe
       * implementation does.
       * </pre>
       *
       * <code>optional string type = 3;</code>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type of network that the net should be run with. This routes the
       * network instantiation to different execution modes. The default mode,
       * "simple", runs the operators in a sequential way as the original Caffe
       * implementation does.
       * </pre>
       *
       * <code>optional string type = 3;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type of network that the net should be run with. This routes the
       * network instantiation to different execution modes. The default mode,
       * "simple", runs the operators in a sequential way as the original Caffe
       * implementation does.
       * </pre>
       *
       * <code>optional string type = 3;</code>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        type_ = value;
        onChanged();
        return this;
      }

      private int numWorkers_ ;
      /**
       * <pre>
       * the number of workers, if the operators in the network is to be carried out
       * in parallel.
       * Note: This is to be deprecated. Using the arg field with "num_workers" as
       * key.
       * </pre>
       *
       * <code>optional int32 num_workers = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasNumWorkers() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * the number of workers, if the operators in the network is to be carried out
       * in parallel.
       * Note: This is to be deprecated. Using the arg field with "num_workers" as
       * key.
       * </pre>
       *
       * <code>optional int32 num_workers = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public int getNumWorkers() {
        return numWorkers_;
      }
      /**
       * <pre>
       * the number of workers, if the operators in the network is to be carried out
       * in parallel.
       * Note: This is to be deprecated. Using the arg field with "num_workers" as
       * key.
       * </pre>
       *
       * <code>optional int32 num_workers = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setNumWorkers(int value) {
        bitField0_ |= 0x00000008;
        numWorkers_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the number of workers, if the operators in the network is to be carried out
       * in parallel.
       * Note: This is to be deprecated. Using the arg field with "num_workers" as
       * key.
       * </pre>
       *
       * <code>optional int32 num_workers = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearNumWorkers() {
        bitField0_ = (bitField0_ & ~0x00000008);
        numWorkers_ = 0;
        onChanged();
        return this;
      }

      private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption deviceOption_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder> deviceOptionBuilder_;
      /**
       * <pre>
       * The device option for the network. If a network has a specific device
       * option and one of its operators does not have it set, we will copy over the
       * device option to the operator. This allows us to basically avoid putting
       * device options at every operator.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
       */
      public boolean hasDeviceOption() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * The device option for the network. If a network has a specific device
       * option and one of its operators does not have it set, we will copy over the
       * device option to the operator. This allows us to basically avoid putting
       * device options at every operator.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption getDeviceOption() {
        if (deviceOptionBuilder_ == null) {
          return deviceOption_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance() : deviceOption_;
        } else {
          return deviceOptionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The device option for the network. If a network has a specific device
       * option and one of its operators does not have it set, we will copy over the
       * device option to the operator. This allows us to basically avoid putting
       * device options at every operator.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
       */
      public Builder setDeviceOption(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption value) {
        if (deviceOptionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deviceOption_ = value;
          onChanged();
        } else {
          deviceOptionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * The device option for the network. If a network has a specific device
       * option and one of its operators does not have it set, we will copy over the
       * device option to the operator. This allows us to basically avoid putting
       * device options at every operator.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
       */
      public Builder setDeviceOption(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder builderForValue) {
        if (deviceOptionBuilder_ == null) {
          deviceOption_ = builderForValue.build();
          onChanged();
        } else {
          deviceOptionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * The device option for the network. If a network has a specific device
       * option and one of its operators does not have it set, we will copy over the
       * device option to the operator. This allows us to basically avoid putting
       * device options at every operator.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
       */
      public Builder mergeDeviceOption(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption value) {
        if (deviceOptionBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              deviceOption_ != null &&
              deviceOption_ != dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance()) {
            deviceOption_ =
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.newBuilder(deviceOption_).mergeFrom(value).buildPartial();
          } else {
            deviceOption_ = value;
          }
          onChanged();
        } else {
          deviceOptionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * The device option for the network. If a network has a specific device
       * option and one of its operators does not have it set, we will copy over the
       * device option to the operator. This allows us to basically avoid putting
       * device options at every operator.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
       */
      public Builder clearDeviceOption() {
        if (deviceOptionBuilder_ == null) {
          deviceOption_ = null;
          onChanged();
        } else {
          deviceOptionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       * The device option for the network. If a network has a specific device
       * option and one of its operators does not have it set, we will copy over the
       * device option to the operator. This allows us to basically avoid putting
       * device options at every operator.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder getDeviceOptionBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getDeviceOptionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The device option for the network. If a network has a specific device
       * option and one of its operators does not have it set, we will copy over the
       * device option to the operator. This allows us to basically avoid putting
       * device options at every operator.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder getDeviceOptionOrBuilder() {
        if (deviceOptionBuilder_ != null) {
          return deviceOptionBuilder_.getMessageOrBuilder();
        } else {
          return deviceOption_ == null ?
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.getDefaultInstance() : deviceOption_;
        }
      }
      /**
       * <pre>
       * The device option for the network. If a network has a specific device
       * option and one of its operators does not have it set, we will copy over the
       * device option to the operator. This allows us to basically avoid putting
       * device options at every operator.
       * </pre>
       *
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DeviceOption device_option = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder> 
          getDeviceOptionFieldBuilder() {
        if (deviceOptionBuilder_ == null) {
          deviceOptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOption.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DeviceOptionOrBuilder>(
                  getDeviceOption(),
                  getParentForChildren(),
                  isClean());
          deviceOption_ = null;
        }
        return deviceOptionBuilder_;
      }

      private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument> arg_ =
        java.util.Collections.emptyList();
      private void ensureArgIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          arg_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument>(arg_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder> argBuilder_;

      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument> getArgList() {
        if (argBuilder_ == null) {
          return java.util.Collections.unmodifiableList(arg_);
        } else {
          return argBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public int getArgCount() {
        if (argBuilder_ == null) {
          return arg_.size();
        } else {
          return argBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument getArg(int index) {
        if (argBuilder_ == null) {
          return arg_.get(index);
        } else {
          return argBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public Builder setArg(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument value) {
        if (argBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgIsMutable();
          arg_.set(index, value);
          onChanged();
        } else {
          argBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public Builder setArg(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder builderForValue) {
        if (argBuilder_ == null) {
          ensureArgIsMutable();
          arg_.set(index, builderForValue.build());
          onChanged();
        } else {
          argBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public Builder addArg(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument value) {
        if (argBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgIsMutable();
          arg_.add(value);
          onChanged();
        } else {
          argBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public Builder addArg(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument value) {
        if (argBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgIsMutable();
          arg_.add(index, value);
          onChanged();
        } else {
          argBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public Builder addArg(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder builderForValue) {
        if (argBuilder_ == null) {
          ensureArgIsMutable();
          arg_.add(builderForValue.build());
          onChanged();
        } else {
          argBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public Builder addArg(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder builderForValue) {
        if (argBuilder_ == null) {
          ensureArgIsMutable();
          arg_.add(index, builderForValue.build());
          onChanged();
        } else {
          argBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public Builder addAllArg(
          java.lang.Iterable<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument> values) {
        if (argBuilder_ == null) {
          ensureArgIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, arg_);
          onChanged();
        } else {
          argBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public Builder clearArg() {
        if (argBuilder_ == null) {
          arg_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          argBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public Builder removeArg(int index) {
        if (argBuilder_ == null) {
          ensureArgIsMutable();
          arg_.remove(index);
          onChanged();
        } else {
          argBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder getArgBuilder(
          int index) {
        return getArgFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder getArgOrBuilder(
          int index) {
        if (argBuilder_ == null) {
          return arg_.get(index);  } else {
          return argBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder> 
           getArgOrBuilderList() {
        if (argBuilder_ != null) {
          return argBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(arg_);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder addArgBuilder() {
        return getArgFieldBuilder().addBuilder(
            dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.getDefaultInstance());
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder addArgBuilder(
          int index) {
        return getArgFieldBuilder().addBuilder(
            index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.getDefaultInstance());
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Argument arg = 6;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder> 
           getArgBuilderList() {
        return getArgFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder> 
          getArgFieldBuilder() {
        if (argBuilder_ == null) {
          argBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.Argument.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ArgumentOrBuilder>(
                  arg_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          arg_ = null;
        }
        return argBuilder_;
      }

      private com.google.protobuf.LazyStringList externalInput_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureExternalInputIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          externalInput_ = new com.google.protobuf.LazyStringArrayList(externalInput_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <pre>
       * Two optional fields to declare external input and output of a net.
       * If these two are set, when a net is created, we will sanity check for
       * every op whether its input is declared (either as an external input,
       * or as an intermediate blob created by one of the ops), and sanity check
       * if all blobs in external_output are produced.
       * In cases of memory optimization, declaring external_input and
       * external_output also ensures that storage of these blobs are persistent:
       * for any blob in external_input and external_output, after a network run
       * finishes, their content are actually the right content. Any intermediate
       * blobs' contents may be overwritten.
       * </pre>
       *
       * <code>repeated string external_input = 7;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getExternalInputList() {
        return externalInput_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Two optional fields to declare external input and output of a net.
       * If these two are set, when a net is created, we will sanity check for
       * every op whether its input is declared (either as an external input,
       * or as an intermediate blob created by one of the ops), and sanity check
       * if all blobs in external_output are produced.
       * In cases of memory optimization, declaring external_input and
       * external_output also ensures that storage of these blobs are persistent:
       * for any blob in external_input and external_output, after a network run
       * finishes, their content are actually the right content. Any intermediate
       * blobs' contents may be overwritten.
       * </pre>
       *
       * <code>repeated string external_input = 7;</code>
       */
      public int getExternalInputCount() {
        return externalInput_.size();
      }
      /**
       * <pre>
       * Two optional fields to declare external input and output of a net.
       * If these two are set, when a net is created, we will sanity check for
       * every op whether its input is declared (either as an external input,
       * or as an intermediate blob created by one of the ops), and sanity check
       * if all blobs in external_output are produced.
       * In cases of memory optimization, declaring external_input and
       * external_output also ensures that storage of these blobs are persistent:
       * for any blob in external_input and external_output, after a network run
       * finishes, their content are actually the right content. Any intermediate
       * blobs' contents may be overwritten.
       * </pre>
       *
       * <code>repeated string external_input = 7;</code>
       */
      public java.lang.String getExternalInput(int index) {
        return externalInput_.get(index);
      }
      /**
       * <pre>
       * Two optional fields to declare external input and output of a net.
       * If these two are set, when a net is created, we will sanity check for
       * every op whether its input is declared (either as an external input,
       * or as an intermediate blob created by one of the ops), and sanity check
       * if all blobs in external_output are produced.
       * In cases of memory optimization, declaring external_input and
       * external_output also ensures that storage of these blobs are persistent:
       * for any blob in external_input and external_output, after a network run
       * finishes, their content are actually the right content. Any intermediate
       * blobs' contents may be overwritten.
       * </pre>
       *
       * <code>repeated string external_input = 7;</code>
       */
      public com.google.protobuf.ByteString
          getExternalInputBytes(int index) {
        return externalInput_.getByteString(index);
      }
      /**
       * <pre>
       * Two optional fields to declare external input and output of a net.
       * If these two are set, when a net is created, we will sanity check for
       * every op whether its input is declared (either as an external input,
       * or as an intermediate blob created by one of the ops), and sanity check
       * if all blobs in external_output are produced.
       * In cases of memory optimization, declaring external_input and
       * external_output also ensures that storage of these blobs are persistent:
       * for any blob in external_input and external_output, after a network run
       * finishes, their content are actually the right content. Any intermediate
       * blobs' contents may be overwritten.
       * </pre>
       *
       * <code>repeated string external_input = 7;</code>
       */
      public Builder setExternalInput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureExternalInputIsMutable();
        externalInput_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Two optional fields to declare external input and output of a net.
       * If these two are set, when a net is created, we will sanity check for
       * every op whether its input is declared (either as an external input,
       * or as an intermediate blob created by one of the ops), and sanity check
       * if all blobs in external_output are produced.
       * In cases of memory optimization, declaring external_input and
       * external_output also ensures that storage of these blobs are persistent:
       * for any blob in external_input and external_output, after a network run
       * finishes, their content are actually the right content. Any intermediate
       * blobs' contents may be overwritten.
       * </pre>
       *
       * <code>repeated string external_input = 7;</code>
       */
      public Builder addExternalInput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureExternalInputIsMutable();
        externalInput_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Two optional fields to declare external input and output of a net.
       * If these two are set, when a net is created, we will sanity check for
       * every op whether its input is declared (either as an external input,
       * or as an intermediate blob created by one of the ops), and sanity check
       * if all blobs in external_output are produced.
       * In cases of memory optimization, declaring external_input and
       * external_output also ensures that storage of these blobs are persistent:
       * for any blob in external_input and external_output, after a network run
       * finishes, their content are actually the right content. Any intermediate
       * blobs' contents may be overwritten.
       * </pre>
       *
       * <code>repeated string external_input = 7;</code>
       */
      public Builder addAllExternalInput(
          java.lang.Iterable<java.lang.String> values) {
        ensureExternalInputIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, externalInput_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Two optional fields to declare external input and output of a net.
       * If these two are set, when a net is created, we will sanity check for
       * every op whether its input is declared (either as an external input,
       * or as an intermediate blob created by one of the ops), and sanity check
       * if all blobs in external_output are produced.
       * In cases of memory optimization, declaring external_input and
       * external_output also ensures that storage of these blobs are persistent:
       * for any blob in external_input and external_output, after a network run
       * finishes, their content are actually the right content. Any intermediate
       * blobs' contents may be overwritten.
       * </pre>
       *
       * <code>repeated string external_input = 7;</code>
       */
      public Builder clearExternalInput() {
        externalInput_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Two optional fields to declare external input and output of a net.
       * If these two are set, when a net is created, we will sanity check for
       * every op whether its input is declared (either as an external input,
       * or as an intermediate blob created by one of the ops), and sanity check
       * if all blobs in external_output are produced.
       * In cases of memory optimization, declaring external_input and
       * external_output also ensures that storage of these blobs are persistent:
       * for any blob in external_input and external_output, after a network run
       * finishes, their content are actually the right content. Any intermediate
       * blobs' contents may be overwritten.
       * </pre>
       *
       * <code>repeated string external_input = 7;</code>
       */
      public Builder addExternalInputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureExternalInputIsMutable();
        externalInput_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList externalOutput_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureExternalOutputIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          externalOutput_ = new com.google.protobuf.LazyStringArrayList(externalOutput_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated string external_output = 8;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getExternalOutputList() {
        return externalOutput_.getUnmodifiableView();
      }
      /**
       * <code>repeated string external_output = 8;</code>
       */
      public int getExternalOutputCount() {
        return externalOutput_.size();
      }
      /**
       * <code>repeated string external_output = 8;</code>
       */
      public java.lang.String getExternalOutput(int index) {
        return externalOutput_.get(index);
      }
      /**
       * <code>repeated string external_output = 8;</code>
       */
      public com.google.protobuf.ByteString
          getExternalOutputBytes(int index) {
        return externalOutput_.getByteString(index);
      }
      /**
       * <code>repeated string external_output = 8;</code>
       */
      public Builder setExternalOutput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureExternalOutputIsMutable();
        externalOutput_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string external_output = 8;</code>
       */
      public Builder addExternalOutput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureExternalOutputIsMutable();
        externalOutput_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string external_output = 8;</code>
       */
      public Builder addAllExternalOutput(
          java.lang.Iterable<java.lang.String> values) {
        ensureExternalOutputIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, externalOutput_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string external_output = 8;</code>
       */
      public Builder clearExternalOutput() {
        externalOutput_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string external_output = 8;</code>
       */
      public Builder addExternalOutputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureExternalOutputIsMutable();
        externalOutput_.add(value);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<NetDef>
        PARSER = new com.google.protobuf.AbstractParser<NetDef>() {
      public NetDef parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NetDef(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<NetDef> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NetDef> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExecutionStepOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ExecutionStep should either contain a set of substeps, or a set of
     * network names to run in this execution step. They should NOT both be set
     * at the same time.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <pre>
     * ExecutionStep should either contain a set of substeps, or a set of
     * network names to run in this execution step. They should NOT both be set
     * at the same time.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * ExecutionStep should either contain a set of substeps, or a set of
     * network names to run in this execution step. They should NOT both be set
     * at the same time.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * An execution step could be recursive, in which it involves a set of
     * substeps.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
     */
    java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep> 
        getSubstepList();
    /**
     * <pre>
     * An execution step could be recursive, in which it involves a set of
     * substeps.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep getSubstep(int index);
    /**
     * <pre>
     * An execution step could be recursive, in which it involves a set of
     * substeps.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
     */
    int getSubstepCount();
    /**
     * <pre>
     * An execution step could be recursive, in which it involves a set of
     * substeps.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
     */
    java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder> 
        getSubstepOrBuilderList();
    /**
     * <pre>
     * An execution step could be recursive, in which it involves a set of
     * substeps.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder getSubstepOrBuilder(
        int index);

    /**
     * <pre>
     * Alternatively, an execution step could involve one or more networks.
     * Note that you cannot have both substeps and networks. Choose one.
     * Note that an execution step refers networks by their name. The actual
     * network definition of the same name should be included in the network field
     * of the plan. The reason is that a network object might hold internal states
     * (think of a data layer), so we want to have the same network object that
     * multiple steps could ask to run.
     * </pre>
     *
     * <code>repeated string network = 3;</code>
     */
    java.util.List<java.lang.String>
        getNetworkList();
    /**
     * <pre>
     * Alternatively, an execution step could involve one or more networks.
     * Note that you cannot have both substeps and networks. Choose one.
     * Note that an execution step refers networks by their name. The actual
     * network definition of the same name should be included in the network field
     * of the plan. The reason is that a network object might hold internal states
     * (think of a data layer), so we want to have the same network object that
     * multiple steps could ask to run.
     * </pre>
     *
     * <code>repeated string network = 3;</code>
     */
    int getNetworkCount();
    /**
     * <pre>
     * Alternatively, an execution step could involve one or more networks.
     * Note that you cannot have both substeps and networks. Choose one.
     * Note that an execution step refers networks by their name. The actual
     * network definition of the same name should be included in the network field
     * of the plan. The reason is that a network object might hold internal states
     * (think of a data layer), so we want to have the same network object that
     * multiple steps could ask to run.
     * </pre>
     *
     * <code>repeated string network = 3;</code>
     */
    java.lang.String getNetwork(int index);
    /**
     * <pre>
     * Alternatively, an execution step could involve one or more networks.
     * Note that you cannot have both substeps and networks. Choose one.
     * Note that an execution step refers networks by their name. The actual
     * network definition of the same name should be included in the network field
     * of the plan. The reason is that a network object might hold internal states
     * (think of a data layer), so we want to have the same network object that
     * multiple steps could ask to run.
     * </pre>
     *
     * <code>repeated string network = 3;</code>
     */
    com.google.protobuf.ByteString
        getNetworkBytes(int index);

    /**
     * <pre>
     * Number of iterations to run this step. The substeps or the networks
     * specified will be run sequentially, and one sequential run is considered
     * one iteration. If this is not set, the number of iterations is assumed to
     * be 1.
     * </pre>
     *
     * <code>optional int64 num_iter = 4;</code>
     */
    boolean hasNumIter();
    /**
     * <pre>
     * Number of iterations to run this step. The substeps or the networks
     * specified will be run sequentially, and one sequential run is considered
     * one iteration. If this is not set, the number of iterations is assumed to
     * be 1.
     * </pre>
     *
     * <code>optional int64 num_iter = 4;</code>
     */
    long getNumIter();

    /**
     * <pre>
     * Criteria network specifies a single output (TensorCPU&lt;bool&gt;) of
     * size (1), is run on every iteration by the executor, and
     * execution terminates when the output[0] is `false`.
     * </pre>
     *
     * <code>optional string criteria_network = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasCriteriaNetwork();
    /**
     * <pre>
     * Criteria network specifies a single output (TensorCPU&lt;bool&gt;) of
     * size (1), is run on every iteration by the executor, and
     * execution terminates when the output[0] is `false`.
     * </pre>
     *
     * <code>optional string criteria_network = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated java.lang.String getCriteriaNetwork();
    /**
     * <pre>
     * Criteria network specifies a single output (TensorCPU&lt;bool&gt;) of
     * size (1), is run on every iteration by the executor, and
     * execution terminates when the output[0] is `false`.
     * </pre>
     *
     * <code>optional string criteria_network = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.protobuf.ByteString
        getCriteriaNetworkBytes();

    /**
     * <pre>
     * DEPRECATED. Use `run_every_ms`.
     * </pre>
     *
     * <code>optional string report_net = 7;</code>
     */
    boolean hasReportNet();
    /**
     * <pre>
     * DEPRECATED. Use `run_every_ms`.
     * </pre>
     *
     * <code>optional string report_net = 7;</code>
     */
    java.lang.String getReportNet();
    /**
     * <pre>
     * DEPRECATED. Use `run_every_ms`.
     * </pre>
     *
     * <code>optional string report_net = 7;</code>
     */
    com.google.protobuf.ByteString
        getReportNetBytes();

    /**
     * <code>optional int32 report_interval = 8;</code>
     */
    boolean hasReportInterval();
    /**
     * <code>optional int32 report_interval = 8;</code>
     */
    int getReportInterval();

    /**
     * <pre>
     * If provided, execute this step at every time interval (in millisecs)
     * while its sibiling execution steps execute in parallel. This step is
     * guaranteed to run at least once after all non-interval siblings finished.
     * </pre>
     *
     * <code>optional int64 run_every_ms = 11;</code>
     */
    boolean hasRunEveryMs();
    /**
     * <pre>
     * If provided, execute this step at every time interval (in millisecs)
     * while its sibiling execution steps execute in parallel. This step is
     * guaranteed to run at least once after all non-interval siblings finished.
     * </pre>
     *
     * <code>optional int64 run_every_ms = 11;</code>
     */
    long getRunEveryMs();

    /**
     * <pre>
     * If false or not set, execute sub-steps serially.
     * If true, execute all substeps concurrently, each one in a separte thread.
     * </pre>
     *
     * <code>optional bool concurrent_substeps = 6;</code>
     */
    boolean hasConcurrentSubsteps();
    /**
     * <pre>
     * If false or not set, execute sub-steps serially.
     * If true, execute all substeps concurrently, each one in a separte thread.
     * </pre>
     *
     * <code>optional bool concurrent_substeps = 6;</code>
     */
    boolean getConcurrentSubsteps();

    /**
     * <pre>
     * Name of a scalar boolean tensor.
     * ES checks this blob AFTER every substeps/subnets.
     * If specified, and the value is true, then ES will skip the rest and return
     * immediately.
     * This means that the report_net and the first step will always be called.
     * Use cases:
     * 1) the first substep stops the rest if data condition not met
     * 2) the first substep decide which of the rest of the steps should be run.
     * 3) external control
     * ** It is the user's responsibility to not to put this blob in race conditions.
     * ** For example when setting this blob in concurrent substeps
     * </pre>
     *
     * <code>optional string should_stop_blob = 9;</code>
     */
    boolean hasShouldStopBlob();
    /**
     * <pre>
     * Name of a scalar boolean tensor.
     * ES checks this blob AFTER every substeps/subnets.
     * If specified, and the value is true, then ES will skip the rest and return
     * immediately.
     * This means that the report_net and the first step will always be called.
     * Use cases:
     * 1) the first substep stops the rest if data condition not met
     * 2) the first substep decide which of the rest of the steps should be run.
     * 3) external control
     * ** It is the user's responsibility to not to put this blob in race conditions.
     * ** For example when setting this blob in concurrent substeps
     * </pre>
     *
     * <code>optional string should_stop_blob = 9;</code>
     */
    java.lang.String getShouldStopBlob();
    /**
     * <pre>
     * Name of a scalar boolean tensor.
     * ES checks this blob AFTER every substeps/subnets.
     * If specified, and the value is true, then ES will skip the rest and return
     * immediately.
     * This means that the report_net and the first step will always be called.
     * Use cases:
     * 1) the first substep stops the rest if data condition not met
     * 2) the first substep decide which of the rest of the steps should be run.
     * 3) external control
     * ** It is the user's responsibility to not to put this blob in race conditions.
     * ** For example when setting this blob in concurrent substeps
     * </pre>
     *
     * <code>optional string should_stop_blob = 9;</code>
     */
    com.google.protobuf.ByteString
        getShouldStopBlobBytes();

    /**
     * <pre>
     * if only_once is true, this step will only be executed once. this ONLY takes
     * effect when using should_stop_blob
     * </pre>
     *
     * <code>optional bool only_once = 10;</code>
     */
    boolean hasOnlyOnce();
    /**
     * <pre>
     * if only_once is true, this step will only be executed once. this ONLY takes
     * effect when using should_stop_blob
     * </pre>
     *
     * <code>optional bool only_once = 10;</code>
     */
    boolean getOnlyOnce();

    /**
     * <pre>
     * Whether to create a child workspace for this step.
     * If yes, the workflow and nets are re-created every time this step is run.
     * </pre>
     *
     * <code>optional bool create_workspace = 12;</code>
     */
    boolean hasCreateWorkspace();
    /**
     * <pre>
     * Whether to create a child workspace for this step.
     * If yes, the workflow and nets are re-created every time this step is run.
     * </pre>
     *
     * <code>optional bool create_workspace = 12;</code>
     */
    boolean getCreateWorkspace();

    /**
     * <pre>
     * How many copies of the children execution steps to run concurrently.
     * </pre>
     *
     * <code>optional int32 num_concurrent_instances = 13;</code>
     */
    boolean hasNumConcurrentInstances();
    /**
     * <pre>
     * How many copies of the children execution steps to run concurrently.
     * </pre>
     *
     * <code>optional int32 num_concurrent_instances = 13;</code>
     */
    int getNumConcurrentInstances();
  }
  /**
   * <pre>
   * ExecutionStep is actually a sort-of-hacky way we simulate iteration right
   * now.
   * </pre>
   *
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep}
   */
  public  static final class ExecutionStep extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep)
      ExecutionStepOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExecutionStep.newBuilder() to construct.
    private ExecutionStep(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExecutionStep() {
      name_ = "";
      substep_ = java.util.Collections.emptyList();
      network_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      numIter_ = 0L;
      criteriaNetwork_ = "";
      reportNet_ = "";
      reportInterval_ = 0;
      runEveryMs_ = 0L;
      concurrentSubsteps_ = false;
      shouldStopBlob_ = "";
      onlyOnce_ = false;
      createWorkspace_ = false;
      numConcurrentInstances_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExecutionStep(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                substep_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep>();
                mutable_bitField0_ |= 0x00000002;
              }
              substep_.add(
                  input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                network_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              network_.add(bs);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              numIter_ = input.readInt64();
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              criteriaNetwork_ = bs;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000040;
              concurrentSubsteps_ = input.readBool();
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              reportNet_ = bs;
              break;
            }
            case 64: {
              bitField0_ |= 0x00000010;
              reportInterval_ = input.readInt32();
              break;
            }
            case 74: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000080;
              shouldStopBlob_ = bs;
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              onlyOnce_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000020;
              runEveryMs_ = input.readInt64();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000200;
              createWorkspace_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000400;
              numConcurrentInstances_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          substep_ = java.util.Collections.unmodifiableList(substep_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          network_ = network_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExecutionStep_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExecutionStep_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * ExecutionStep should either contain a set of substeps, or a set of
     * network names to run in this execution step. They should NOT both be set
     * at the same time.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * ExecutionStep should either contain a set of substeps, or a set of
     * network names to run in this execution step. They should NOT both be set
     * at the same time.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * ExecutionStep should either contain a set of substeps, or a set of
     * network names to run in this execution step. They should NOT both be set
     * at the same time.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SUBSTEP_FIELD_NUMBER = 2;
    private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep> substep_;
    /**
     * <pre>
     * An execution step could be recursive, in which it involves a set of
     * substeps.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
     */
    public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep> getSubstepList() {
      return substep_;
    }
    /**
     * <pre>
     * An execution step could be recursive, in which it involves a set of
     * substeps.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
     */
    public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder> 
        getSubstepOrBuilderList() {
      return substep_;
    }
    /**
     * <pre>
     * An execution step could be recursive, in which it involves a set of
     * substeps.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
     */
    public int getSubstepCount() {
      return substep_.size();
    }
    /**
     * <pre>
     * An execution step could be recursive, in which it involves a set of
     * substeps.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep getSubstep(int index) {
      return substep_.get(index);
    }
    /**
     * <pre>
     * An execution step could be recursive, in which it involves a set of
     * substeps.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder getSubstepOrBuilder(
        int index) {
      return substep_.get(index);
    }

    public static final int NETWORK_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList network_;
    /**
     * <pre>
     * Alternatively, an execution step could involve one or more networks.
     * Note that you cannot have both substeps and networks. Choose one.
     * Note that an execution step refers networks by their name. The actual
     * network definition of the same name should be included in the network field
     * of the plan. The reason is that a network object might hold internal states
     * (think of a data layer), so we want to have the same network object that
     * multiple steps could ask to run.
     * </pre>
     *
     * <code>repeated string network = 3;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getNetworkList() {
      return network_;
    }
    /**
     * <pre>
     * Alternatively, an execution step could involve one or more networks.
     * Note that you cannot have both substeps and networks. Choose one.
     * Note that an execution step refers networks by their name. The actual
     * network definition of the same name should be included in the network field
     * of the plan. The reason is that a network object might hold internal states
     * (think of a data layer), so we want to have the same network object that
     * multiple steps could ask to run.
     * </pre>
     *
     * <code>repeated string network = 3;</code>
     */
    public int getNetworkCount() {
      return network_.size();
    }
    /**
     * <pre>
     * Alternatively, an execution step could involve one or more networks.
     * Note that you cannot have both substeps and networks. Choose one.
     * Note that an execution step refers networks by their name. The actual
     * network definition of the same name should be included in the network field
     * of the plan. The reason is that a network object might hold internal states
     * (think of a data layer), so we want to have the same network object that
     * multiple steps could ask to run.
     * </pre>
     *
     * <code>repeated string network = 3;</code>
     */
    public java.lang.String getNetwork(int index) {
      return network_.get(index);
    }
    /**
     * <pre>
     * Alternatively, an execution step could involve one or more networks.
     * Note that you cannot have both substeps and networks. Choose one.
     * Note that an execution step refers networks by their name. The actual
     * network definition of the same name should be included in the network field
     * of the plan. The reason is that a network object might hold internal states
     * (think of a data layer), so we want to have the same network object that
     * multiple steps could ask to run.
     * </pre>
     *
     * <code>repeated string network = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNetworkBytes(int index) {
      return network_.getByteString(index);
    }

    public static final int NUM_ITER_FIELD_NUMBER = 4;
    private long numIter_;
    /**
     * <pre>
     * Number of iterations to run this step. The substeps or the networks
     * specified will be run sequentially, and one sequential run is considered
     * one iteration. If this is not set, the number of iterations is assumed to
     * be 1.
     * </pre>
     *
     * <code>optional int64 num_iter = 4;</code>
     */
    public boolean hasNumIter() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Number of iterations to run this step. The substeps or the networks
     * specified will be run sequentially, and one sequential run is considered
     * one iteration. If this is not set, the number of iterations is assumed to
     * be 1.
     * </pre>
     *
     * <code>optional int64 num_iter = 4;</code>
     */
    public long getNumIter() {
      return numIter_;
    }

    public static final int CRITERIA_NETWORK_FIELD_NUMBER = 5;
    private volatile java.lang.Object criteriaNetwork_;
    /**
     * <pre>
     * Criteria network specifies a single output (TensorCPU&lt;bool&gt;) of
     * size (1), is run on every iteration by the executor, and
     * execution terminates when the output[0] is `false`.
     * </pre>
     *
     * <code>optional string criteria_network = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasCriteriaNetwork() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Criteria network specifies a single output (TensorCPU&lt;bool&gt;) of
     * size (1), is run on every iteration by the executor, and
     * execution terminates when the output[0] is `false`.
     * </pre>
     *
     * <code>optional string criteria_network = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.lang.String getCriteriaNetwork() {
      java.lang.Object ref = criteriaNetwork_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          criteriaNetwork_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Criteria network specifies a single output (TensorCPU&lt;bool&gt;) of
     * size (1), is run on every iteration by the executor, and
     * execution terminates when the output[0] is `false`.
     * </pre>
     *
     * <code>optional string criteria_network = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.ByteString
        getCriteriaNetworkBytes() {
      java.lang.Object ref = criteriaNetwork_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        criteriaNetwork_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REPORT_NET_FIELD_NUMBER = 7;
    private volatile java.lang.Object reportNet_;
    /**
     * <pre>
     * DEPRECATED. Use `run_every_ms`.
     * </pre>
     *
     * <code>optional string report_net = 7;</code>
     */
    public boolean hasReportNet() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * DEPRECATED. Use `run_every_ms`.
     * </pre>
     *
     * <code>optional string report_net = 7;</code>
     */
    public java.lang.String getReportNet() {
      java.lang.Object ref = reportNet_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          reportNet_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * DEPRECATED. Use `run_every_ms`.
     * </pre>
     *
     * <code>optional string report_net = 7;</code>
     */
    public com.google.protobuf.ByteString
        getReportNetBytes() {
      java.lang.Object ref = reportNet_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        reportNet_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REPORT_INTERVAL_FIELD_NUMBER = 8;
    private int reportInterval_;
    /**
     * <code>optional int32 report_interval = 8;</code>
     */
    public boolean hasReportInterval() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 report_interval = 8;</code>
     */
    public int getReportInterval() {
      return reportInterval_;
    }

    public static final int RUN_EVERY_MS_FIELD_NUMBER = 11;
    private long runEveryMs_;
    /**
     * <pre>
     * If provided, execute this step at every time interval (in millisecs)
     * while its sibiling execution steps execute in parallel. This step is
     * guaranteed to run at least once after all non-interval siblings finished.
     * </pre>
     *
     * <code>optional int64 run_every_ms = 11;</code>
     */
    public boolean hasRunEveryMs() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * If provided, execute this step at every time interval (in millisecs)
     * while its sibiling execution steps execute in parallel. This step is
     * guaranteed to run at least once after all non-interval siblings finished.
     * </pre>
     *
     * <code>optional int64 run_every_ms = 11;</code>
     */
    public long getRunEveryMs() {
      return runEveryMs_;
    }

    public static final int CONCURRENT_SUBSTEPS_FIELD_NUMBER = 6;
    private boolean concurrentSubsteps_;
    /**
     * <pre>
     * If false or not set, execute sub-steps serially.
     * If true, execute all substeps concurrently, each one in a separte thread.
     * </pre>
     *
     * <code>optional bool concurrent_substeps = 6;</code>
     */
    public boolean hasConcurrentSubsteps() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * If false or not set, execute sub-steps serially.
     * If true, execute all substeps concurrently, each one in a separte thread.
     * </pre>
     *
     * <code>optional bool concurrent_substeps = 6;</code>
     */
    public boolean getConcurrentSubsteps() {
      return concurrentSubsteps_;
    }

    public static final int SHOULD_STOP_BLOB_FIELD_NUMBER = 9;
    private volatile java.lang.Object shouldStopBlob_;
    /**
     * <pre>
     * Name of a scalar boolean tensor.
     * ES checks this blob AFTER every substeps/subnets.
     * If specified, and the value is true, then ES will skip the rest and return
     * immediately.
     * This means that the report_net and the first step will always be called.
     * Use cases:
     * 1) the first substep stops the rest if data condition not met
     * 2) the first substep decide which of the rest of the steps should be run.
     * 3) external control
     * ** It is the user's responsibility to not to put this blob in race conditions.
     * ** For example when setting this blob in concurrent substeps
     * </pre>
     *
     * <code>optional string should_stop_blob = 9;</code>
     */
    public boolean hasShouldStopBlob() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * Name of a scalar boolean tensor.
     * ES checks this blob AFTER every substeps/subnets.
     * If specified, and the value is true, then ES will skip the rest and return
     * immediately.
     * This means that the report_net and the first step will always be called.
     * Use cases:
     * 1) the first substep stops the rest if data condition not met
     * 2) the first substep decide which of the rest of the steps should be run.
     * 3) external control
     * ** It is the user's responsibility to not to put this blob in race conditions.
     * ** For example when setting this blob in concurrent substeps
     * </pre>
     *
     * <code>optional string should_stop_blob = 9;</code>
     */
    public java.lang.String getShouldStopBlob() {
      java.lang.Object ref = shouldStopBlob_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          shouldStopBlob_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Name of a scalar boolean tensor.
     * ES checks this blob AFTER every substeps/subnets.
     * If specified, and the value is true, then ES will skip the rest and return
     * immediately.
     * This means that the report_net and the first step will always be called.
     * Use cases:
     * 1) the first substep stops the rest if data condition not met
     * 2) the first substep decide which of the rest of the steps should be run.
     * 3) external control
     * ** It is the user's responsibility to not to put this blob in race conditions.
     * ** For example when setting this blob in concurrent substeps
     * </pre>
     *
     * <code>optional string should_stop_blob = 9;</code>
     */
    public com.google.protobuf.ByteString
        getShouldStopBlobBytes() {
      java.lang.Object ref = shouldStopBlob_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        shouldStopBlob_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ONLY_ONCE_FIELD_NUMBER = 10;
    private boolean onlyOnce_;
    /**
     * <pre>
     * if only_once is true, this step will only be executed once. this ONLY takes
     * effect when using should_stop_blob
     * </pre>
     *
     * <code>optional bool only_once = 10;</code>
     */
    public boolean hasOnlyOnce() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * if only_once is true, this step will only be executed once. this ONLY takes
     * effect when using should_stop_blob
     * </pre>
     *
     * <code>optional bool only_once = 10;</code>
     */
    public boolean getOnlyOnce() {
      return onlyOnce_;
    }

    public static final int CREATE_WORKSPACE_FIELD_NUMBER = 12;
    private boolean createWorkspace_;
    /**
     * <pre>
     * Whether to create a child workspace for this step.
     * If yes, the workflow and nets are re-created every time this step is run.
     * </pre>
     *
     * <code>optional bool create_workspace = 12;</code>
     */
    public boolean hasCreateWorkspace() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * Whether to create a child workspace for this step.
     * If yes, the workflow and nets are re-created every time this step is run.
     * </pre>
     *
     * <code>optional bool create_workspace = 12;</code>
     */
    public boolean getCreateWorkspace() {
      return createWorkspace_;
    }

    public static final int NUM_CONCURRENT_INSTANCES_FIELD_NUMBER = 13;
    private int numConcurrentInstances_;
    /**
     * <pre>
     * How many copies of the children execution steps to run concurrently.
     * </pre>
     *
     * <code>optional int32 num_concurrent_instances = 13;</code>
     */
    public boolean hasNumConcurrentInstances() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     * How many copies of the children execution steps to run concurrently.
     * </pre>
     *
     * <code>optional int32 num_concurrent_instances = 13;</code>
     */
    public int getNumConcurrentInstances() {
      return numConcurrentInstances_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      for (int i = 0; i < substep_.size(); i++) {
        output.writeMessage(2, substep_.get(i));
      }
      for (int i = 0; i < network_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, network_.getRaw(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(4, numIter_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, criteriaNetwork_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(6, concurrentSubsteps_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, reportNet_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(8, reportInterval_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 9, shouldStopBlob_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(10, onlyOnce_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt64(11, runEveryMs_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(12, createWorkspace_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(13, numConcurrentInstances_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      for (int i = 0; i < substep_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, substep_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < network_.size(); i++) {
          dataSize += computeStringSizeNoTag(network_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getNetworkList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, numIter_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, criteriaNetwork_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, concurrentSubsteps_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, reportNet_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, reportInterval_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, shouldStopBlob_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, onlyOnce_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(11, runEveryMs_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, createWorkspace_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, numConcurrentInstances_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && getSubstepList()
          .equals(other.getSubstepList());
      result = result && getNetworkList()
          .equals(other.getNetworkList());
      result = result && (hasNumIter() == other.hasNumIter());
      if (hasNumIter()) {
        result = result && (getNumIter()
            == other.getNumIter());
      }
      result = result && (hasCriteriaNetwork() == other.hasCriteriaNetwork());
      if (hasCriteriaNetwork()) {
        result = result && getCriteriaNetwork()
            .equals(other.getCriteriaNetwork());
      }
      result = result && (hasReportNet() == other.hasReportNet());
      if (hasReportNet()) {
        result = result && getReportNet()
            .equals(other.getReportNet());
      }
      result = result && (hasReportInterval() == other.hasReportInterval());
      if (hasReportInterval()) {
        result = result && (getReportInterval()
            == other.getReportInterval());
      }
      result = result && (hasRunEveryMs() == other.hasRunEveryMs());
      if (hasRunEveryMs()) {
        result = result && (getRunEveryMs()
            == other.getRunEveryMs());
      }
      result = result && (hasConcurrentSubsteps() == other.hasConcurrentSubsteps());
      if (hasConcurrentSubsteps()) {
        result = result && (getConcurrentSubsteps()
            == other.getConcurrentSubsteps());
      }
      result = result && (hasShouldStopBlob() == other.hasShouldStopBlob());
      if (hasShouldStopBlob()) {
        result = result && getShouldStopBlob()
            .equals(other.getShouldStopBlob());
      }
      result = result && (hasOnlyOnce() == other.hasOnlyOnce());
      if (hasOnlyOnce()) {
        result = result && (getOnlyOnce()
            == other.getOnlyOnce());
      }
      result = result && (hasCreateWorkspace() == other.hasCreateWorkspace());
      if (hasCreateWorkspace()) {
        result = result && (getCreateWorkspace()
            == other.getCreateWorkspace());
      }
      result = result && (hasNumConcurrentInstances() == other.hasNumConcurrentInstances());
      if (hasNumConcurrentInstances()) {
        result = result && (getNumConcurrentInstances()
            == other.getNumConcurrentInstances());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (getSubstepCount() > 0) {
        hash = (37 * hash) + SUBSTEP_FIELD_NUMBER;
        hash = (53 * hash) + getSubstepList().hashCode();
      }
      if (getNetworkCount() > 0) {
        hash = (37 * hash) + NETWORK_FIELD_NUMBER;
        hash = (53 * hash) + getNetworkList().hashCode();
      }
      if (hasNumIter()) {
        hash = (37 * hash) + NUM_ITER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getNumIter());
      }
      if (hasCriteriaNetwork()) {
        hash = (37 * hash) + CRITERIA_NETWORK_FIELD_NUMBER;
        hash = (53 * hash) + getCriteriaNetwork().hashCode();
      }
      if (hasReportNet()) {
        hash = (37 * hash) + REPORT_NET_FIELD_NUMBER;
        hash = (53 * hash) + getReportNet().hashCode();
      }
      if (hasReportInterval()) {
        hash = (37 * hash) + REPORT_INTERVAL_FIELD_NUMBER;
        hash = (53 * hash) + getReportInterval();
      }
      if (hasRunEveryMs()) {
        hash = (37 * hash) + RUN_EVERY_MS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getRunEveryMs());
      }
      if (hasConcurrentSubsteps()) {
        hash = (37 * hash) + CONCURRENT_SUBSTEPS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getConcurrentSubsteps());
      }
      if (hasShouldStopBlob()) {
        hash = (37 * hash) + SHOULD_STOP_BLOB_FIELD_NUMBER;
        hash = (53 * hash) + getShouldStopBlob().hashCode();
      }
      if (hasOnlyOnce()) {
        hash = (37 * hash) + ONLY_ONCE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getOnlyOnce());
      }
      if (hasCreateWorkspace()) {
        hash = (37 * hash) + CREATE_WORKSPACE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getCreateWorkspace());
      }
      if (hasNumConcurrentInstances()) {
        hash = (37 * hash) + NUM_CONCURRENT_INSTANCES_FIELD_NUMBER;
        hash = (53 * hash) + getNumConcurrentInstances();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ExecutionStep is actually a sort-of-hacky way we simulate iteration right
     * now.
     * </pre>
     *
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExecutionStep_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExecutionStep_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSubstepFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (substepBuilder_ == null) {
          substep_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          substepBuilder_.clear();
        }
        network_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        numIter_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        criteriaNetwork_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        reportNet_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        reportInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        runEveryMs_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        concurrentSubsteps_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        shouldStopBlob_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        onlyOnce_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        createWorkspace_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        numConcurrentInstances_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExecutionStep_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (substepBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            substep_ = java.util.Collections.unmodifiableList(substep_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.substep_ = substep_;
        } else {
          result.substep_ = substepBuilder_.build();
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          network_ = network_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.network_ = network_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.numIter_ = numIter_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.criteriaNetwork_ = criteriaNetwork_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.reportNet_ = reportNet_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.reportInterval_ = reportInterval_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.runEveryMs_ = runEveryMs_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.concurrentSubsteps_ = concurrentSubsteps_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.shouldStopBlob_ = shouldStopBlob_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000100;
        }
        result.onlyOnce_ = onlyOnce_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000200;
        }
        result.createWorkspace_ = createWorkspace_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.numConcurrentInstances_ = numConcurrentInstances_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (substepBuilder_ == null) {
          if (!other.substep_.isEmpty()) {
            if (substep_.isEmpty()) {
              substep_ = other.substep_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSubstepIsMutable();
              substep_.addAll(other.substep_);
            }
            onChanged();
          }
        } else {
          if (!other.substep_.isEmpty()) {
            if (substepBuilder_.isEmpty()) {
              substepBuilder_.dispose();
              substepBuilder_ = null;
              substep_ = other.substep_;
              bitField0_ = (bitField0_ & ~0x00000002);
              substepBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSubstepFieldBuilder() : null;
            } else {
              substepBuilder_.addAllMessages(other.substep_);
            }
          }
        }
        if (!other.network_.isEmpty()) {
          if (network_.isEmpty()) {
            network_ = other.network_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureNetworkIsMutable();
            network_.addAll(other.network_);
          }
          onChanged();
        }
        if (other.hasNumIter()) {
          setNumIter(other.getNumIter());
        }
        if (other.hasCriteriaNetwork()) {
          bitField0_ |= 0x00000010;
          criteriaNetwork_ = other.criteriaNetwork_;
          onChanged();
        }
        if (other.hasReportNet()) {
          bitField0_ |= 0x00000020;
          reportNet_ = other.reportNet_;
          onChanged();
        }
        if (other.hasReportInterval()) {
          setReportInterval(other.getReportInterval());
        }
        if (other.hasRunEveryMs()) {
          setRunEveryMs(other.getRunEveryMs());
        }
        if (other.hasConcurrentSubsteps()) {
          setConcurrentSubsteps(other.getConcurrentSubsteps());
        }
        if (other.hasShouldStopBlob()) {
          bitField0_ |= 0x00000200;
          shouldStopBlob_ = other.shouldStopBlob_;
          onChanged();
        }
        if (other.hasOnlyOnce()) {
          setOnlyOnce(other.getOnlyOnce());
        }
        if (other.hasCreateWorkspace()) {
          setCreateWorkspace(other.getCreateWorkspace());
        }
        if (other.hasNumConcurrentInstances()) {
          setNumConcurrentInstances(other.getNumConcurrentInstances());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * ExecutionStep should either contain a set of substeps, or a set of
       * network names to run in this execution step. They should NOT both be set
       * at the same time.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * ExecutionStep should either contain a set of substeps, or a set of
       * network names to run in this execution step. They should NOT both be set
       * at the same time.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ExecutionStep should either contain a set of substeps, or a set of
       * network names to run in this execution step. They should NOT both be set
       * at the same time.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ExecutionStep should either contain a set of substeps, or a set of
       * network names to run in this execution step. They should NOT both be set
       * at the same time.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ExecutionStep should either contain a set of substeps, or a set of
       * network names to run in this execution step. They should NOT both be set
       * at the same time.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ExecutionStep should either contain a set of substeps, or a set of
       * network names to run in this execution step. They should NOT both be set
       * at the same time.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep> substep_ =
        java.util.Collections.emptyList();
      private void ensureSubstepIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          substep_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep>(substep_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder> substepBuilder_;

      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep> getSubstepList() {
        if (substepBuilder_ == null) {
          return java.util.Collections.unmodifiableList(substep_);
        } else {
          return substepBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public int getSubstepCount() {
        if (substepBuilder_ == null) {
          return substep_.size();
        } else {
          return substepBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep getSubstep(int index) {
        if (substepBuilder_ == null) {
          return substep_.get(index);
        } else {
          return substepBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public Builder setSubstep(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep value) {
        if (substepBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubstepIsMutable();
          substep_.set(index, value);
          onChanged();
        } else {
          substepBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public Builder setSubstep(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder builderForValue) {
        if (substepBuilder_ == null) {
          ensureSubstepIsMutable();
          substep_.set(index, builderForValue.build());
          onChanged();
        } else {
          substepBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public Builder addSubstep(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep value) {
        if (substepBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubstepIsMutable();
          substep_.add(value);
          onChanged();
        } else {
          substepBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public Builder addSubstep(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep value) {
        if (substepBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubstepIsMutable();
          substep_.add(index, value);
          onChanged();
        } else {
          substepBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public Builder addSubstep(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder builderForValue) {
        if (substepBuilder_ == null) {
          ensureSubstepIsMutable();
          substep_.add(builderForValue.build());
          onChanged();
        } else {
          substepBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public Builder addSubstep(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder builderForValue) {
        if (substepBuilder_ == null) {
          ensureSubstepIsMutable();
          substep_.add(index, builderForValue.build());
          onChanged();
        } else {
          substepBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public Builder addAllSubstep(
          java.lang.Iterable<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep> values) {
        if (substepBuilder_ == null) {
          ensureSubstepIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, substep_);
          onChanged();
        } else {
          substepBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public Builder clearSubstep() {
        if (substepBuilder_ == null) {
          substep_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          substepBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public Builder removeSubstep(int index) {
        if (substepBuilder_ == null) {
          ensureSubstepIsMutable();
          substep_.remove(index);
          onChanged();
        } else {
          substepBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder getSubstepBuilder(
          int index) {
        return getSubstepFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder getSubstepOrBuilder(
          int index) {
        if (substepBuilder_ == null) {
          return substep_.get(index);  } else {
          return substepBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder> 
           getSubstepOrBuilderList() {
        if (substepBuilder_ != null) {
          return substepBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(substep_);
        }
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder addSubstepBuilder() {
        return getSubstepFieldBuilder().addBuilder(
            dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.getDefaultInstance());
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder addSubstepBuilder(
          int index) {
        return getSubstepFieldBuilder().addBuilder(
            index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.getDefaultInstance());
      }
      /**
       * <pre>
       * An execution step could be recursive, in which it involves a set of
       * substeps.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep substep = 2;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder> 
           getSubstepBuilderList() {
        return getSubstepFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder> 
          getSubstepFieldBuilder() {
        if (substepBuilder_ == null) {
          substepBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder>(
                  substep_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          substep_ = null;
        }
        return substepBuilder_;
      }

      private com.google.protobuf.LazyStringList network_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureNetworkIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          network_ = new com.google.protobuf.LazyStringArrayList(network_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * Alternatively, an execution step could involve one or more networks.
       * Note that you cannot have both substeps and networks. Choose one.
       * Note that an execution step refers networks by their name. The actual
       * network definition of the same name should be included in the network field
       * of the plan. The reason is that a network object might hold internal states
       * (think of a data layer), so we want to have the same network object that
       * multiple steps could ask to run.
       * </pre>
       *
       * <code>repeated string network = 3;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getNetworkList() {
        return network_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Alternatively, an execution step could involve one or more networks.
       * Note that you cannot have both substeps and networks. Choose one.
       * Note that an execution step refers networks by their name. The actual
       * network definition of the same name should be included in the network field
       * of the plan. The reason is that a network object might hold internal states
       * (think of a data layer), so we want to have the same network object that
       * multiple steps could ask to run.
       * </pre>
       *
       * <code>repeated string network = 3;</code>
       */
      public int getNetworkCount() {
        return network_.size();
      }
      /**
       * <pre>
       * Alternatively, an execution step could involve one or more networks.
       * Note that you cannot have both substeps and networks. Choose one.
       * Note that an execution step refers networks by their name. The actual
       * network definition of the same name should be included in the network field
       * of the plan. The reason is that a network object might hold internal states
       * (think of a data layer), so we want to have the same network object that
       * multiple steps could ask to run.
       * </pre>
       *
       * <code>repeated string network = 3;</code>
       */
      public java.lang.String getNetwork(int index) {
        return network_.get(index);
      }
      /**
       * <pre>
       * Alternatively, an execution step could involve one or more networks.
       * Note that you cannot have both substeps and networks. Choose one.
       * Note that an execution step refers networks by their name. The actual
       * network definition of the same name should be included in the network field
       * of the plan. The reason is that a network object might hold internal states
       * (think of a data layer), so we want to have the same network object that
       * multiple steps could ask to run.
       * </pre>
       *
       * <code>repeated string network = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNetworkBytes(int index) {
        return network_.getByteString(index);
      }
      /**
       * <pre>
       * Alternatively, an execution step could involve one or more networks.
       * Note that you cannot have both substeps and networks. Choose one.
       * Note that an execution step refers networks by their name. The actual
       * network definition of the same name should be included in the network field
       * of the plan. The reason is that a network object might hold internal states
       * (think of a data layer), so we want to have the same network object that
       * multiple steps could ask to run.
       * </pre>
       *
       * <code>repeated string network = 3;</code>
       */
      public Builder setNetwork(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNetworkIsMutable();
        network_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Alternatively, an execution step could involve one or more networks.
       * Note that you cannot have both substeps and networks. Choose one.
       * Note that an execution step refers networks by their name. The actual
       * network definition of the same name should be included in the network field
       * of the plan. The reason is that a network object might hold internal states
       * (think of a data layer), so we want to have the same network object that
       * multiple steps could ask to run.
       * </pre>
       *
       * <code>repeated string network = 3;</code>
       */
      public Builder addNetwork(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNetworkIsMutable();
        network_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Alternatively, an execution step could involve one or more networks.
       * Note that you cannot have both substeps and networks. Choose one.
       * Note that an execution step refers networks by their name. The actual
       * network definition of the same name should be included in the network field
       * of the plan. The reason is that a network object might hold internal states
       * (think of a data layer), so we want to have the same network object that
       * multiple steps could ask to run.
       * </pre>
       *
       * <code>repeated string network = 3;</code>
       */
      public Builder addAllNetwork(
          java.lang.Iterable<java.lang.String> values) {
        ensureNetworkIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, network_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Alternatively, an execution step could involve one or more networks.
       * Note that you cannot have both substeps and networks. Choose one.
       * Note that an execution step refers networks by their name. The actual
       * network definition of the same name should be included in the network field
       * of the plan. The reason is that a network object might hold internal states
       * (think of a data layer), so we want to have the same network object that
       * multiple steps could ask to run.
       * </pre>
       *
       * <code>repeated string network = 3;</code>
       */
      public Builder clearNetwork() {
        network_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Alternatively, an execution step could involve one or more networks.
       * Note that you cannot have both substeps and networks. Choose one.
       * Note that an execution step refers networks by their name. The actual
       * network definition of the same name should be included in the network field
       * of the plan. The reason is that a network object might hold internal states
       * (think of a data layer), so we want to have the same network object that
       * multiple steps could ask to run.
       * </pre>
       *
       * <code>repeated string network = 3;</code>
       */
      public Builder addNetworkBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNetworkIsMutable();
        network_.add(value);
        onChanged();
        return this;
      }

      private long numIter_ ;
      /**
       * <pre>
       * Number of iterations to run this step. The substeps or the networks
       * specified will be run sequentially, and one sequential run is considered
       * one iteration. If this is not set, the number of iterations is assumed to
       * be 1.
       * </pre>
       *
       * <code>optional int64 num_iter = 4;</code>
       */
      public boolean hasNumIter() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Number of iterations to run this step. The substeps or the networks
       * specified will be run sequentially, and one sequential run is considered
       * one iteration. If this is not set, the number of iterations is assumed to
       * be 1.
       * </pre>
       *
       * <code>optional int64 num_iter = 4;</code>
       */
      public long getNumIter() {
        return numIter_;
      }
      /**
       * <pre>
       * Number of iterations to run this step. The substeps or the networks
       * specified will be run sequentially, and one sequential run is considered
       * one iteration. If this is not set, the number of iterations is assumed to
       * be 1.
       * </pre>
       *
       * <code>optional int64 num_iter = 4;</code>
       */
      public Builder setNumIter(long value) {
        bitField0_ |= 0x00000008;
        numIter_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of iterations to run this step. The substeps or the networks
       * specified will be run sequentially, and one sequential run is considered
       * one iteration. If this is not set, the number of iterations is assumed to
       * be 1.
       * </pre>
       *
       * <code>optional int64 num_iter = 4;</code>
       */
      public Builder clearNumIter() {
        bitField0_ = (bitField0_ & ~0x00000008);
        numIter_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object criteriaNetwork_ = "";
      /**
       * <pre>
       * Criteria network specifies a single output (TensorCPU&lt;bool&gt;) of
       * size (1), is run on every iteration by the executor, and
       * execution terminates when the output[0] is `false`.
       * </pre>
       *
       * <code>optional string criteria_network = 5 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasCriteriaNetwork() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * Criteria network specifies a single output (TensorCPU&lt;bool&gt;) of
       * size (1), is run on every iteration by the executor, and
       * execution terminates when the output[0] is `false`.
       * </pre>
       *
       * <code>optional string criteria_network = 5 [deprecated = true];</code>
       */
      @java.lang.Deprecated public java.lang.String getCriteriaNetwork() {
        java.lang.Object ref = criteriaNetwork_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            criteriaNetwork_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Criteria network specifies a single output (TensorCPU&lt;bool&gt;) of
       * size (1), is run on every iteration by the executor, and
       * execution terminates when the output[0] is `false`.
       * </pre>
       *
       * <code>optional string criteria_network = 5 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.protobuf.ByteString
          getCriteriaNetworkBytes() {
        java.lang.Object ref = criteriaNetwork_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          criteriaNetwork_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Criteria network specifies a single output (TensorCPU&lt;bool&gt;) of
       * size (1), is run on every iteration by the executor, and
       * execution terminates when the output[0] is `false`.
       * </pre>
       *
       * <code>optional string criteria_network = 5 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setCriteriaNetwork(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        criteriaNetwork_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Criteria network specifies a single output (TensorCPU&lt;bool&gt;) of
       * size (1), is run on every iteration by the executor, and
       * execution terminates when the output[0] is `false`.
       * </pre>
       *
       * <code>optional string criteria_network = 5 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearCriteriaNetwork() {
        bitField0_ = (bitField0_ & ~0x00000010);
        criteriaNetwork_ = getDefaultInstance().getCriteriaNetwork();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Criteria network specifies a single output (TensorCPU&lt;bool&gt;) of
       * size (1), is run on every iteration by the executor, and
       * execution terminates when the output[0] is `false`.
       * </pre>
       *
       * <code>optional string criteria_network = 5 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setCriteriaNetworkBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        criteriaNetwork_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object reportNet_ = "";
      /**
       * <pre>
       * DEPRECATED. Use `run_every_ms`.
       * </pre>
       *
       * <code>optional string report_net = 7;</code>
       */
      public boolean hasReportNet() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * DEPRECATED. Use `run_every_ms`.
       * </pre>
       *
       * <code>optional string report_net = 7;</code>
       */
      public java.lang.String getReportNet() {
        java.lang.Object ref = reportNet_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            reportNet_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * DEPRECATED. Use `run_every_ms`.
       * </pre>
       *
       * <code>optional string report_net = 7;</code>
       */
      public com.google.protobuf.ByteString
          getReportNetBytes() {
        java.lang.Object ref = reportNet_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          reportNet_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * DEPRECATED. Use `run_every_ms`.
       * </pre>
       *
       * <code>optional string report_net = 7;</code>
       */
      public Builder setReportNet(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        reportNet_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * DEPRECATED. Use `run_every_ms`.
       * </pre>
       *
       * <code>optional string report_net = 7;</code>
       */
      public Builder clearReportNet() {
        bitField0_ = (bitField0_ & ~0x00000020);
        reportNet_ = getDefaultInstance().getReportNet();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * DEPRECATED. Use `run_every_ms`.
       * </pre>
       *
       * <code>optional string report_net = 7;</code>
       */
      public Builder setReportNetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        reportNet_ = value;
        onChanged();
        return this;
      }

      private int reportInterval_ ;
      /**
       * <code>optional int32 report_interval = 8;</code>
       */
      public boolean hasReportInterval() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 report_interval = 8;</code>
       */
      public int getReportInterval() {
        return reportInterval_;
      }
      /**
       * <code>optional int32 report_interval = 8;</code>
       */
      public Builder setReportInterval(int value) {
        bitField0_ |= 0x00000040;
        reportInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 report_interval = 8;</code>
       */
      public Builder clearReportInterval() {
        bitField0_ = (bitField0_ & ~0x00000040);
        reportInterval_ = 0;
        onChanged();
        return this;
      }

      private long runEveryMs_ ;
      /**
       * <pre>
       * If provided, execute this step at every time interval (in millisecs)
       * while its sibiling execution steps execute in parallel. This step is
       * guaranteed to run at least once after all non-interval siblings finished.
       * </pre>
       *
       * <code>optional int64 run_every_ms = 11;</code>
       */
      public boolean hasRunEveryMs() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * If provided, execute this step at every time interval (in millisecs)
       * while its sibiling execution steps execute in parallel. This step is
       * guaranteed to run at least once after all non-interval siblings finished.
       * </pre>
       *
       * <code>optional int64 run_every_ms = 11;</code>
       */
      public long getRunEveryMs() {
        return runEveryMs_;
      }
      /**
       * <pre>
       * If provided, execute this step at every time interval (in millisecs)
       * while its sibiling execution steps execute in parallel. This step is
       * guaranteed to run at least once after all non-interval siblings finished.
       * </pre>
       *
       * <code>optional int64 run_every_ms = 11;</code>
       */
      public Builder setRunEveryMs(long value) {
        bitField0_ |= 0x00000080;
        runEveryMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If provided, execute this step at every time interval (in millisecs)
       * while its sibiling execution steps execute in parallel. This step is
       * guaranteed to run at least once after all non-interval siblings finished.
       * </pre>
       *
       * <code>optional int64 run_every_ms = 11;</code>
       */
      public Builder clearRunEveryMs() {
        bitField0_ = (bitField0_ & ~0x00000080);
        runEveryMs_ = 0L;
        onChanged();
        return this;
      }

      private boolean concurrentSubsteps_ ;
      /**
       * <pre>
       * If false or not set, execute sub-steps serially.
       * If true, execute all substeps concurrently, each one in a separte thread.
       * </pre>
       *
       * <code>optional bool concurrent_substeps = 6;</code>
       */
      public boolean hasConcurrentSubsteps() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * If false or not set, execute sub-steps serially.
       * If true, execute all substeps concurrently, each one in a separte thread.
       * </pre>
       *
       * <code>optional bool concurrent_substeps = 6;</code>
       */
      public boolean getConcurrentSubsteps() {
        return concurrentSubsteps_;
      }
      /**
       * <pre>
       * If false or not set, execute sub-steps serially.
       * If true, execute all substeps concurrently, each one in a separte thread.
       * </pre>
       *
       * <code>optional bool concurrent_substeps = 6;</code>
       */
      public Builder setConcurrentSubsteps(boolean value) {
        bitField0_ |= 0x00000100;
        concurrentSubsteps_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If false or not set, execute sub-steps serially.
       * If true, execute all substeps concurrently, each one in a separte thread.
       * </pre>
       *
       * <code>optional bool concurrent_substeps = 6;</code>
       */
      public Builder clearConcurrentSubsteps() {
        bitField0_ = (bitField0_ & ~0x00000100);
        concurrentSubsteps_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object shouldStopBlob_ = "";
      /**
       * <pre>
       * Name of a scalar boolean tensor.
       * ES checks this blob AFTER every substeps/subnets.
       * If specified, and the value is true, then ES will skip the rest and return
       * immediately.
       * This means that the report_net and the first step will always be called.
       * Use cases:
       * 1) the first substep stops the rest if data condition not met
       * 2) the first substep decide which of the rest of the steps should be run.
       * 3) external control
       * ** It is the user's responsibility to not to put this blob in race conditions.
       * ** For example when setting this blob in concurrent substeps
       * </pre>
       *
       * <code>optional string should_stop_blob = 9;</code>
       */
      public boolean hasShouldStopBlob() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * Name of a scalar boolean tensor.
       * ES checks this blob AFTER every substeps/subnets.
       * If specified, and the value is true, then ES will skip the rest and return
       * immediately.
       * This means that the report_net and the first step will always be called.
       * Use cases:
       * 1) the first substep stops the rest if data condition not met
       * 2) the first substep decide which of the rest of the steps should be run.
       * 3) external control
       * ** It is the user's responsibility to not to put this blob in race conditions.
       * ** For example when setting this blob in concurrent substeps
       * </pre>
       *
       * <code>optional string should_stop_blob = 9;</code>
       */
      public java.lang.String getShouldStopBlob() {
        java.lang.Object ref = shouldStopBlob_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            shouldStopBlob_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of a scalar boolean tensor.
       * ES checks this blob AFTER every substeps/subnets.
       * If specified, and the value is true, then ES will skip the rest and return
       * immediately.
       * This means that the report_net and the first step will always be called.
       * Use cases:
       * 1) the first substep stops the rest if data condition not met
       * 2) the first substep decide which of the rest of the steps should be run.
       * 3) external control
       * ** It is the user's responsibility to not to put this blob in race conditions.
       * ** For example when setting this blob in concurrent substeps
       * </pre>
       *
       * <code>optional string should_stop_blob = 9;</code>
       */
      public com.google.protobuf.ByteString
          getShouldStopBlobBytes() {
        java.lang.Object ref = shouldStopBlob_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          shouldStopBlob_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of a scalar boolean tensor.
       * ES checks this blob AFTER every substeps/subnets.
       * If specified, and the value is true, then ES will skip the rest and return
       * immediately.
       * This means that the report_net and the first step will always be called.
       * Use cases:
       * 1) the first substep stops the rest if data condition not met
       * 2) the first substep decide which of the rest of the steps should be run.
       * 3) external control
       * ** It is the user's responsibility to not to put this blob in race conditions.
       * ** For example when setting this blob in concurrent substeps
       * </pre>
       *
       * <code>optional string should_stop_blob = 9;</code>
       */
      public Builder setShouldStopBlob(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        shouldStopBlob_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of a scalar boolean tensor.
       * ES checks this blob AFTER every substeps/subnets.
       * If specified, and the value is true, then ES will skip the rest and return
       * immediately.
       * This means that the report_net and the first step will always be called.
       * Use cases:
       * 1) the first substep stops the rest if data condition not met
       * 2) the first substep decide which of the rest of the steps should be run.
       * 3) external control
       * ** It is the user's responsibility to not to put this blob in race conditions.
       * ** For example when setting this blob in concurrent substeps
       * </pre>
       *
       * <code>optional string should_stop_blob = 9;</code>
       */
      public Builder clearShouldStopBlob() {
        bitField0_ = (bitField0_ & ~0x00000200);
        shouldStopBlob_ = getDefaultInstance().getShouldStopBlob();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of a scalar boolean tensor.
       * ES checks this blob AFTER every substeps/subnets.
       * If specified, and the value is true, then ES will skip the rest and return
       * immediately.
       * This means that the report_net and the first step will always be called.
       * Use cases:
       * 1) the first substep stops the rest if data condition not met
       * 2) the first substep decide which of the rest of the steps should be run.
       * 3) external control
       * ** It is the user's responsibility to not to put this blob in race conditions.
       * ** For example when setting this blob in concurrent substeps
       * </pre>
       *
       * <code>optional string should_stop_blob = 9;</code>
       */
      public Builder setShouldStopBlobBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        shouldStopBlob_ = value;
        onChanged();
        return this;
      }

      private boolean onlyOnce_ ;
      /**
       * <pre>
       * if only_once is true, this step will only be executed once. this ONLY takes
       * effect when using should_stop_blob
       * </pre>
       *
       * <code>optional bool only_once = 10;</code>
       */
      public boolean hasOnlyOnce() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * if only_once is true, this step will only be executed once. this ONLY takes
       * effect when using should_stop_blob
       * </pre>
       *
       * <code>optional bool only_once = 10;</code>
       */
      public boolean getOnlyOnce() {
        return onlyOnce_;
      }
      /**
       * <pre>
       * if only_once is true, this step will only be executed once. this ONLY takes
       * effect when using should_stop_blob
       * </pre>
       *
       * <code>optional bool only_once = 10;</code>
       */
      public Builder setOnlyOnce(boolean value) {
        bitField0_ |= 0x00000400;
        onlyOnce_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if only_once is true, this step will only be executed once. this ONLY takes
       * effect when using should_stop_blob
       * </pre>
       *
       * <code>optional bool only_once = 10;</code>
       */
      public Builder clearOnlyOnce() {
        bitField0_ = (bitField0_ & ~0x00000400);
        onlyOnce_ = false;
        onChanged();
        return this;
      }

      private boolean createWorkspace_ ;
      /**
       * <pre>
       * Whether to create a child workspace for this step.
       * If yes, the workflow and nets are re-created every time this step is run.
       * </pre>
       *
       * <code>optional bool create_workspace = 12;</code>
       */
      public boolean hasCreateWorkspace() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * Whether to create a child workspace for this step.
       * If yes, the workflow and nets are re-created every time this step is run.
       * </pre>
       *
       * <code>optional bool create_workspace = 12;</code>
       */
      public boolean getCreateWorkspace() {
        return createWorkspace_;
      }
      /**
       * <pre>
       * Whether to create a child workspace for this step.
       * If yes, the workflow and nets are re-created every time this step is run.
       * </pre>
       *
       * <code>optional bool create_workspace = 12;</code>
       */
      public Builder setCreateWorkspace(boolean value) {
        bitField0_ |= 0x00000800;
        createWorkspace_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to create a child workspace for this step.
       * If yes, the workflow and nets are re-created every time this step is run.
       * </pre>
       *
       * <code>optional bool create_workspace = 12;</code>
       */
      public Builder clearCreateWorkspace() {
        bitField0_ = (bitField0_ & ~0x00000800);
        createWorkspace_ = false;
        onChanged();
        return this;
      }

      private int numConcurrentInstances_ ;
      /**
       * <pre>
       * How many copies of the children execution steps to run concurrently.
       * </pre>
       *
       * <code>optional int32 num_concurrent_instances = 13;</code>
       */
      public boolean hasNumConcurrentInstances() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       * How many copies of the children execution steps to run concurrently.
       * </pre>
       *
       * <code>optional int32 num_concurrent_instances = 13;</code>
       */
      public int getNumConcurrentInstances() {
        return numConcurrentInstances_;
      }
      /**
       * <pre>
       * How many copies of the children execution steps to run concurrently.
       * </pre>
       *
       * <code>optional int32 num_concurrent_instances = 13;</code>
       */
      public Builder setNumConcurrentInstances(int value) {
        bitField0_ |= 0x00001000;
        numConcurrentInstances_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * How many copies of the children execution steps to run concurrently.
       * </pre>
       *
       * <code>optional int32 num_concurrent_instances = 13;</code>
       */
      public Builder clearNumConcurrentInstances() {
        bitField0_ = (bitField0_ & ~0x00001000);
        numConcurrentInstances_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ExecutionStep>
        PARSER = new com.google.protobuf.AbstractParser<ExecutionStep>() {
      public ExecutionStep parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExecutionStep(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ExecutionStep> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExecutionStep> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PlanDefOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.PlanDef)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * All the networks that are used in this execution. Note that networks should
     * be ordered in the way they are executed, i.e. for a layer in a network, all
     * its input blobs should already have been initialized by the layers or
     * networks defined before it.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <pre>
     * All the networks that are used in this execution. Note that networks should
     * be ordered in the way they are executed, i.e. for a layer in a network, all
     * its input blobs should already have been initialized by the layers or
     * networks defined before it.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * All the networks that are used in this execution. Note that networks should
     * be ordered in the way they are executed, i.e. for a layer in a network, all
     * its input blobs should already have been initialized by the layers or
     * networks defined before it.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The networks that are going to be used in this plan.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
     */
    java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef> 
        getNetworkList();
    /**
     * <pre>
     * The networks that are going to be used in this plan.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef getNetwork(int index);
    /**
     * <pre>
     * The networks that are going to be used in this plan.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
     */
    int getNetworkCount();
    /**
     * <pre>
     * The networks that are going to be used in this plan.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
     */
    java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder> 
        getNetworkOrBuilderList();
    /**
     * <pre>
     * The networks that are going to be used in this plan.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder getNetworkOrBuilder(
        int index);

    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
     */
    java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep> 
        getExecutionStepList();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep getExecutionStep(int index);
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
     */
    int getExecutionStepCount();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
     */
    java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder> 
        getExecutionStepOrBuilderList();
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder getExecutionStepOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.PlanDef}
   */
  public  static final class PlanDef extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.PlanDef)
      PlanDefOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PlanDef.newBuilder() to construct.
    private PlanDef(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PlanDef() {
      name_ = "";
      network_ = java.util.Collections.emptyList();
      executionStep_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PlanDef(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                network_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef>();
                mutable_bitField0_ |= 0x00000002;
              }
              network_.add(
                  input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                executionStep_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep>();
                mutable_bitField0_ |= 0x00000004;
              }
              executionStep_.add(
                  input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          network_ = java.util.Collections.unmodifiableList(network_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          executionStep_ = java.util.Collections.unmodifiableList(executionStep_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_PlanDef_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_PlanDef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * All the networks that are used in this execution. Note that networks should
     * be ordered in the way they are executed, i.e. for a layer in a network, all
     * its input blobs should already have been initialized by the layers or
     * networks defined before it.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * All the networks that are used in this execution. Note that networks should
     * be ordered in the way they are executed, i.e. for a layer in a network, all
     * its input blobs should already have been initialized by the layers or
     * networks defined before it.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * All the networks that are used in this execution. Note that networks should
     * be ordered in the way they are executed, i.e. for a layer in a network, all
     * its input blobs should already have been initialized by the layers or
     * networks defined before it.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NETWORK_FIELD_NUMBER = 2;
    private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef> network_;
    /**
     * <pre>
     * The networks that are going to be used in this plan.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
     */
    public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef> getNetworkList() {
      return network_;
    }
    /**
     * <pre>
     * The networks that are going to be used in this plan.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
     */
    public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder> 
        getNetworkOrBuilderList() {
      return network_;
    }
    /**
     * <pre>
     * The networks that are going to be used in this plan.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
     */
    public int getNetworkCount() {
      return network_.size();
    }
    /**
     * <pre>
     * The networks that are going to be used in this plan.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef getNetwork(int index) {
      return network_.get(index);
    }
    /**
     * <pre>
     * The networks that are going to be used in this plan.
     * </pre>
     *
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder getNetworkOrBuilder(
        int index) {
      return network_.get(index);
    }

    public static final int EXECUTION_STEP_FIELD_NUMBER = 3;
    private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep> executionStep_;
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
     */
    public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep> getExecutionStepList() {
      return executionStep_;
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
     */
    public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder> 
        getExecutionStepOrBuilderList() {
      return executionStep_;
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
     */
    public int getExecutionStepCount() {
      return executionStep_.size();
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep getExecutionStep(int index) {
      return executionStep_.get(index);
    }
    /**
     * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder getExecutionStepOrBuilder(
        int index) {
      return executionStep_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getNetworkCount(); i++) {
        if (!getNetwork(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      for (int i = 0; i < network_.size(); i++) {
        output.writeMessage(2, network_.get(i));
      }
      for (int i = 0; i < executionStep_.size(); i++) {
        output.writeMessage(3, executionStep_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      for (int i = 0; i < network_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, network_.get(i));
      }
      for (int i = 0; i < executionStep_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, executionStep_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && getNetworkList()
          .equals(other.getNetworkList());
      result = result && getExecutionStepList()
          .equals(other.getExecutionStepList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (getNetworkCount() > 0) {
        hash = (37 * hash) + NETWORK_FIELD_NUMBER;
        hash = (53 * hash) + getNetworkList().hashCode();
      }
      if (getExecutionStepCount() > 0) {
        hash = (37 * hash) + EXECUTION_STEP_FIELD_NUMBER;
        hash = (53 * hash) + getExecutionStepList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.PlanDef}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.PlanDef)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDefOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_PlanDef_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_PlanDef_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getNetworkFieldBuilder();
          getExecutionStepFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (networkBuilder_ == null) {
          network_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          networkBuilder_.clear();
        }
        if (executionStepBuilder_ == null) {
          executionStep_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          executionStepBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_PlanDef_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (networkBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            network_ = java.util.Collections.unmodifiableList(network_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.network_ = network_;
        } else {
          result.network_ = networkBuilder_.build();
        }
        if (executionStepBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            executionStep_ = java.util.Collections.unmodifiableList(executionStep_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.executionStep_ = executionStep_;
        } else {
          result.executionStep_ = executionStepBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (networkBuilder_ == null) {
          if (!other.network_.isEmpty()) {
            if (network_.isEmpty()) {
              network_ = other.network_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureNetworkIsMutable();
              network_.addAll(other.network_);
            }
            onChanged();
          }
        } else {
          if (!other.network_.isEmpty()) {
            if (networkBuilder_.isEmpty()) {
              networkBuilder_.dispose();
              networkBuilder_ = null;
              network_ = other.network_;
              bitField0_ = (bitField0_ & ~0x00000002);
              networkBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getNetworkFieldBuilder() : null;
            } else {
              networkBuilder_.addAllMessages(other.network_);
            }
          }
        }
        if (executionStepBuilder_ == null) {
          if (!other.executionStep_.isEmpty()) {
            if (executionStep_.isEmpty()) {
              executionStep_ = other.executionStep_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureExecutionStepIsMutable();
              executionStep_.addAll(other.executionStep_);
            }
            onChanged();
          }
        } else {
          if (!other.executionStep_.isEmpty()) {
            if (executionStepBuilder_.isEmpty()) {
              executionStepBuilder_.dispose();
              executionStepBuilder_ = null;
              executionStep_ = other.executionStep_;
              bitField0_ = (bitField0_ & ~0x00000004);
              executionStepBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getExecutionStepFieldBuilder() : null;
            } else {
              executionStepBuilder_.addAllMessages(other.executionStep_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getNetworkCount(); i++) {
          if (!getNetwork(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * All the networks that are used in this execution. Note that networks should
       * be ordered in the way they are executed, i.e. for a layer in a network, all
       * its input blobs should already have been initialized by the layers or
       * networks defined before it.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * All the networks that are used in this execution. Note that networks should
       * be ordered in the way they are executed, i.e. for a layer in a network, all
       * its input blobs should already have been initialized by the layers or
       * networks defined before it.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * All the networks that are used in this execution. Note that networks should
       * be ordered in the way they are executed, i.e. for a layer in a network, all
       * its input blobs should already have been initialized by the layers or
       * networks defined before it.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * All the networks that are used in this execution. Note that networks should
       * be ordered in the way they are executed, i.e. for a layer in a network, all
       * its input blobs should already have been initialized by the layers or
       * networks defined before it.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All the networks that are used in this execution. Note that networks should
       * be ordered in the way they are executed, i.e. for a layer in a network, all
       * its input blobs should already have been initialized by the layers or
       * networks defined before it.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All the networks that are used in this execution. Note that networks should
       * be ordered in the way they are executed, i.e. for a layer in a network, all
       * its input blobs should already have been initialized by the layers or
       * networks defined before it.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef> network_ =
        java.util.Collections.emptyList();
      private void ensureNetworkIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          network_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef>(network_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder> networkBuilder_;

      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef> getNetworkList() {
        if (networkBuilder_ == null) {
          return java.util.Collections.unmodifiableList(network_);
        } else {
          return networkBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public int getNetworkCount() {
        if (networkBuilder_ == null) {
          return network_.size();
        } else {
          return networkBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef getNetwork(int index) {
        if (networkBuilder_ == null) {
          return network_.get(index);
        } else {
          return networkBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public Builder setNetwork(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef value) {
        if (networkBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNetworkIsMutable();
          network_.set(index, value);
          onChanged();
        } else {
          networkBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public Builder setNetwork(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder builderForValue) {
        if (networkBuilder_ == null) {
          ensureNetworkIsMutable();
          network_.set(index, builderForValue.build());
          onChanged();
        } else {
          networkBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public Builder addNetwork(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef value) {
        if (networkBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNetworkIsMutable();
          network_.add(value);
          onChanged();
        } else {
          networkBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public Builder addNetwork(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef value) {
        if (networkBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNetworkIsMutable();
          network_.add(index, value);
          onChanged();
        } else {
          networkBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public Builder addNetwork(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder builderForValue) {
        if (networkBuilder_ == null) {
          ensureNetworkIsMutable();
          network_.add(builderForValue.build());
          onChanged();
        } else {
          networkBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public Builder addNetwork(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder builderForValue) {
        if (networkBuilder_ == null) {
          ensureNetworkIsMutable();
          network_.add(index, builderForValue.build());
          onChanged();
        } else {
          networkBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public Builder addAllNetwork(
          java.lang.Iterable<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef> values) {
        if (networkBuilder_ == null) {
          ensureNetworkIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, network_);
          onChanged();
        } else {
          networkBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public Builder clearNetwork() {
        if (networkBuilder_ == null) {
          network_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          networkBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public Builder removeNetwork(int index) {
        if (networkBuilder_ == null) {
          ensureNetworkIsMutable();
          network_.remove(index);
          onChanged();
        } else {
          networkBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder getNetworkBuilder(
          int index) {
        return getNetworkFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder getNetworkOrBuilder(
          int index) {
        if (networkBuilder_ == null) {
          return network_.get(index);  } else {
          return networkBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder> 
           getNetworkOrBuilderList() {
        if (networkBuilder_ != null) {
          return networkBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(network_);
        }
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder addNetworkBuilder() {
        return getNetworkFieldBuilder().addBuilder(
            dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.getDefaultInstance());
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder addNetworkBuilder(
          int index) {
        return getNetworkFieldBuilder().addBuilder(
            index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.getDefaultInstance());
      }
      /**
       * <pre>
       * The networks that are going to be used in this plan.
       * </pre>
       *
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.NetDef network = 2;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder> 
           getNetworkBuilderList() {
        return getNetworkFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder> 
          getNetworkFieldBuilder() {
        if (networkBuilder_ == null) {
          networkBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDef.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.NetDefOrBuilder>(
                  network_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          network_ = null;
        }
        return networkBuilder_;
      }

      private java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep> executionStep_ =
        java.util.Collections.emptyList();
      private void ensureExecutionStepIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          executionStep_ = new java.util.ArrayList<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep>(executionStep_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder> executionStepBuilder_;

      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep> getExecutionStepList() {
        if (executionStepBuilder_ == null) {
          return java.util.Collections.unmodifiableList(executionStep_);
        } else {
          return executionStepBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public int getExecutionStepCount() {
        if (executionStepBuilder_ == null) {
          return executionStep_.size();
        } else {
          return executionStepBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep getExecutionStep(int index) {
        if (executionStepBuilder_ == null) {
          return executionStep_.get(index);
        } else {
          return executionStepBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public Builder setExecutionStep(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep value) {
        if (executionStepBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExecutionStepIsMutable();
          executionStep_.set(index, value);
          onChanged();
        } else {
          executionStepBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public Builder setExecutionStep(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder builderForValue) {
        if (executionStepBuilder_ == null) {
          ensureExecutionStepIsMutable();
          executionStep_.set(index, builderForValue.build());
          onChanged();
        } else {
          executionStepBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public Builder addExecutionStep(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep value) {
        if (executionStepBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExecutionStepIsMutable();
          executionStep_.add(value);
          onChanged();
        } else {
          executionStepBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public Builder addExecutionStep(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep value) {
        if (executionStepBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExecutionStepIsMutable();
          executionStep_.add(index, value);
          onChanged();
        } else {
          executionStepBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public Builder addExecutionStep(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder builderForValue) {
        if (executionStepBuilder_ == null) {
          ensureExecutionStepIsMutable();
          executionStep_.add(builderForValue.build());
          onChanged();
        } else {
          executionStepBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public Builder addExecutionStep(
          int index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder builderForValue) {
        if (executionStepBuilder_ == null) {
          ensureExecutionStepIsMutable();
          executionStep_.add(index, builderForValue.build());
          onChanged();
        } else {
          executionStepBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public Builder addAllExecutionStep(
          java.lang.Iterable<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep> values) {
        if (executionStepBuilder_ == null) {
          ensureExecutionStepIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, executionStep_);
          onChanged();
        } else {
          executionStepBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public Builder clearExecutionStep() {
        if (executionStepBuilder_ == null) {
          executionStep_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          executionStepBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public Builder removeExecutionStep(int index) {
        if (executionStepBuilder_ == null) {
          ensureExecutionStepIsMutable();
          executionStep_.remove(index);
          onChanged();
        } else {
          executionStepBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder getExecutionStepBuilder(
          int index) {
        return getExecutionStepFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder getExecutionStepOrBuilder(
          int index) {
        if (executionStepBuilder_ == null) {
          return executionStep_.get(index);  } else {
          return executionStepBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public java.util.List<? extends dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder> 
           getExecutionStepOrBuilderList() {
        if (executionStepBuilder_ != null) {
          return executionStepBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(executionStep_);
        }
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder addExecutionStepBuilder() {
        return getExecutionStepFieldBuilder().addBuilder(
            dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.getDefaultInstance());
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder addExecutionStepBuilder(
          int index) {
        return getExecutionStepFieldBuilder().addBuilder(
            index, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.getDefaultInstance());
      }
      /**
       * <code>repeated .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.ExecutionStep execution_step = 3;</code>
       */
      public java.util.List<dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder> 
           getExecutionStepBuilderList() {
        return getExecutionStepFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder> 
          getExecutionStepFieldBuilder() {
        if (executionStepBuilder_ == null) {
          executionStepBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStep.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.ExecutionStepOrBuilder>(
                  executionStep_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          executionStep_ = null;
        }
        return executionStepBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.PlanDef)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.PlanDef)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<PlanDef>
        PARSER = new com.google.protobuf.AbstractParser<PlanDef>() {
      public PlanDef parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlanDef(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PlanDef> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PlanDef> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.PlanDef getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BlobProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.BlobProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional string type = 2;</code>
     */
    boolean hasType();
    /**
     * <code>optional string type = 2;</code>
     */
    java.lang.String getType();
    /**
     * <code>optional string type = 2;</code>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
     */
    boolean hasTensor();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getTensor();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder getTensorOrBuilder();

    /**
     * <code>optional bytes content = 4;</code>
     */
    boolean hasContent();
    /**
     * <code>optional bytes content = 4;</code>
     */
    com.google.protobuf.ByteString getContent();

    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
     */
    boolean hasQtensor();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto getQtensor();
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
     */
    dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProtoOrBuilder getQtensorOrBuilder();

    /**
     * <pre>
     * If blob is not Tensor and is divided into chunks, content_num_chunks
     * contains number of chunks, into which blob was divided.
     * </pre>
     *
     * <code>optional int32 content_num_chunks = 6;</code>
     */
    boolean hasContentNumChunks();
    /**
     * <pre>
     * If blob is not Tensor and is divided into chunks, content_num_chunks
     * contains number of chunks, into which blob was divided.
     * </pre>
     *
     * <code>optional int32 content_num_chunks = 6;</code>
     */
    int getContentNumChunks();

    /**
     * <code>optional int32 content_chunk_id = 7;</code>
     */
    boolean hasContentChunkId();
    /**
     * <code>optional int32 content_chunk_id = 7;</code>
     */
    int getContentChunkId();
  }
  /**
   * <pre>
   * Protobuf format for blobs that are not Tensors. We use a key to store the
   * type of the blob. For example for a serialized DBProto, the type should
   * be "DBReader" and the content should be a serialized DBProto object.
   * </pre>
   *
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.BlobProto}
   */
  public  static final class BlobProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.BlobProto)
      BlobProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BlobProto.newBuilder() to construct.
    private BlobProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BlobProto() {
      name_ = "";
      type_ = "";
      content_ = com.google.protobuf.ByteString.EMPTY;
      contentNumChunks_ = 0;
      contentChunkId_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BlobProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              type_ = bs;
              break;
            }
            case 26: {
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = tensor_.toBuilder();
              }
              tensor_ = input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tensor_);
                tensor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              content_ = input.readBytes();
              break;
            }
            case 42: {
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = qtensor_.toBuilder();
              }
              qtensor_ = input.readMessage(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(qtensor_);
                qtensor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              contentNumChunks_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              contentChunkId_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_BlobProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_BlobProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private volatile java.lang.Object type_;
    /**
     * <code>optional string type = 2;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string type = 2;</code>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string type = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TENSOR_FIELD_NUMBER = 3;
    private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto tensor_;
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
     */
    public boolean hasTensor() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getTensor() {
      return tensor_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance() : tensor_;
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder getTensorOrBuilder() {
      return tensor_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance() : tensor_;
    }

    public static final int CONTENT_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString content_;
    /**
     * <code>optional bytes content = 4;</code>
     */
    public boolean hasContent() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes content = 4;</code>
     */
    public com.google.protobuf.ByteString getContent() {
      return content_;
    }

    public static final int QTENSOR_FIELD_NUMBER = 5;
    private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto qtensor_;
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
     */
    public boolean hasQtensor() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto getQtensor() {
      return qtensor_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.getDefaultInstance() : qtensor_;
    }
    /**
     * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
     */
    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProtoOrBuilder getQtensorOrBuilder() {
      return qtensor_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.getDefaultInstance() : qtensor_;
    }

    public static final int CONTENT_NUM_CHUNKS_FIELD_NUMBER = 6;
    private int contentNumChunks_;
    /**
     * <pre>
     * If blob is not Tensor and is divided into chunks, content_num_chunks
     * contains number of chunks, into which blob was divided.
     * </pre>
     *
     * <code>optional int32 content_num_chunks = 6;</code>
     */
    public boolean hasContentNumChunks() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * If blob is not Tensor and is divided into chunks, content_num_chunks
     * contains number of chunks, into which blob was divided.
     * </pre>
     *
     * <code>optional int32 content_num_chunks = 6;</code>
     */
    public int getContentNumChunks() {
      return contentNumChunks_;
    }

    public static final int CONTENT_CHUNK_ID_FIELD_NUMBER = 7;
    private int contentChunkId_;
    /**
     * <code>optional int32 content_chunk_id = 7;</code>
     */
    public boolean hasContentChunkId() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 content_chunk_id = 7;</code>
     */
    public int getContentChunkId() {
      return contentChunkId_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasTensor()) {
        if (!getTensor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasQtensor()) {
        if (!getQtensor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, type_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, getTensor());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, content_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, getQtensor());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, contentNumChunks_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, contentChunkId_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, type_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getTensor());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, content_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getQtensor());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, contentNumChunks_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, contentChunkId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result && getType()
            .equals(other.getType());
      }
      result = result && (hasTensor() == other.hasTensor());
      if (hasTensor()) {
        result = result && getTensor()
            .equals(other.getTensor());
      }
      result = result && (hasContent() == other.hasContent());
      if (hasContent()) {
        result = result && getContent()
            .equals(other.getContent());
      }
      result = result && (hasQtensor() == other.hasQtensor());
      if (hasQtensor()) {
        result = result && getQtensor()
            .equals(other.getQtensor());
      }
      result = result && (hasContentNumChunks() == other.hasContentNumChunks());
      if (hasContentNumChunks()) {
        result = result && (getContentNumChunks()
            == other.getContentNumChunks());
      }
      result = result && (hasContentChunkId() == other.hasContentChunkId());
      if (hasContentChunkId()) {
        result = result && (getContentChunkId()
            == other.getContentChunkId());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getType().hashCode();
      }
      if (hasTensor()) {
        hash = (37 * hash) + TENSOR_FIELD_NUMBER;
        hash = (53 * hash) + getTensor().hashCode();
      }
      if (hasContent()) {
        hash = (37 * hash) + CONTENT_FIELD_NUMBER;
        hash = (53 * hash) + getContent().hashCode();
      }
      if (hasQtensor()) {
        hash = (37 * hash) + QTENSOR_FIELD_NUMBER;
        hash = (53 * hash) + getQtensor().hashCode();
      }
      if (hasContentNumChunks()) {
        hash = (37 * hash) + CONTENT_NUM_CHUNKS_FIELD_NUMBER;
        hash = (53 * hash) + getContentNumChunks();
      }
      if (hasContentChunkId()) {
        hash = (37 * hash) + CONTENT_CHUNK_ID_FIELD_NUMBER;
        hash = (53 * hash) + getContentChunkId();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Protobuf format for blobs that are not Tensors. We use a key to store the
     * type of the blob. For example for a serialized DBProto, the type should
     * be "DBReader" and the content should be a serialized DBProto object.
     * </pre>
     *
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.BlobProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.BlobProto)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_BlobProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_BlobProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTensorFieldBuilder();
          getQtensorFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (tensorBuilder_ == null) {
          tensor_ = null;
        } else {
          tensorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        content_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (qtensorBuilder_ == null) {
          qtensor_ = null;
        } else {
          qtensorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        contentNumChunks_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        contentChunkId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_BlobProto_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (tensorBuilder_ == null) {
          result.tensor_ = tensor_;
        } else {
          result.tensor_ = tensorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.content_ = content_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (qtensorBuilder_ == null) {
          result.qtensor_ = qtensor_;
        } else {
          result.qtensor_ = qtensorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.contentNumChunks_ = contentNumChunks_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.contentChunkId_ = contentChunkId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasType()) {
          bitField0_ |= 0x00000002;
          type_ = other.type_;
          onChanged();
        }
        if (other.hasTensor()) {
          mergeTensor(other.getTensor());
        }
        if (other.hasContent()) {
          setContent(other.getContent());
        }
        if (other.hasQtensor()) {
          mergeQtensor(other.getQtensor());
        }
        if (other.hasContentNumChunks()) {
          setContentNumChunks(other.getContentNumChunks());
        }
        if (other.hasContentChunkId()) {
          setContentChunkId(other.getContentChunkId());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (hasTensor()) {
          if (!getTensor().isInitialized()) {
            return false;
          }
        }
        if (hasQtensor()) {
          if (!getQtensor().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object type_ = "";
      /**
       * <code>optional string type = 2;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string type = 2;</code>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            type_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string type = 2;</code>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string type = 2;</code>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 2;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 2;</code>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }

      private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto tensor_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> tensorBuilder_;
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
       */
      public boolean hasTensor() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto getTensor() {
        if (tensorBuilder_ == null) {
          return tensor_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance() : tensor_;
        } else {
          return tensorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
       */
      public Builder setTensor(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto value) {
        if (tensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tensor_ = value;
          onChanged();
        } else {
          tensorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
       */
      public Builder setTensor(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder builderForValue) {
        if (tensorBuilder_ == null) {
          tensor_ = builderForValue.build();
          onChanged();
        } else {
          tensorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
       */
      public Builder mergeTensor(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto value) {
        if (tensorBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              tensor_ != null &&
              tensor_ != dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance()) {
            tensor_ =
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.newBuilder(tensor_).mergeFrom(value).buildPartial();
          } else {
            tensor_ = value;
          }
          onChanged();
        } else {
          tensorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
       */
      public Builder clearTensor() {
        if (tensorBuilder_ == null) {
          tensor_ = null;
          onChanged();
        } else {
          tensorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder getTensorBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getTensorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder getTensorOrBuilder() {
        if (tensorBuilder_ != null) {
          return tensorBuilder_.getMessageOrBuilder();
        } else {
          return tensor_ == null ?
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.getDefaultInstance() : tensor_;
        }
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.TensorProto tensor = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder> 
          getTensorFieldBuilder() {
        if (tensorBuilder_ == null) {
          tensorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.TensorProtoOrBuilder>(
                  getTensor(),
                  getParentForChildren(),
                  isClean());
          tensor_ = null;
        }
        return tensorBuilder_;
      }

      private com.google.protobuf.ByteString content_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes content = 4;</code>
       */
      public boolean hasContent() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes content = 4;</code>
       */
      public com.google.protobuf.ByteString getContent() {
        return content_;
      }
      /**
       * <code>optional bytes content = 4;</code>
       */
      public Builder setContent(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        content_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes content = 4;</code>
       */
      public Builder clearContent() {
        bitField0_ = (bitField0_ & ~0x00000008);
        content_ = getDefaultInstance().getContent();
        onChanged();
        return this;
      }

      private dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto qtensor_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProtoOrBuilder> qtensorBuilder_;
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
       */
      public boolean hasQtensor() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto getQtensor() {
        if (qtensorBuilder_ == null) {
          return qtensor_ == null ? dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.getDefaultInstance() : qtensor_;
        } else {
          return qtensorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
       */
      public Builder setQtensor(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto value) {
        if (qtensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          qtensor_ = value;
          onChanged();
        } else {
          qtensorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
       */
      public Builder setQtensor(
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.Builder builderForValue) {
        if (qtensorBuilder_ == null) {
          qtensor_ = builderForValue.build();
          onChanged();
        } else {
          qtensorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
       */
      public Builder mergeQtensor(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto value) {
        if (qtensorBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              qtensor_ != null &&
              qtensor_ != dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.getDefaultInstance()) {
            qtensor_ =
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.newBuilder(qtensor_).mergeFrom(value).buildPartial();
          } else {
            qtensor_ = value;
          }
          onChanged();
        } else {
          qtensorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
       */
      public Builder clearQtensor() {
        if (qtensorBuilder_ == null) {
          qtensor_ = null;
          onChanged();
        } else {
          qtensorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.Builder getQtensorBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getQtensorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
       */
      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProtoOrBuilder getQtensorOrBuilder() {
        if (qtensorBuilder_ != null) {
          return qtensorBuilder_.getMessageOrBuilder();
        } else {
          return qtensor_ == null ?
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.getDefaultInstance() : qtensor_;
        }
      }
      /**
       * <code>optional .dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.QTensorProto qtensor = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProtoOrBuilder> 
          getQtensorFieldBuilder() {
        if (qtensorBuilder_ == null) {
          qtensorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProto.Builder, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.QTensorProtoOrBuilder>(
                  getQtensor(),
                  getParentForChildren(),
                  isClean());
          qtensor_ = null;
        }
        return qtensorBuilder_;
      }

      private int contentNumChunks_ ;
      /**
       * <pre>
       * If blob is not Tensor and is divided into chunks, content_num_chunks
       * contains number of chunks, into which blob was divided.
       * </pre>
       *
       * <code>optional int32 content_num_chunks = 6;</code>
       */
      public boolean hasContentNumChunks() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * If blob is not Tensor and is divided into chunks, content_num_chunks
       * contains number of chunks, into which blob was divided.
       * </pre>
       *
       * <code>optional int32 content_num_chunks = 6;</code>
       */
      public int getContentNumChunks() {
        return contentNumChunks_;
      }
      /**
       * <pre>
       * If blob is not Tensor and is divided into chunks, content_num_chunks
       * contains number of chunks, into which blob was divided.
       * </pre>
       *
       * <code>optional int32 content_num_chunks = 6;</code>
       */
      public Builder setContentNumChunks(int value) {
        bitField0_ |= 0x00000020;
        contentNumChunks_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If blob is not Tensor and is divided into chunks, content_num_chunks
       * contains number of chunks, into which blob was divided.
       * </pre>
       *
       * <code>optional int32 content_num_chunks = 6;</code>
       */
      public Builder clearContentNumChunks() {
        bitField0_ = (bitField0_ & ~0x00000020);
        contentNumChunks_ = 0;
        onChanged();
        return this;
      }

      private int contentChunkId_ ;
      /**
       * <code>optional int32 content_chunk_id = 7;</code>
       */
      public boolean hasContentChunkId() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 content_chunk_id = 7;</code>
       */
      public int getContentChunkId() {
        return contentChunkId_;
      }
      /**
       * <code>optional int32 content_chunk_id = 7;</code>
       */
      public Builder setContentChunkId(int value) {
        bitField0_ |= 0x00000040;
        contentChunkId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 content_chunk_id = 7;</code>
       */
      public Builder clearContentChunkId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        contentChunkId_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.BlobProto)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.BlobProto)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<BlobProto>
        PARSER = new com.google.protobuf.AbstractParser<BlobProto>() {
      public BlobProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlobProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BlobProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BlobProto> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.BlobProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DBReaderProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DBReaderProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name for the DB object in the workspace.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <pre>
     * The name for the DB object in the workspace.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * The name for the DB object in the workspace.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The source of the DB
     * </pre>
     *
     * <code>optional string source = 2;</code>
     */
    boolean hasSource();
    /**
     * <pre>
     * The source of the DB
     * </pre>
     *
     * <code>optional string source = 2;</code>
     */
    java.lang.String getSource();
    /**
     * <pre>
     * The source of the DB
     * </pre>
     *
     * <code>optional string source = 2;</code>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    /**
     * <pre>
     * The type of the DB
     * </pre>
     *
     * <code>optional string db_type = 3;</code>
     */
    boolean hasDbType();
    /**
     * <pre>
     * The type of the DB
     * </pre>
     *
     * <code>optional string db_type = 3;</code>
     */
    java.lang.String getDbType();
    /**
     * <pre>
     * The type of the DB
     * </pre>
     *
     * <code>optional string db_type = 3;</code>
     */
    com.google.protobuf.ByteString
        getDbTypeBytes();

    /**
     * <pre>
     * The current key of the DB if the DB supports seeking.
     * </pre>
     *
     * <code>optional string key = 4;</code>
     */
    boolean hasKey();
    /**
     * <pre>
     * The current key of the DB if the DB supports seeking.
     * </pre>
     *
     * <code>optional string key = 4;</code>
     */
    java.lang.String getKey();
    /**
     * <pre>
     * The current key of the DB if the DB supports seeking.
     * </pre>
     *
     * <code>optional string key = 4;</code>
     */
    com.google.protobuf.ByteString
        getKeyBytes();
  }
  /**
   * <pre>
   * Protobuf format to serialize DBReader.
   * </pre>
   *
   * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DBReaderProto}
   */
  public  static final class DBReaderProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DBReaderProto)
      DBReaderProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DBReaderProto.newBuilder() to construct.
    private DBReaderProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DBReaderProto() {
      name_ = "";
      source_ = "";
      dbType_ = "";
      key_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DBReaderProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              source_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              dbType_ = bs;
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              key_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DBReaderProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DBReaderProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * The name for the DB object in the workspace.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The name for the DB object in the workspace.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The name for the DB object in the workspace.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SOURCE_FIELD_NUMBER = 2;
    private volatile java.lang.Object source_;
    /**
     * <pre>
     * The source of the DB
     * </pre>
     *
     * <code>optional string source = 2;</code>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The source of the DB
     * </pre>
     *
     * <code>optional string source = 2;</code>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The source of the DB
     * </pre>
     *
     * <code>optional string source = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DB_TYPE_FIELD_NUMBER = 3;
    private volatile java.lang.Object dbType_;
    /**
     * <pre>
     * The type of the DB
     * </pre>
     *
     * <code>optional string db_type = 3;</code>
     */
    public boolean hasDbType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * The type of the DB
     * </pre>
     *
     * <code>optional string db_type = 3;</code>
     */
    public java.lang.String getDbType() {
      java.lang.Object ref = dbType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          dbType_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The type of the DB
     * </pre>
     *
     * <code>optional string db_type = 3;</code>
     */
    public com.google.protobuf.ByteString
        getDbTypeBytes() {
      java.lang.Object ref = dbType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        dbType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int KEY_FIELD_NUMBER = 4;
    private volatile java.lang.Object key_;
    /**
     * <pre>
     * The current key of the DB if the DB supports seeking.
     * </pre>
     *
     * <code>optional string key = 4;</code>
     */
    public boolean hasKey() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * The current key of the DB if the DB supports seeking.
     * </pre>
     *
     * <code>optional string key = 4;</code>
     */
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          key_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The current key of the DB if the DB supports seeking.
     * </pre>
     *
     * <code>optional string key = 4;</code>
     */
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, source_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, dbType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, key_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, source_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, dbType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, key_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto)) {
        return super.equals(obj);
      }
      dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto other = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasSource() == other.hasSource());
      if (hasSource()) {
        result = result && getSource()
            .equals(other.getSource());
      }
      result = result && (hasDbType() == other.hasDbType());
      if (hasDbType()) {
        result = result && getDbType()
            .equals(other.getDbType());
      }
      result = result && (hasKey() == other.hasKey());
      if (hasKey()) {
        result = result && getKey()
            .equals(other.getKey());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasSource()) {
        hash = (37 * hash) + SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + getSource().hashCode();
      }
      if (hasDbType()) {
        hash = (37 * hash) + DB_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getDbType().hashCode();
      }
      if (hasKey()) {
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Protobuf format to serialize DBReader.
     * </pre>
     *
     * Protobuf type {@code dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DBReaderProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DBReaderProto)
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DBReaderProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DBReaderProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto.class, dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto.Builder.class);
      }

      // Construct using dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        dbType_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        key_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DBReaderProto_descriptor;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto getDefaultInstanceForType() {
        return dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto.getDefaultInstance();
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto build() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto buildPartial() {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto result = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.dbType_ = dbType_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.key_ = key_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto) {
          return mergeFrom((dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto other) {
        if (other == dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasSource()) {
          bitField0_ |= 0x00000002;
          source_ = other.source_;
          onChanged();
        }
        if (other.hasDbType()) {
          bitField0_ |= 0x00000004;
          dbType_ = other.dbType_;
          onChanged();
        }
        if (other.hasKey()) {
          bitField0_ |= 0x00000008;
          key_ = other.key_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The name for the DB object in the workspace.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * The name for the DB object in the workspace.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name for the DB object in the workspace.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name for the DB object in the workspace.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name for the DB object in the workspace.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name for the DB object in the workspace.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object source_ = "";
      /**
       * <pre>
       * The source of the DB
       * </pre>
       *
       * <code>optional string source = 2;</code>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * The source of the DB
       * </pre>
       *
       * <code>optional string source = 2;</code>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            source_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The source of the DB
       * </pre>
       *
       * <code>optional string source = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The source of the DB
       * </pre>
       *
       * <code>optional string source = 2;</code>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The source of the DB
       * </pre>
       *
       * <code>optional string source = 2;</code>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000002);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The source of the DB
       * </pre>
       *
       * <code>optional string source = 2;</code>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        source_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object dbType_ = "";
      /**
       * <pre>
       * The type of the DB
       * </pre>
       *
       * <code>optional string db_type = 3;</code>
       */
      public boolean hasDbType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * The type of the DB
       * </pre>
       *
       * <code>optional string db_type = 3;</code>
       */
      public java.lang.String getDbType() {
        java.lang.Object ref = dbType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            dbType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The type of the DB
       * </pre>
       *
       * <code>optional string db_type = 3;</code>
       */
      public com.google.protobuf.ByteString
          getDbTypeBytes() {
        java.lang.Object ref = dbType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          dbType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The type of the DB
       * </pre>
       *
       * <code>optional string db_type = 3;</code>
       */
      public Builder setDbType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        dbType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type of the DB
       * </pre>
       *
       * <code>optional string db_type = 3;</code>
       */
      public Builder clearDbType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        dbType_ = getDefaultInstance().getDbType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type of the DB
       * </pre>
       *
       * <code>optional string db_type = 3;</code>
       */
      public Builder setDbTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        dbType_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object key_ = "";
      /**
       * <pre>
       * The current key of the DB if the DB supports seeking.
       * </pre>
       *
       * <code>optional string key = 4;</code>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * The current key of the DB if the DB supports seeking.
       * </pre>
       *
       * <code>optional string key = 4;</code>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            key_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The current key of the DB if the DB supports seeking.
       * </pre>
       *
       * <code>optional string key = 4;</code>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The current key of the DB if the DB supports seeking.
       * </pre>
       *
       * <code>optional string key = 4;</code>
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The current key of the DB if the DB supports seeking.
       * </pre>
       *
       * <code>optional string key = 4;</code>
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000008);
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The current key of the DB if the DB supports seeking.
       * </pre>
       *
       * <code>optional string key = 4;</code>
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        key_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DBReaderProto)
    }

    // @@protoc_insertion_point(class_scope:dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.DBReaderProto)
    private static final dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto();
    }

    public static dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<DBReaderProto>
        PARSER = new com.google.protobuf.AbstractParser<DBReaderProto>() {
      public DBReaderProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DBReaderProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DBReaderProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DBReaderProto> getParserForType() {
      return PARSER;
    }

    public dp4jpractice.org.tools.dataprocess.dbprocess.caffeproto.Caffe2.DBReaderProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExternalDataProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExternalDataProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_Segment_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_Segment_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_QTensorProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_QTensorProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProtos_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProtos_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShape_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShape_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShapes_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShapes_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_Argument_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_Argument_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DeviceOption_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DeviceOption_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_OperatorDef_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_OperatorDef_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_NetDef_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_NetDef_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExecutionStep_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExecutionStep_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_PlanDef_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_PlanDef_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_BlobProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_BlobProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DBReaderProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DBReaderProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014caffe2.proto\022>dp4jpractice.org.mjsuper" +
      "vised.dataprocess.dbprocess.caffeproto\"\232" +
      "\002\n\021ExternalDataProto\022\203\001\n\013source_type\030\001 \001" +
      "(\0162\\.dp4jpractice.org.tools.datap" +
      "rocess.dbprocess.caffeproto.ExternalData" +
      "Proto.SourceType:\020INLINE_CONTAINER\022\021\n\tre" +
      "cord_id\030\002 \001(\t\022\023\n\013record_size\030\005 \001(\004\022\021\n\006of" +
      "fset\030\003 \001(\003:\0010\022\017\n\007strides\030\004 \003(\003\"3\n\nSource" +
      "Type\022\024\n\020INLINE_CONTAINER\020\000\022\017\n\013SIMPLE_FIL" +
      "E\020\001\"\351\007\n\013TensorProto\022\014\n\004dims\030\001 \003(\003\022n\n\tdat" +
      "a_type\030\002 \001(\0162T.dp4jpractice.org.mjsuperv" +
      "ised.dataprocess.dbprocess.caffeproto.Te" +
      "nsorProto.DataType:\005FLOAT\022t\n\014storage_typ" +
      "e\030\014 \001(\0162W.dp4jpractice.org.tools." +
      "dataprocess.dbprocess.caffeproto.TensorP" +
      "roto.StorageType:\005TYPED\022\026\n\nfloat_data\030\003 " +
      "\003(\002B\002\020\001\022\026\n\nint32_data\030\004 \003(\005B\002\020\001\022\021\n\tbyte_" +
      "data\030\005 \001(\014\022\023\n\013string_data\030\006 \003(\014\022\027\n\013doubl" +
      "e_data\030\t \003(\001B\002\020\001\022\026\n\nint64_data\030\n \003(\003B\002\020\001" +
      "\022\020\n\010raw_data\030\r \001(\014\022h\n\rexternal_data\030\016 \001(" +
      "\0132Q.dp4jpractice.org.tools.datapr" +
      "ocess.dbprocess.caffeproto.ExternalDataP" +
      "roto\022\014\n\004name\030\007 \001(\t\022c\n\rdevice_detail\030\010 \001(" +
      "\0132L.dp4jpractice.org.tools.datapr" +
      "ocess.dbprocess.caffeproto.DeviceOption\022" +
      "d\n\007segment\030\013 \001(\0132S.dp4jpractice.org.mjsu" +
      "pervised.dataprocess.dbprocess.caffeprot" +
      "o.TensorProto.Segment\032%\n\007Segment\022\r\n\005begi" +
      "n\030\001 \002(\003\022\013\n\003end\030\002 \002(\003\"\237\001\n\010DataType\022\r\n\tUND" +
      "EFINED\020\000\022\t\n\005FLOAT\020\001\022\t\n\005INT32\020\002\022\010\n\004BYTE\020\003" +
      "\022\n\n\006STRING\020\004\022\010\n\004BOOL\020\005\022\t\n\005UINT8\020\006\022\010\n\004INT" +
      "8\020\007\022\n\n\006UINT16\020\010\022\t\n\005INT16\020\t\022\t\n\005INT64\020\n\022\013\n" +
      "\007FLOAT16\020\014\022\n\n\006DOUBLE\020\r\"?\n\013StorageType\022\t\n" +
      "\005TYPED\020\001\022\007\n\003RAW\020\002\022\014\n\010EXTERNAL\020\003\022\016\n\nNO_CO" +
      "NTENT\020\004\"\357\001\n\014QTensorProto\022\014\n\004dims\030\001 \003(\003\022\021" +
      "\n\tprecision\030\002 \002(\005\022\r\n\005scale\030\003 \002(\001\022\014\n\004bias" +
      "\030\004 \002(\001\022\021\n\tis_signed\030\005 \002(\010\022\020\n\004data\030\006 \003(\005B" +
      "\002\020\001\022\014\n\004name\030\007 \001(\t\022n\n\tdata_type\030\010 \001(\0162T.d" +
      "p4jpractice.org.tools.dataprocess" +
      ".dbprocess.caffeproto.TensorProto.DataTy" +
      "pe:\005INT32\"k\n\014TensorProtos\022[\n\006protos\030\001 \003(" +
      "\0132K.dp4jpractice.org.tools.datapr" +
      "ocess.dbprocess.caffeproto.TensorProto\"\315" +
      "\001\n\013TensorShape\022\014\n\004dims\030\001 \003(\003\022n\n\tdata_typ" +
      "e\030\002 \001(\0162T.dp4jpractice.org.tools." +
      "dataprocess.dbprocess.caffeproto.TensorP" +
      "roto.DataType:\005FLOAT\022\024\n\014unknown_dims\030\003 \003" +
      "(\005\022\034\n\runknown_shape\030\004 \001(\010:\005false\022\014\n\004name" +
      "\030\005 \001(\t\"k\n\014TensorShapes\022[\n\006shapes\030\001 \003(\0132K" +
      ".dp4jpractice.org.tools.dataproce" +
      "ss.dbprocess.caffeproto.TensorShape\"\307\003\n\010" +
      "Argument\022\014\n\004name\030\001 \001(\t\022\t\n\001f\030\002 \001(\002\022\t\n\001i\030\003" +
      " \001(\003\022\t\n\001s\030\004 \001(\014\022V\n\001t\030\n \001(\0132K.dp4jpractic" +
      "e.org.tools.dataprocess.dbprocess" +
      ".caffeproto.TensorProto\022Q\n\001n\030\010 \001(\0132F.dp4" +
      "jpractice.org.tools.dataprocess.d" +
      "bprocess.caffeproto.NetDef\022\016\n\006floats\030\005 \003" +
      "(\002\022\014\n\004ints\030\006 \003(\003\022\017\n\007strings\030\007 \003(\014\022\\\n\007ten" +
      "sors\030\013 \003(\0132K.dp4jpractice.org.mjsupervis" +
      "ed.dataprocess.dbprocess.caffeproto.Tens" +
      "orProto\022T\n\004nets\030\t \003(\0132F.dp4jpractice.org" +
      ".tools.dataprocess.dbprocess.caff" +
      "eproto.NetDef\"\213\001\n\014DeviceOption\022\026\n\013device" +
      "_type\030\001 \001(\005:\0010\022\021\n\tdevice_id\030\002 \001(\005\022\023\n\013ran" +
      "dom_seed\030\003 \001(\r\022\021\n\tnode_name\030\004 \001(\t\022\024\n\014num" +
      "a_node_id\030\005 \001(\005\022\022\n\nextra_info\030\006 \003(\t\"\202\003\n\013" +
      "OperatorDef\022\r\n\005input\030\001 \003(\t\022\016\n\006output\030\002 \003" +
      "(\t\022\014\n\004name\030\003 \001(\t\022\014\n\004type\030\004 \001(\t\022U\n\003arg\030\005 " +
      "\003(\0132H.dp4jpractice.org.tools.data" +
      "process.dbprocess.caffeproto.Argument\022c\n" +
      "\rdevice_option\030\006 \001(\0132L.dp4jpractice.org." +
      "tools.dataprocess.dbprocess.caffe" +
      "proto.DeviceOption\022\016\n\006engine\030\007 \001(\t\022\025\n\rco" +
      "ntrol_input\030\010 \003(\t\022\035\n\016is_gradient_op\030\t \001(" +
      "\010:\005false\022\022\n\ndebug_info\030\n \001(\t\022\016\n\006domain\030\013" +
      " \001(\t\022\022\n\nop_version\030\014 \001(\003\"\203\003\n\006NetDef\022\014\n\004n" +
      "ame\030\001 \001(\t\022W\n\002op\030\002 \003(\0132K.dp4jpractice.org" +
      ".tools.dataprocess.dbprocess.caff" +
      "eproto.OperatorDef\022\014\n\004type\030\003 \001(\t\022\027\n\013num_" +
      "workers\030\004 \001(\005B\002\030\001\022c\n\rdevice_option\030\005 \001(\013" +
      "2L.dp4jpractice.org.tools.datapro" +
      "cess.dbprocess.caffeproto.DeviceOption\022U" +
      "\n\003arg\030\006 \003(\0132H.dp4jpractice.org.mjsupervi" +
      "sed.dataprocess.dbprocess.caffeproto.Arg" +
      "ument\022\026\n\016external_input\030\007 \003(\t\022\027\n\017externa" +
      "l_output\030\010 \003(\t\"\207\003\n\rExecutionStep\022\014\n\004name" +
      "\030\001 \001(\t\022^\n\007substep\030\002 \003(\0132M.dp4jpractice.o" +
      "rg.tools.dataprocess.dbprocess.ca" +
      "ffeproto.ExecutionStep\022\017\n\007network\030\003 \003(\t\022" +
      "\020\n\010num_iter\030\004 \001(\003\022\034\n\020criteria_network\030\005 " +
      "\001(\tB\002\030\001\022\022\n\nreport_net\030\007 \001(\t\022\027\n\017report_in" +
      "terval\030\010 \001(\005\022\024\n\014run_every_ms\030\013 \001(\003\022\033\n\023co" +
      "ncurrent_substeps\030\006 \001(\010\022\030\n\020should_stop_b" +
      "lob\030\t \001(\t\022\021\n\tonly_once\030\n \001(\010\022\030\n\020create_w" +
      "orkspace\030\014 \001(\010\022 \n\030num_concurrent_instanc" +
      "es\030\r \001(\005\"\327\001\n\007PlanDef\022\014\n\004name\030\001 \001(\t\022W\n\007ne" +
      "twork\030\002 \003(\0132F.dp4jpractice.org.mjsupervi" +
      "sed.dataprocess.dbprocess.caffeproto.Net" +
      "Def\022e\n\016execution_step\030\003 \003(\0132M.dp4jpracti" +
      "ce.org.tools.dataprocess.dbproces" +
      "s.caffeproto.ExecutionStep\"\252\002\n\tBlobProto" +
      "\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022[\n\006tensor\030\003" +
      " \001(\0132K.dp4jpractice.org.tools.dat" +
      "aprocess.dbprocess.caffeproto.TensorProt" +
      "o\022\017\n\007content\030\004 \001(\014\022]\n\007qtensor\030\005 \001(\0132L.dp" +
      "4jpractice.org.tools.dataprocess." +
      "dbprocess.caffeproto.QTensorProto\022\032\n\022con" +
      "tent_num_chunks\030\006 \001(\005\022\030\n\020content_chunk_i" +
      "d\030\007 \001(\005\"K\n\rDBReaderProto\022\014\n\004name\030\001 \001(\t\022\016" +
      "\n\006source\030\002 \001(\t\022\017\n\007db_type\030\003 \001(\t\022\013\n\003key\030\004" +
      " \001(\t*\332\001\n\017DeviceTypeProto\022\r\n\tPROTO_CPU\020\000\022" +
      "\016\n\nPROTO_CUDA\020\001\022\020\n\014PROTO_MKLDNN\020\002\022\020\n\014PRO" +
      "TO_OPENGL\020\003\022\020\n\014PROTO_OPENCL\020\004\022\017\n\013PROTO_I" +
      "DEEP\020\005\022\r\n\tPROTO_HIP\020\006\022\016\n\nPROTO_FPGA\020\007\022\'\n" +
      "#PROTO_COMPILE_TIME_MAX_DEVICE_TYPES\020\010\022\031" +
      "\n\023PROTO_ONLY_FOR_TEST\020\245\243\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExternalDataProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExternalDataProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExternalDataProto_descriptor,
        new java.lang.String[] { "SourceType", "RecordId", "RecordSize", "Offset", "Strides", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_descriptor,
        new java.lang.String[] { "Dims", "DataType", "StorageType", "FloatData", "Int32Data", "ByteData", "StringData", "DoubleData", "Int64Data", "RawData", "ExternalData", "Name", "DeviceDetail", "Segment", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_Segment_descriptor =
      internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_descriptor.getNestedTypes().get(0);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_Segment_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProto_Segment_descriptor,
        new java.lang.String[] { "Begin", "End", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_QTensorProto_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_QTensorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_QTensorProto_descriptor,
        new java.lang.String[] { "Dims", "Precision", "Scale", "Bias", "IsSigned", "Data", "Name", "DataType", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProtos_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProtos_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorProtos_descriptor,
        new java.lang.String[] { "Protos", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShape_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShape_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShape_descriptor,
        new java.lang.String[] { "Dims", "DataType", "UnknownDims", "UnknownShape", "Name", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShapes_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShapes_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_TensorShapes_descriptor,
        new java.lang.String[] { "Shapes", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_Argument_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_Argument_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_Argument_descriptor,
        new java.lang.String[] { "Name", "F", "I", "S", "T", "N", "Floats", "Ints", "Strings", "Tensors", "Nets", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DeviceOption_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DeviceOption_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DeviceOption_descriptor,
        new java.lang.String[] { "DeviceType", "DeviceId", "RandomSeed", "NodeName", "NumaNodeId", "ExtraInfo", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_OperatorDef_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_OperatorDef_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_OperatorDef_descriptor,
        new java.lang.String[] { "Input", "Output", "Name", "Type", "Arg", "DeviceOption", "Engine", "ControlInput", "IsGradientOp", "DebugInfo", "Domain", "OpVersion", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_NetDef_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_NetDef_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_NetDef_descriptor,
        new java.lang.String[] { "Name", "Op", "Type", "NumWorkers", "DeviceOption", "Arg", "ExternalInput", "ExternalOutput", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExecutionStep_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExecutionStep_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_ExecutionStep_descriptor,
        new java.lang.String[] { "Name", "Substep", "Network", "NumIter", "CriteriaNetwork", "ReportNet", "ReportInterval", "RunEveryMs", "ConcurrentSubsteps", "ShouldStopBlob", "OnlyOnce", "CreateWorkspace", "NumConcurrentInstances", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_PlanDef_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_PlanDef_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_PlanDef_descriptor,
        new java.lang.String[] { "Name", "Network", "ExecutionStep", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_BlobProto_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_BlobProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_BlobProto_descriptor,
        new java.lang.String[] { "Name", "Type", "Tensor", "Content", "Qtensor", "ContentNumChunks", "ContentChunkId", });
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DBReaderProto_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DBReaderProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dp4jpractice_org_tools_dataprocess_dbprocess_caffeproto_DBReaderProto_descriptor,
        new java.lang.String[] { "Name", "Source", "DbType", "Key", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
